__NUXT_JSONP__("/view/java/20180130/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3java%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%AC%AC%E4%B8%89-%E4%B8%83%E7%AB%A0%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0", (function(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S){return {data:[{siteConfig:{siteName:D,siteHost:"https:\u002F\u002Fcellargalaxy.github.io",basePath:"\u002Fblog-code\u002F",navs:[{text:"文章",url:"\u002Fblog-code\u002Fpage\u002F1\u002F"},{text:"归档",url:"\u002Fblog-code\u002Farchive\u002F0\u002F"},{text:"画画",url:"\u002Fblog-code\u002Fhtml\u002Fhua.html"},{text:"开源",url:"\u002Fblog-code\u002Fhttps:\u002Fgithub.com\u002Fcellargalaxy\u002Fblog-vue"}],pageSize:10,urlReplace:{"^/file/blog/code":"https:\u002F\u002Foracleamd1.dynv6.net\u002Ffile\u002Ffile\u002Fblog\u002Fcode"},backgroundImage:{duration:E,fade:1000,images:[{url:"https:\u002F\u002Fi.loli.net\u002F2020\u002F01\u002F25\u002FcofTzDQXitjeVZ6.jpg",description:F,type:p},{url:"https:\u002F\u002Fi.loli.net\u002F2020\u002F01\u002F25\u002FsfaRJ2lVeM3NDbE.jpg",description:F,type:p},{url:"https:\u002F\u002Fi.loli.net\u002F2020\u002F01\u002F26\u002FKybiTdftam5Su7x.jpg",description:"青春猪头-双葉理央",type:p},{url:"https:\u002F\u002Fi.loli.net\u002F2020\u002F09\u002F08\u002FxdX73nfs24qgOYk.jpg",description:"京吹-明日香,久美子",type:p},{url:"https:\u002F\u002Fi.loli.net\u002F2020\u002F02\u002F14\u002FMAiruNcEFW2HYtg.jpg",description:"终将成为你-七海灯子,小糸侑",type:p},{url:"https:\u002F\u002Fi.loli.net\u002F2020\u002F02\u002F05\u002FEojdAxTDJsFpbPw.jpg",description:"玉子市场-北白川玉子",type:p},{url:"https:\u002F\u002Fi.loli.net\u002F2020\u002F01\u002F31\u002FAXxwJDRS9fmN2uU.jpg",description:"fate_hf-弓道馆",type:p},{url:"https:\u002F\u002Fi.loli.net\u002F2020\u002F02\u002F01\u002FaHhVObpJus6dnM4.jpg",description:"fate_hf-樱花树",type:p}]}},homeConfig:{brandInterval:E,brands:[{imageUrl:"https:\u002F\u002Fi.loli.net\u002F2020\u002F01\u002F21\u002FmMEAnwY5XPC2pFb.jpg",title:"日常",texts:["我们所度过的每个平凡的日常，也许就是连续不断发生的奇迹。","日々、私たちが過ごしている日常は、実は奇跡の連続なのかもしれない。"]},{imageUrl:"https:\u002F\u002Fi.loli.net\u002F2020\u002F04\u002F19\u002FH1MmXb9xPcYEhT2.jpg",title:"昨日之歌",texts:["时间梭梭箭如飞，人道漫漫步蹒跚","人間そんな変わるもんじゃないのに、月日ばっかどんどん過ぎて"]}],navs:[{text:"Github",url:"https:\u002F\u002Fgithub.com\u002Fcellargalaxy\u002F"}]},pageFootConfig:{lines:[[{text:"Copyright © 2017-? ."},{text:"备案？不存在的"},{text:"Powered by Nuxt.js & Github"}]]},buildTime:new Date(1659171919508),siteName:D,file:{slug:G,description:"",createdAt:H,updatedAt:H,toc:[{id:t,depth:n,text:t},{id:q,depth:n,text:q},{id:r,depth:n,text:r},{id:u,depth:n,text:u},{id:v,depth:n,text:v},{id:w,depth:n,text:w},{id:x,depth:n,text:x},{id:y,depth:n,text:y},{id:z,depth:n,text:z}],body:{type:I,children:[{type:a,value:c},{type:b,tag:m,props:{id:J},children:[{type:b,tag:e,props:{ariaHidden:f,href:"#%E5%BC%95%E7%94%A8%E8%AE%A1%E6%95%B0%E7%AE%97%E6%B3%95",tabIndex:g},children:[{type:b,tag:h,props:{className:[i,j]},children:[]}]},{type:a,value:J}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"引用计数算法就是某个对象每增加一个被引用，就计数加一，如果某个对象的引用计数为零，那就是没有被引用了。但显然这种算法没法解决A对象引用B对象，B对象也引用A对象，但除此以外就再也没有任何对象yinyA或者B对象的问题。"}]},{type:a,value:c},{type:b,tag:m,props:{id:K},children:[{type:b,tag:e,props:{ariaHidden:f,href:"#%E5%8F%AF%E8%BE%BE%E6%80%A7%E5%88%86%E6%9E%90%E7%AE%97%E6%B3%95",tabIndex:g},children:[{type:b,tag:h,props:{className:[i,j]},children:[]}]},{type:a,value:K}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"可达性分析算法是像树一样，从一系列的根节点，称为“GC Roots”开始向下搜索，如果遍历不到某个对象，则这个对象以及没有被引用。而GC Roots包括方法区里的静态或者终态的引用对象和本地方法栈和虚拟机栈的引用对象。"}]},{type:a,value:c},{type:b,tag:m,props:{id:"finalize方法"},children:[{type:b,tag:e,props:{ariaHidden:f,href:"#finalize%E6%96%B9%E6%B3%95",tabIndex:g},children:[{type:b,tag:h,props:{className:[i,j]},children:[]}]},{type:a,value:"finalize()方法"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"当对象通过可达性分析发现没有被引用的时候，会被作第一次标记，然后判断是否需要执行对象的finalize方法。判断是否要执行finalize方法的标准是如果对象没有覆盖finalize方法或者以及执行过finalize方法，视为不需要执行finalize方法。由于finalize方法的执行可能会导致阻塞，所以并不会判断一个对象需要执行finalize方法然后就直接执行finalize方法。而是先判断对象是否需要执行finalize方法，如果需要，对象会被放进一个F-Queue队列里，由一个虚拟机自动创建的低优先级的线程复制执行finalize方法。由于线程级别低，还可能会被前面的对象的finalize方法阻塞，所以虚拟机是不会也无法确保每个被回收的对象能按时执行其finalize方法。在执行完finalize方法后，对象将会再次被检查是否有被引用，如果有就从队列中移除，否则对象就被回收了。因此，在虚拟机正式回收对象前执行的finalize方法是对象最后的“自我拯救”的方法。只要在这个方法里使得任意一个存活对象引用了自己，对象就暂时免于一死。但是finalize方法只会被执行一次，因此对象也只有一次“自我拯救”的机会。"}]},{type:a,value:c},{type:b,tag:m,props:{id:L},children:[{type:b,tag:e,props:{ariaHidden:f,href:"#%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E7%AE%97%E6%B3%95",tabIndex:g},children:[{type:b,tag:h,props:{className:[i,j]},children:[]}]},{type:a,value:L}]},{type:a,value:c},{type:b,tag:o,props:{id:t},children:[{type:b,tag:e,props:{ariaHidden:f,href:"#%E6%A0%87%E8%AE%B0-%E6%B8%85%E9%99%A4%E7%AE%97%E6%B3%95",tabIndex:g},children:[{type:b,tag:h,props:{className:[i,j]},children:[]}]},{type:a,value:t}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"标记-清除算法如其名，就是标记出需要已经死亡的对象，然后清理"}]},{type:a,value:c},{type:b,tag:o,props:{id:q},children:[{type:b,tag:e,props:{ariaHidden:f,href:"#%E5%A4%8D%E5%88%B6%E7%AE%97%E6%B3%95",tabIndex:g},children:[{type:b,tag:h,props:{className:[i,j]},children:[]}]},{type:a,value:q}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"复制算法的简单版是将内存分为等大小的两半。一开始对象的分配只在其中一边进行，当需要清理的时候，把存活的对象复制到另外一边的内存，然后直接清理原本那半内存就好。但是这样内存的利用率就只有50%。但实际上，新生代98%的对象都是“朝生夕死”的。所以改进版的复制算法将内存分为等大小的是个部分。其中两个部分各自作为Survivor1和Survivor2，剩下的八分作为Eden。一开始对象的分配只在Eden进行，当需要清理时，将Survivor1和Eden的存活对象复制到Survivor2里。然后清理Survivor1和Eden。这样利用率就达到90%。当然还有个问题，就是万一Survivor2的内存不够存放Survivor1和Eden的存活对象时，就需要向老年代借内存了。"}]},{type:a,value:c},{type:b,tag:o,props:{id:r},children:[{type:b,tag:e,props:{ariaHidden:f,href:"#%E6%A0%87%E8%AE%B0-%E6%95%B4%E7%90%86%E7%AE%97%E6%B3%95",tabIndex:g},children:[{type:b,tag:h,props:{className:[i,j]},children:[]}]},{type:a,value:r}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"标记-整理算法是根据老年代的特点设计的。清理时将存活对象都移动到一端，然后直接清理端边界以外的内存即可。"}]},{type:a,value:c},{type:b,tag:o,props:{id:u},children:[{type:b,tag:e,props:{ariaHidden:f,href:"#%E5%88%86%E4%BB%A3%E6%94%B6%E9%9B%86%E7%AE%97%E6%B3%95",tabIndex:g},children:[{type:b,tag:h,props:{className:[i,j]},children:[]}]},{type:a,value:u}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"分代收集算法根据对象的存活时间将对象分为新生代和老年代，根据不同代的特点选择以上的合适的算法。"}]},{type:a,value:c},{type:b,tag:m,props:{id:"枚举根节点安全点安全区域"},children:[{type:b,tag:e,props:{ariaHidden:f,href:"#%E6%9E%9A%E4%B8%BE%E6%A0%B9%E8%8A%82%E7%82%B9%E5%AE%89%E5%85%A8%E7%82%B9%E5%AE%89%E5%85%A8%E5%8C%BA%E5%9F%9F",tabIndex:g},children:[{type:b,tag:h,props:{className:[i,j]},children:[]}]},{type:a,value:"枚举根节点，安全点，安全区域"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"在枚举根节点，检查对象的引用关系时，不能一边搜索对象的引用关系还在变。所以需要停止掉全部用户线程，sun将这个叫做Stpo THe World。"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"要执行GC的时候，并不是任意一个地方都可以停下了进行GC。而可以停下来执行GC的代码点叫做安全点。所以安全点既不能过多，也不能过少。而安全区域则是安全点的拓展，在某一段代码里后可以执行GC。"}]},{type:a,value:c},{type:b,tag:m,props:{id:M},children:[{type:b,tag:e,props:{ariaHidden:f,href:"#%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8",tabIndex:g},children:[{type:b,tag:h,props:{className:[i,j]},children:[]}]},{type:a,value:M}]},{type:a,value:"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{type:b,tag:"table",props:{},children:[{type:b,tag:"thead",props:{},children:[{type:b,tag:A,props:{},children:[{type:b,tag:B,props:{},children:[{type:a,value:"分代"}]},{type:b,tag:B,props:{},children:[{type:a,value:"单线程"}]},{type:b,tag:B,props:{},children:[{type:a,value:"多线程"}]},{type:b,tag:B,props:{},children:[{type:a,value:"算法"}]}]}]},{type:b,tag:"tbody",props:{},children:[{type:b,tag:A,props:{},children:[{type:b,tag:l,props:{},children:[{type:a,value:"新生代"}]},{type:b,tag:l,props:{},children:[{type:a,value:"Serial"}]},{type:b,tag:l,props:{},children:[{type:a,value:"perNew\u002FParallel Scavenger"}]},{type:b,tag:l,props:{},children:[{type:a,value:q}]}]},{type:b,tag:A,props:{},children:[{type:b,tag:l,props:{},children:[{type:a,value:"老年代"}]},{type:b,tag:l,props:{},children:[{type:a,value:"Serial Old"}]},{type:b,tag:l,props:{},children:[{type:a,value:"Parallel Old\u002FCMS"}]},{type:b,tag:l,props:{},children:[{type:a,value:r}]}]},{type:b,tag:A,props:{},children:[{type:b,tag:l,props:{},children:[{type:a,value:"G1中将内存分为多个部分（Region），所以在G1中并没有新生代和老年代的概念，也可以理解为G1是新生代和老年代通吃的。"}]},{type:b,tag:l,props:{},children:[]},{type:b,tag:l,props:{},children:[]},{type:b,tag:l,props:{},children:[]}]}]}]},{type:a,value:c},{type:b,tag:m,props:{id:N},children:[{type:b,tag:e,props:{ariaHidden:f,href:"#%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E5%92%8C%E5%9B%9E%E6%94%B6%E7%AD%96%E7%95%A5",tabIndex:g},children:[{type:b,tag:h,props:{className:[i,j]},children:[]}]},{type:a,value:N}]},{type:a,value:c},{type:b,tag:s,props:{},children:[{type:a,value:c},{type:b,tag:k,props:{},children:[{type:a,value:"对象优先分配到Eden"}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:a,value:"大对象直接进入老年代"}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:a,value:"长期存活对象将会进入老年代"}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:a,value:"如果Survivor中相同年龄的对象的大小大于Survivor的一半，年龄大于等于改年龄的对象直接进入老年代"}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"第四章虚拟机性能监控与故障处理工具和第五章调优案例分析与实战跳过"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"第六章类文件结构枯燥乏味好难懂，无奈跳过。"}]},{type:a,value:c},{type:b,tag:m,props:{id:O},children:[{type:b,tag:e,props:{ariaHidden:f,href:"#%E7%B1%BB%E7%9A%84%E5%8A%A0%E8%BD%BD",tabIndex:g},children:[{type:b,tag:h,props:{className:[i,j]},children:[]}]},{type:a,value:O}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"类从被加载到虚拟机到卸载出内存，整个生命周期包活：加载，验证，准备，解析，初始化，使用，卸载。其中验证，准备，解析统称为连接。加载，验证，准备，初始化，卸载这五个阶段的开始的先后是按顺序的，解析则不然。并且这五个阶段只是开始的时间按顺序，他们之间的执行过程可以相互加成混合进行。什么时候进行加载，虚拟机规范并没有规定，所以不同虚拟机可能各不一样。而初始化虚拟机规范则规定"},{type:b,tag:"strong",props:{},children:[{type:a,value:"有且只有"}]},{type:a,value:"以下五种情况是一定要进行类的初始化，称为主动引用，否则其余情况都不会触发类的初始化，称为被动引用。"}]},{type:a,value:c},{type:b,tag:s,props:{},children:[{type:a,value:c},{type:b,tag:k,props:{},children:[{type:a,value:"通过new以及还有三个不知道什么指令实例化对象时，如果类没有被初始化，则初始化其静态字段（终态已经在编译的时候被放进常量池，所以除外）"}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:a,value:"通过java.lang.reflect反射调用类"}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:a,value:"初始化一个类时，其父类还没初始化"}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:a,value:"虚拟机启动时程序入口类（main方法的那个类）先初始化"}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:a,value:"不知道什么句柄，看不懂"}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:o,props:{id:v},children:[{type:b,tag:e,props:{ariaHidden:f,href:"#%E5%8A%A0%E8%BD%BD",tabIndex:g},children:[{type:b,tag:h,props:{className:[i,j]},children:[]}]},{type:a,value:v}]},{type:a,value:c},{type:b,tag:s,props:{},children:[{type:a,value:c},{type:b,tag:k,props:{},children:[{type:a,value:"通过一个类的全限定名来获取定义此类的二进制字节流"}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:a,value:"通过字节流所代表的静态储存结构转化为方法区的运行时数据结构（简单来说就是转换字节流的数据结构然后放到方法区）"}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:a,value:"在内存中生成一个代表此类的java.lang.Class对象，作为方法区里这个类的访问入口。"}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:o,props:{id:w},children:[{type:b,tag:e,props:{ariaHidden:f,href:"#%E9%AA%8C%E8%AF%81",tabIndex:g},children:[{type:b,tag:h,props:{className:[i,j]},children:[]}]},{type:a,value:w}]},{type:a,value:c},{type:b,tag:s,props:{},children:[{type:a,value:c},{type:b,tag:k,props:{},children:[{type:a,value:"文件格式验证，验证是不是class文件，是不是虚拟机能处理的class版本，以及数据的编码结构完整性是否正常"}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:a,value:"元数据验证，验证各个字段如继承，覆盖，抽象之类是否合法"}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:a,value:"字节码验证，验证代码逻辑是否“合理”"}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:a,value:"符号引用验证，验证各个引用是否能真能引用到需要的对象"}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:o,props:{id:x},children:[{type:b,tag:e,props:{ariaHidden:f,href:"#%E5%87%86%E5%A4%87",tabIndex:g},children:[{type:b,tag:h,props:{className:[i,j]},children:[]}]},{type:a,value:x}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"为类的静态和终态变量分配内存。静态变量的值会初始化为零值，而终态变量会初始化为代码指定值。而静态变量值要修改为代码指定值需要的到初始化阶段。"}]},{type:a,value:c},{type:b,tag:o,props:{id:y},children:[{type:b,tag:e,props:{ariaHidden:f,href:"#%E8%A7%A3%E6%9E%90",tabIndex:g},children:[{type:b,tag:h,props:{className:[i,j]},children:[]}]},{type:a,value:y}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"看不懂，跳过"}]},{type:a,value:c},{type:b,tag:o,props:{id:z},children:[{type:b,tag:e,props:{ariaHidden:f,href:"#%E5%88%9D%E5%A7%8B%E5%8C%96",tabIndex:g},children:[{type:b,tag:h,props:{className:[i,j]},children:[]}]},{type:a,value:z}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"如上所说，会给静态变量赋值为代码指定值"}]},{type:a,value:c},{type:b,tag:m,props:{id:P},children:[{type:b,tag:e,props:{ariaHidden:f,href:"#%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8",tabIndex:g},children:[{type:b,tag:h,props:{className:[i,j]},children:[]}]},{type:a,value:P}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"类加载器读取字节码，然后创建一个class对象，多个类加载器之间又不会共用class对象。可见，如果有两个类加载器，就算读取同样的字节码，也会创建出两个不同class对象，使用"},{type:b,tag:C,props:{},children:[{type:a,value:"=="}]},{type:a,value:"也好，equals()来比较结果是False。"},{type:b,tag:C,props:{},children:[{type:a,value:"instanceof"}]},{type:a,value:"也是False。因此，某个类加载器所创建的某个class对象才能确定唯一的class对象。"}]},{type:a,value:c},{type:b,tag:m,props:{id:Q},children:[{type:b,tag:e,props:{ariaHidden:f,href:"#%E5%8F%8C%E4%BA%B2%E5%A7%94%E6%B4%BE%E6%A8%A1%E5%9E%8B",tabIndex:g},children:[{type:b,tag:h,props:{className:[i,j]},children:[]}]},{type:a,value:Q}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"先说明，这里的双亲（parent）并不是指上头有两个，它像java的单继承关系（但不是通过继承，是通过组合来复用父类加载器的代码），其实就要不只有爸要不只有妈。"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"类加载器分三类："}]},{type:a,value:c},{type:b,tag:s,props:{},children:[{type:a,value:c},{type:b,tag:k,props:{},children:[{type:a,value:"启动类加载器，由C++写成，加载"},{type:b,tag:C,props:{},children:[{type:a,value:"\u003CJAVA_HOME\u003E\u002Flib"}]},{type:a,value:"下的，按名字规定的类，因此自己放个类到那里是不会被识别加载的"}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:a,value:"拓展类加载器，加载"},{type:b,tag:C,props:{},children:[{type:a,value:"\u003CJAVA_HOME\u003E\u002Flib\u002Fext"}]},{type:a,value:"下的类"}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:a,value:"应用程序类加载器，负责用户路径（ClassPath）的类加载，如果没有被修改过，程序默认就是使用这个类加载器"}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"所以，自定义类加载器会复用应用程序类加载器，应用程序类加载器复用拓展类加载器，拓展类加载器复用启动类加载器。"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"双亲委派模型的工作过程是，一个类加载器接受到一个类加载请求，会检查这个类是否以及加载过，如果没有，则会查看自己有没有父加载器，如果有则交给父加载器，否则交给启动类加载器。如果上头的类加载器加载不了才会尝试自己加载。这样子能确保Java的继承体系正常。例如要加载java.lang.Object类，如果 类加载器自己就加载了，就可能有多个java.lang.Object的class，全部类都是同一个java.lang.Object的子类的体系就会被破会。而先交给上头类加载器的或，java.lang.Object这种类就会在最顶上唯一地加载。"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"要实现自己的类加载器，只要继承Java.lang.ClassLoader，实现（还是覆盖？）findClass()方法即可。上面的查看类是否以及加载，交给上头类加载器之类的逻辑在loadClass()方法里以及写好，如果上头类加载器加载不了会调用被实现了的findClass()方法。"}]}]},excerpt:{type:I,children:[]},dir:R,path:"\u002Fjava\u002F20180130\u002F深入理解java虚拟机第三-七章学习笔记",extension:".md",title:G,url:"\u002Fblog-code\u002Fview\u002Fjava\u002F20180130\u002F深入理解java虚拟机第三-七章学习笔记\u002F",createAt:new Date(1517270400000),updateAt:new Date(1517270400000),attributes:[{name:"createAt",value:S},{name:"updateAt",value:S},{name:"sort",value:R,url:"\u002Fblog-code\u002Fpage\u002Fjava\u002F20180130\u002F1\u002F"}]}}],fetch:{},mutations:void 0}}("text","element","\n","p","a","true",-1,"span","icon","icon-link","li","td","h1",2,"h2","wide","复制算法","标记-整理算法","ol","标记-清除算法","分代收集算法","加载","验证","准备","解析","初始化","tr","th","code","无名の窝",10000,"青春猪头-牧之原翔子-江之岛","深入理解java虚拟机第三-七章学习笔记","2018-01-30T00:00:00.000Z","root","引用计数算法","可达性分析算法","垃圾收集算法","垃圾收集器","内存分配和回收策略","类的加载","类加载器","双亲委派模型","\u002Fjava\u002F20180130","2018-01-30")));