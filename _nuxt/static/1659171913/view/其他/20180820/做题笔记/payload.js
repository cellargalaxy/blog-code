__NUXT_JSONP__("/view/%E5%85%B6%E4%BB%96/20180820/%E5%81%9A%E9%A2%98%E7%AC%94%E8%AE%B0", (function(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,_,$,aa,ab,ac,ad,ae,af,ag,ah,ai,aj,ak,al,am,an,ao,ap,aq){return {data:[{siteConfig:{siteName:T,siteHost:"https:\u002F\u002Fcellargalaxy.github.io",basePath:"\u002Fblog-code\u002F",navs:[{text:"文章",url:"\u002Fblog-code\u002Fpage\u002F1\u002F"},{text:"归档",url:"\u002Fblog-code\u002Farchive\u002F0\u002F"},{text:"画画",url:"\u002Fblog-code\u002Fhtml\u002Fhua.html"},{text:"开源",url:"\u002Fblog-code\u002Fhttps:\u002Fgithub.com\u002Fcellargalaxy\u002Fblog-vue"}],pageSize:10,urlReplace:{"^/file/blog/code":"https:\u002F\u002Foracleamd1.dynv6.net\u002Ffile\u002Ffile\u002Fblog\u002Fcode"},backgroundImage:{duration:U,fade:1000,images:[{url:"https:\u002F\u002Fi.loli.net\u002F2020\u002F01\u002F25\u002FcofTzDQXitjeVZ6.jpg",description:V,type:s},{url:"https:\u002F\u002Fi.loli.net\u002F2020\u002F01\u002F25\u002FsfaRJ2lVeM3NDbE.jpg",description:V,type:s},{url:"https:\u002F\u002Fi.loli.net\u002F2020\u002F01\u002F26\u002FKybiTdftam5Su7x.jpg",description:"青春猪头-双葉理央",type:s},{url:"https:\u002F\u002Fi.loli.net\u002F2020\u002F09\u002F08\u002FxdX73nfs24qgOYk.jpg",description:"京吹-明日香,久美子",type:s},{url:"https:\u002F\u002Fi.loli.net\u002F2020\u002F02\u002F14\u002FMAiruNcEFW2HYtg.jpg",description:"终将成为你-七海灯子,小糸侑",type:s},{url:"https:\u002F\u002Fi.loli.net\u002F2020\u002F02\u002F05\u002FEojdAxTDJsFpbPw.jpg",description:"玉子市场-北白川玉子",type:s},{url:"https:\u002F\u002Fi.loli.net\u002F2020\u002F01\u002F31\u002FAXxwJDRS9fmN2uU.jpg",description:"fate_hf-弓道馆",type:s},{url:"https:\u002F\u002Fi.loli.net\u002F2020\u002F02\u002F01\u002FaHhVObpJus6dnM4.jpg",description:"fate_hf-樱花树",type:s}]}},homeConfig:{brandInterval:U,brands:[{imageUrl:"https:\u002F\u002Fi.loli.net\u002F2020\u002F01\u002F21\u002FmMEAnwY5XPC2pFb.jpg",title:"日常",texts:["我们所度过的每个平凡的日常，也许就是连续不断发生的奇迹。","日々、私たちが過ごしている日常は、実は奇跡の連続なのかもしれない。"]},{imageUrl:"https:\u002F\u002Fi.loli.net\u002F2020\u002F04\u002F19\u002FH1MmXb9xPcYEhT2.jpg",title:"昨日之歌",texts:["时间梭梭箭如飞，人道漫漫步蹒跚","人間そんな変わるもんじゃないのに、月日ばっかどんどん過ぎて"]}],navs:[{text:"Github",url:"https:\u002F\u002Fgithub.com\u002Fcellargalaxy\u002F"}]},pageFootConfig:{lines:[[{text:"Copyright © 2017-? ."},{text:"备案？不存在的"},{text:"Powered by Nuxt.js & Github"}]]},buildTime:new Date(1659171921335),siteName:T,file:{slug:W,description:v,createdAt:X,updatedAt:X,toc:[],body:{type:Y,children:[{type:a,value:e},{type:b,tag:m,props:{id:Z},children:[{type:b,tag:n,props:{ariaHidden:o,href:"#2018-9-5",tabIndex:p},children:[{type:b,tag:c,props:{className:[q,r]},children:[]}]},{type:a,value:Z}]},{type:a,value:e},{type:b,tag:f,props:{},children:[{type:a,value:"在Unix系统中，若一个进程退出时，其子进程还在运行（没有被杀死），则这些子进程会变成孤儿进程（Orphan Process），请问孤儿进程会被以下哪一个系统进程接管？\n答案：init\n僵尸进程：当一个进程完成它的工作终止之后，它的父进程需要调用wait()或者waitpid()系统调用取得子进程的终止状态。如果没调用，子进程的描述符还保留在系统中，那这个子进程就是僵尸进程。\n孤儿进程：一个父进程退出，而它的一个或多个子进程还在运行，那么那些子进程将成为孤儿进程。孤儿进程将被init进程(进程号为1)所收养，并由init进程对它们完成状态收集工作。\n孤儿进程最后会被init接管，而僵尸进程会继续占用资源。"}]},{type:a,value:e},{type:b,tag:f,props:{},children:[{type:a,value:"如果二叉树T2是由树T1转换而来的二叉树，那么T1中结点的先序就是T2中结点的 。\n答案：先序。简单画个abc就找到了。"}]},{type:a,value:e},{type:b,tag:f,props:{},children:[{type:a,value:"已知一个长度为16的顺序表L，其元素按关键字有序排列，若采用折半查找法查找一个 L中 不存在的元素，则 关键字的 比较次数最多是（）\n答案：5\n一种直观的办法：\n"},{type:b,tag:w,props:{alt:v,"data-src":"https:\u002F\u002Foracleamd1.dynv6.net\u002Ffile\u002Ffile\u002Fblog\u002Fcode\u002F20180820\u002Fuploadfiles.nowcoder.net-images-20161217-331886_1481939419706_156005C5BAF40FF51A327F1C34F2975B"},children:[]}]},{type:a,value:e},{type:b,tag:f,props:{},children:[{type:a,value:"设有n个关键字具有相同的Hash函数值，则用线性探测法把这n个关键字映射到Hash表中需要做几次线性探测？\n答案：n*(n-1)\u002F2，为什么是n-1呢\ntm的问的是叫线性探测，测一下隔壁的才叫线性探测？所以第一次线性探测数为0？"}]},{type:a,value:e},{type:b,tag:f,props:{},children:[{type:a,value:"在RHEL5系统中使用vi编辑文件report.txt时，要自下而上查找字符串“2006”，应该在命令模式下使用（   ）\n从上往下查找，就像坐滑滑梯-------\u002F\n从下往上查找，就需要倒挂金钩了-------？"}]},{type:a,value:e},{type:b,tag:f,props:{},children:[{type:a,value:"long → float 竟然无须强制转换"}]},{type:a,value:e},{type:b,tag:f,props:{},children:[{type:a,value:"使用useradd创建用户时和主目录相关的参数是()\n-p 设定帐号的密码\n-d 指定用户的主目录\n-m 自动建立用户的主目录\n-M 不要自动建立用户的主目录"}]},{type:a,value:e},{type:b,tag:m,props:{id:_},children:[{type:b,tag:n,props:{ariaHidden:o,href:"#2018-9-4",tabIndex:p},children:[{type:b,tag:c,props:{className:[q,r]},children:[]}]},{type:a,value:_}]},{type:a,value:e},{type:b,tag:f,props:{},children:[{type:a,value:"若串S=’software’，其子串数目为(包括空串)：\n答案：37。software本身属于子串"}]},{type:a,value:e},{type:b,tag:f,props:{},children:[{type:a,value:"在所有排序方法中，关键字比较的次数与记录的初始排列次序无关的是（）\n"},{type:b,tag:w,props:{alt:v,"data-src":"https:\u002F\u002Foracleamd1.dynv6.net\u002Ffile\u002Ffile\u002Fblog\u002Fcode\u002F20180820\u002Fuploadfiles.nowcoder.net-images-20180104-8336752_1515059330918_C1E97AEBCF714B35A7814DEE4E2091EB"},children:[]}]},{type:a,value:e},{type:b,tag:f,props:{},children:[{type:a,value:"将森林F转换为对应的二叉树T，F中叶结点的个数等于 （）\nT中左孩子指针为空的结点个数\n"},{type:b,tag:w,props:{alt:v,"data-src":"https:\u002F\u002Foracleamd1.dynv6.net\u002Ffile\u002Ffile\u002Fblog\u002Fcode\u002F20180820\u002Fuploadfiles.nowcoder.net-images-20170808-5046387_1502204004328_69F3551FAF4C71232FF10860D02AB6CC"},children:[]}]},{type:a,value:e},{type:b,tag:f,props:{},children:[{type:a,value:"MySQL主从架构的主数据库中不可能出现的日志为：\n答案：中继日志。（睁大眼看清楚问的是主数据库）"}]},{type:a,value:e},{type:b,tag:f,props:{},children:[{type:a,value:"设有6个结点的无向图，该图至少应有（）条边，才能确保是一个连通图？\n答案：11\n这里需要确保，而不是至少。那么假设他不是连通图，只有五个点连通。五个点连通最多就是10条线，那加多一条就必须六个点，因此11。"}]},{type:a,value:e},{type:b,tag:f,props:{},children:[{type:a,value:"文件aaa的访问权限为rw-r--r--,现要增加所有用户的执行权限和同组用户的写权限，下列哪些命令是正确的？\n答案：chmod 775 aaa\n第一个rwx表示所有者，第二个表示组第三个表示处理所有者和组的其他人\n首先是764，但是要求全部人（不止其他人）有执行权限，所以第二个和第三个都要加1。"}]},{type:a,value:e},{type:b,tag:m,props:{id:$},children:[{type:b,tag:n,props:{ariaHidden:o,href:"#2018-8-30",tabIndex:p},children:[{type:b,tag:c,props:{className:[q,r]},children:[]}]},{type:a,value:$}]},{type:a,value:e},{type:b,tag:f,props:{},children:[{type:a,value:"下面排序算法中， 算法可能会出现下面情况：初始数据有序时，花费的时间反而最多\n快速排序，因为快排会按照大小将数组分为两半，有序的话分就不均匀了"}]},{type:a,value:e},{type:b,tag:f,props:{},children:[{type:a,value:"已知表tbl中字段land_ID建有索引，字段cust_id建有唯一索引，下列语句查询逻辑相同，其中执行效率最优的是\n答案D。免在 where 子句中使用 or 来连接条件，否则将导致引擎放弃使用索引而进行全表扫描"}]},{type:a,value:e},{type:b,tag:z,props:{className:[A]},children:[{type:b,tag:B,props:{className:[C,N]},children:[{type:b,tag:j,props:{},children:[{type:a,value:"A：\nSELECT * FROM tbl\nWHERE land_id \u003E 750\nor (cust_id=180 or cust_id=560)\n \nB:\nSELECT * FROM tbl\nWHERE (cust_id=180 or cust_id=560)\nor land_id \u003E 750\n \nC：\nSELECT * FROM tbl WHERE land_id \u003E 750\nUNION\nSELECT * FROM tbl WHERE cust_id = 180\nUNION\nSELECT * FROM tbl WHERE cust_id = 560\n \nD:\nSELECT * FROM tbl WHERE land_id \u003E 750\nUNION\n( SELECT * FROM tbl WHERE cust_id = 180\nUNION ALL\nSELECT * FROM tbl WHERE cust_id = 560)\n"}]}]}]},{type:a,value:e},{type:b,tag:f,props:{},children:[{type:a,value:"采用哈希表组织100万条记录，以支持字段A快速查找，则（）\n错：上可以在常数时间内找到特定记录：不要听b树瞎bb，怎么可能\n对：式哈希曼最坏查找时间复杂度是O（n）：拉链式哈希就是通过链来解决冲突的哈希"}]},{type:a,value:e},{type:b,tag:f,props:{},children:[{type:a,value:"下列哪个是合法的 Java 标识符？（ ）\n只有英文，数字，下划线和$，而且数字不能做开头"}]},{type:a,value:e},{type:b,tag:m,props:{id:aa},children:[{type:b,tag:n,props:{ariaHidden:o,href:"#2018-8-29",tabIndex:p},children:[{type:b,tag:c,props:{className:[q,r]},children:[]}]},{type:a,value:aa}]},{type:a,value:e},{type:b,tag:f,props:{},children:[{type:a,value:"已知某个哈希表的n个关键字具有相同的哈希值，如果使用二次探测再散列法将这n个关键字存入哈希表，至少要进行____次探测。\n答案是n(n+1)\u002F2。第一个探测一次，发现没有冲突，ok。第二个第一次发现有冲突，第二次没有，ok。因此第n个要探测n次。所以1+2……n=n(n+1)\u002F2。"}]},{type:a,value:e},{type:b,tag:f,props:{},children:[{type:a,value:"若关系R的候选键都是由单属性构成的, 且每个非主属性完全函数依赖于候选键,那么R的模 式是（）\n又忘了范式的标准了\n1NF：不能有表中表；\n2NF：符合1NF，非主属性完全依赖于码（去除部分函数依赖）\n3NF：符合2NF，非主属性直接依赖于码（去除传递函数依赖）\nBCNF：符合3NF，主属性不依赖于主属性。\n虽然每个非主属性完全函数依赖于候选键，但是是完全函数依赖的同时也可能是传递函数依赖呀"}]},{type:a,value:e},{type:b,tag:f,props:{},children:[{type:a,value:"JDBC驱动程序分为几种类型？（）\n看了也不知道是啥的四种：jdba-odbc桥接、本地API驱动、网络协议驱动和本地协议驱动"}]},{type:a,value:e},{type:b,tag:f,props:{},children:[{type:a,value:"以下关于栈的说法错误的是：\n在栈空的情况下，一定不能作出栈操作，否则产生溢出：这是下溢出\n栈一定是顺序存储的线性结构：还可以是链表"}]},{type:a,value:e},{type:b,tag:m,props:{id:ab},children:[{type:b,tag:n,props:{ariaHidden:o,href:"#2018-8-28",tabIndex:p},children:[{type:b,tag:c,props:{className:[q,r]},children:[]}]},{type:a,value:ab}]},{type:a,value:e},{type:b,tag:f,props:{},children:[{type:a,value:"有ABCDEF 六个城市，每一个城市都和其他所有城市直接相连，问从A——B有多少种连接方式，路径不允许在两个城市之间往返\n想漏了，老以为会经过全部城市"}]},{type:a,value:e},{type:b,tag:z,props:{className:[A]},children:[{type:b,tag:B,props:{className:[C,N]},children:[{type:b,tag:j,props:{},children:[{type:a,value:"A-?-B:4\nA-?-?-B:4*3\nA-?-?-?-B:4*3*2\nA-?-?-?-?-B:4*3*2*1\n"}]}]}]},{type:a,value:e},{type:b,tag:f,props:{},children:[{type:a,value:"下列叙述中正确的是（ ）\n在栈中，栈顶指针的动态变化决定栈中元素的个数\n错误：\n在循环队列中，队尾指针的动态变化决定队列的长度\n栈的栈低指针不动，入栈时头指针+1。循环队列中，头尾指针共同决定长度。"}]},{type:a,value:e},{type:b,tag:f,props:{},children:[{type:a,value:"数组A[0..5,0..6]的每个元素占5个字节,将其按列优先次序存储在起始地址为1000的内存单元中,则元素A[5,5]的地址是()\n列优先，那就是一列一列数，而不是一行一行。所以是第六列，每列6个元素，在第36个元素里，所以1000+36×5=1180。但是！但是！求的是第36个元素的起始地址而不是结束地址，所以还要1180-8=1175。"}]},{type:a,value:e},{type:b,tag:f,props:{},children:[{type:a,value:"若某线性表最常用的操作是在最后一个元素之后插入一个元素和删除进入表中的最后一个元素，则采用（ 　 ）存储方式最节省运算时间和存储空间。\n答案是双向链表而不是仅有尾指针的单循环链表\n尾指针也是指向next=null，还是要遍历到最后"}]},{type:a,value:e},{type:b,tag:f,props:{},children:[{type:a,value:"Servlet的生命周期可以分为初始化阶段，运行阶段和销毁阶段三个阶段，以下过程属于初始化阶段是（）。\n加载Servlet类及.class对应的数据\n创建ServletConfig对象\n创建Servlet对象"}]},{type:a,value:e},{type:b,tag:m,props:{id:ac},children:[{type:b,tag:n,props:{ariaHidden:o,href:"#2018-8-23",tabIndex:p},children:[{type:b,tag:c,props:{className:[q,r]},children:[]}]},{type:a,value:ac}]},{type:a,value:e},{type:b,tag:f,props:{},children:[{type:a,value:"下列哪一个Transact-SQL语句能够实现收回user2查询基本表T的权限（）\n"},{type:b,tag:j,props:{},children:[{type:a,value:"REVOKE SELECT ON T FROM user2"}]},{type:a,value:"，Transact-SQL意思是那些非查询语句的意思？"},{type:b,tag:j,props:{},children:[{type:a,value:"GRANT"}]},{type:a,value:"是授权，"},{type:b,tag:j,props:{},children:[{type:a,value:"REVOKE"}]},{type:a,value:"是撤权，"},{type:b,tag:j,props:{},children:[{type:a,value:"SELECT"}]},{type:a,value:"是操作，在表"},{type:b,tag:j,props:{},children:[{type:a,value:"T"}]},{type:a,value:"对于用户"},{type:b,tag:j,props:{},children:[{type:a,value:"user2"}]}]},{type:a,value:e},{type:b,tag:f,props:{},children:[{type:a,value:"线性表是具有 n 个（）的有限序列(n\u003E0)\n线性表是由0到多个数据元素组成，数据元素由多个数据项组成"}]},{type:a,value:e},{type:b,tag:f,props:{},children:[{type:a,value:"单链表中，增加一个头结点的目的是为了 。\n答案：方便运算的实现！？！有头结点统一了空队列与非空队列的处理"}]},{type:a,value:e},{type:b,tag:f,props:{},children:[{type:a,value:"DBMS包括DBS和DB？\n数据库(DB)：长期存放在计算机内的有组织的可共享的数据集合\n数据库管理系统(DBMS)：完成数据库的建立、使用和维护功能\n数据库系统(DBS)\n数据库+数据库管理系统\n（应用系统+数据库管理员 +用户）\n数据库管理员(DBA)：除DBMS完成外，还需专门的人员来完成，这些人被称为DBA"}]},{type:a,value:e},{type:b,tag:f,props:{},children:[{type:a,value:"下列叙述中正确的是（ ）。\n错误：循环链表是循环队列的链式存储结构\n循环队列是把数组弄成一个环（？！）循环队列是改进的顺序队列"}]},{type:a,value:e},{type:b,tag:f,props:{},children:[{type:a,value:"求解最短路径的Floyd算法的时间复杂度为()\nFloyd算法的基本思想如下：从任意节点A到任意节点B的最短路径不外乎2种可能，1是直接从A到B，2是从A经过若干个节点X到B。所以，我们假设Dis(AB)为节点A到节点B的最短路径的距离，对于每一个节点X，我们检查Dis(AX) + Dis(XB) \u003C Dis(AB)是否成立，如果成立，证明从A到X再到B的路径比A直接到B的路径短，我们便设置Dis(AB) = Dis(AX) + Dis(XB)，这样一来，当我们遍历完所有节点X，Dis(AB)中记录的便是A到B的最短路径的距离。"}]},{type:a,value:e},{type:b,tag:z,props:{className:[A]},children:[{type:b,tag:B,props:{className:[C,"language-java"]},children:[{type:b,tag:j,props:{},children:[{type:b,tag:c,props:{className:[d,t]},children:[{type:a,value:D}]},{type:a,value:" n"},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:u}]},{type:b,tag:c,props:{className:[d,ad]},children:[{type:a,value:"\u002F\u002Fn为节点个数"}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,t]},children:[{type:a,value:O}]},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:E}]},{type:b,tag:c,props:{className:[d,t]},children:[{type:a,value:D}]},{type:a,value:ae},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:F}]},{type:b,tag:c,props:{className:[d,P]},children:[{type:a,value:Q}]},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:u}]},{type:a,value:ae},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:G}]},{type:a,value:R},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:u}]},{type:a,value:h},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:S}]},{type:a,value:"i "},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:H}]},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:I}]},{type:a,value:af},{type:b,tag:c,props:{className:[d,t]},children:[{type:a,value:O}]},{type:a,value:h},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:E}]},{type:b,tag:c,props:{className:[d,t]},children:[{type:a,value:D}]},{type:a,value:ag},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:F}]},{type:b,tag:c,props:{className:[d,P]},children:[{type:a,value:Q}]},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:u}]},{type:a,value:ag},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:G}]},{type:a,value:R},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:u}]},{type:a,value:h},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:S}]},{type:a,value:"j "},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:H}]},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:I}]},{type:a,value:ah},{type:b,tag:c,props:{className:[d,t]},children:[{type:a,value:O}]},{type:a,value:h},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:E}]},{type:a,value:h},{type:b,tag:c,props:{className:[d,t]},children:[{type:a,value:D}]},{type:a,value:ai},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:F}]},{type:b,tag:c,props:{className:[d,P]},children:[{type:a,value:Q}]},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:u}]},{type:a,value:ai},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:G}]},{type:a,value:R},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:u}]},{type:a,value:h},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:S}]},{type:a,value:"k "},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:H}]},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:I}]},{type:a,value:aj},{type:b,tag:c,props:{className:[d,t]},children:[{type:a,value:"if"}]},{type:a,value:h},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:E}]},{type:a,value:h},{type:b,tag:c,props:{className:[d,x]},children:[{type:a,value:y}]},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:k}]},{type:a,value:J},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:l}]},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:k}]},{type:a,value:K},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:l}]},{type:a,value:h},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:ak}]},{type:a,value:h},{type:b,tag:c,props:{className:[d,x]},children:[{type:a,value:y}]},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:k}]},{type:a,value:K},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:l}]},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:k}]},{type:a,value:L},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:l}]},{type:a,value:h},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:G}]},{type:a,value:h},{type:b,tag:c,props:{className:[d,x]},children:[{type:a,value:y}]},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:k}]},{type:a,value:J},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:l}]},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:k}]},{type:a,value:L},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:l}]},{type:a,value:h},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:H}]},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:I}]},{type:a,value:al},{type:b,tag:c,props:{className:[d,ad]},children:[{type:a,value:"\u002F\u002F 找到更短路径"}]},{type:a,value:al},{type:b,tag:c,props:{className:[d,x]},children:[{type:a,value:y}]},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:k}]},{type:a,value:J},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:l}]},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:k}]},{type:a,value:L},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:l}]},{type:a,value:h},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:F}]},{type:a,value:h},{type:b,tag:c,props:{className:[d,x]},children:[{type:a,value:y}]},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:k}]},{type:a,value:J},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:l}]},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:k}]},{type:a,value:K},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:l}]},{type:a,value:h},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:ak}]},{type:a,value:h},{type:b,tag:c,props:{className:[d,x]},children:[{type:a,value:y}]},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:k}]},{type:a,value:K},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:l}]},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:k}]},{type:a,value:L},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:l}]},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:u}]},{type:a,value:aj},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:M}]},{type:a,value:ah},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:M}]},{type:a,value:af},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:M}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:M}]},{type:a,value:e}]}]}]},{type:a,value:e},{type:b,tag:f,props:{},children:[{type:b,tag:w,props:{alt:v,"data-src":"https:\u002F\u002Foracleamd1.dynv6.net\u002Ffile\u002Ffile\u002Fblog\u002Fcode\u002F20180820\u002Fuploadfiles.nowcoder.net-images-20170329-7952866_1490786081019_BDE6A5394B17E4548EB5F4480F241B0C"},children:[]}]},{type:a,value:e},{type:b,tag:f,props:{},children:[{type:a,value:"linux提供了一种机制可以保证只要父进程想知道子进程结束时的状态信息， 就可以得到。这种机制就是: 在每个进程退出的时候,内核释放该进程所有的资源,包括打开的文件,占用的内存等。但是仍然为其保留一定的信息(包括进程号the process ID,退出状态the termination status of the process,运行时间the amount of CPU time taken by the process等)。直到父进程通过wait \u002F waitpid来取时才释放。\n孤儿进程：一个父进程退出，而它的一个或多个子进程还在运行，那么那些子进程将成为孤儿进程。孤儿进程将被init进程(进程号为1)所收养，并由init进程对它们完成状态收集工作。\n僵尸进程：一个进程使用fork创建子进程，如果子进程退出，而父进程并没有调用wait或waitpid获取子进程的状态信息，那么子进程的进程描述符仍然保存在系统中。这种进程称之为僵死进程。\n僵死进程并不是问题的根源，罪魁祸首是产生出大量僵死进程的那个父进程，所以，解决方法就是kill那个父进程，于是僵尸进程就可以被init进程接收，释放。"}]},{type:a,value:e},{type:b,tag:m,props:{id:am},children:[{type:b,tag:n,props:{ariaHidden:o,href:"#2018-8-22",tabIndex:p},children:[{type:b,tag:c,props:{className:[q,r]},children:[]}]},{type:a,value:am}]},{type:a,value:e},{type:b,tag:f,props:{},children:[{type:a,value:"表达式"},{type:b,tag:j,props:{},children:[{type:a,value:"“X=A+B*（C--D）\u002FE”"}]},{type:a,value:"的后缀表示形式可以为\n答案："},{type:b,tag:j,props:{},children:[{type:a,value:"XABCD-*E\u002F+="}]},{type:a,value:"\n一种好厉害，但还是不知道怎么做这题的方法："}]},{type:a,value:e},{type:b,tag:z,props:{className:[A]},children:[{type:b,tag:B,props:{className:[C,N]},children:[{type:b,tag:j,props:{},children:[{type:a,value:"这里我给出一个中缀表达式~ \na+b*c-(d+e) \n第一步：按照运算符的优先级对所有的运算单位加括号~ \n        式子变成拉：((a+(b*c))-(d+e)) \n第二步：转换前缀与后缀表达式 \n        前缀：把运算符号移动到对应的括号前面 \n              则变成拉：-( +(a *(bc)) +(de)) \n              把括号去掉：-+a*bc+de  前缀式子出现 \n        后缀：把运算符号移动到对应的括号后面 \n              则变成拉：((a(bc)* )+ (de)+ )- \n              把括号去掉：abc*+de+-  后缀式子出现\n"}]}]}]},{type:a,value:e},{type:b,tag:f,props:{},children:[{type:a,value:"第二种方法如图\n"},{type:b,tag:w,props:{alt:v,"data-src":"https:\u002F\u002Foracleamd1.dynv6.net\u002Ffile\u002Ffile\u002Fblog\u002Fcode\u002F20180820\u002Fuploadfiles.nowcoder.net-images-20160425-217040_1461573818032_AC5DF737CC8E1D2924BF15EC19E5A91B"},children:[]}]},{type:a,value:e},{type:b,tag:f,props:{},children:[{type:a,value:"层次模型必须满足的一个条件是（ ）。\n除了根节点，有且仅有一个结点为父结点（树来的？）"}]},{type:a,value:e},{type:b,tag:f,props:{},children:[{type:a,value:"Web程序通常采用MVC架构来设计，数据库相关操作属于（）？\n实锤，Model"}]},{type:a,value:e},{type:b,tag:f,props:{},children:[{type:a,value:"常见的数据模型是（）\n常用的数据模型：概念模型、逻辑模型、物理模型\n常用的逻辑模型：层次模型、网状模型、关系模型"}]},{type:a,value:e},{type:b,tag:f,props:{},children:[{type:a,value:"T(n)=1(n\u003C=1),T(n)=25T(n\u002F5)+n^2,T(n)复杂度是多少？\n答案O(n^2logn)。像这种题，不会算就代特殊值，例如5（并不特殊。。。）"}]},{type:a,value:e},{type:b,tag:m,props:{id:an},children:[{type:b,tag:n,props:{ariaHidden:o,href:"#2018-8-21",tabIndex:p},children:[{type:b,tag:c,props:{className:[q,r]},children:[]}]},{type:a,value:an}]},{type:a,value:e},{type:b,tag:f,props:{},children:[{type:a,value:"以下哪个算法可以判断出一个有向图中是否有回路\n拓扑排序：由于拓扑排序要求图无回路，看图好像就是一路走下去遍历全部节点一样"}]},{type:a,value:e},{type:b,tag:f,props:{},children:[{type:a,value:"反映现实世界中实体及实体间联系的信息模型是\nE—R模型，而不是关系模型。关系模型与层次模型、网状模型相对应"}]},{type:a,value:e},{type:b,tag:f,props:{},children:[{type:a,value:"关系中行、列次序的交换性质是\n行、列均可交换（怕什么呢？为什么我无端端记得有一个不能调换，其实并不是）"}]},{type:a,value:e},{type:b,tag:f,props:{},children:[{type:a,value:"ICMP协议位于\n物理层：RJ45、CLOCK、IEEE802.3（中继器、集线器）\n数据链路层：PPP 、FP 、HDIC、 VLAN 、MAC（网桥、交换机）\n网络层：IP、ICMP、ARP、RARP、OSPF、 IPX 、RIP 、IGRP（路由器）\n传输层：TCP 、UDP 、SPX\n会话层：NFS、SQL 、 NETBIOS 、RPC\n表示层：JPEG 、MPEG、 ASII\n应用层：FTP、 DNS 、Telnet、 SMTP 、HTTP、 WWW、 NFS"}]},{type:a,value:e},{type:b,tag:f,props:{},children:[{type:a,value:"子模式DDL用来描述\n外模式（子模式）：用户能看到处理的数据结构\n概念模式（模式）：处理全局的数据结构，包括数据之间的约束、联系\n内模式：描述储存上的数据结构"}]},{type:a,value:e},{type:b,tag:f,props:{},children:[{type:a,value:"由权值为29,12,15,6,23的五个叶子节点构造的哈夫曼树为,其带权路径长度为\n哈夫曼树的带权路径长度的计算方法是，累加全部节点的-节点值×（当前层数-1）\n"},{type:b,tag:w,props:{alt:v,"data-src":"https:\u002F\u002Foracleamd1.dynv6.net\u002Ffile\u002Ffile\u002Fblog\u002Fcode\u002F20180820\u002Fuploadfiles.nowcoder.net-images-20151102-437950_1446469719551_EA01AD55AB9CF5FE6D2E9197C5084F99"},children:[]}]},{type:a,value:e},{type:b,tag:f,props:{},children:[{type:a,value:"当建立连接时，下面哪一个数据包发送顺序是正确的TCP握手协议过程\nSYN、SYN+ACK、ACK"}]},{type:a,value:e},{type:b,tag:m,props:{id:ao},children:[{type:b,tag:n,props:{ariaHidden:o,href:"#2018-8-20",tabIndex:p},children:[{type:b,tag:c,props:{className:[q,r]},children:[]}]},{type:a,value:ao}]},{type:a,value:e},{type:b,tag:f,props:{},children:[{type:a,value:"关于因特网中路由器和广域网中结点交换机叙述错误的是\n对的：\n路由器用来互连不同的网络（不同网段？），结点交换机只是在一个特定的网络中工作（同网段？）。\n路由器专门用来转发分组，结点交换机还可以连接上许多主机。\n路由器根据目的网络地址找出下一跳（即下一个路由器），而结点交换机则根据目的站所接入的交换机号找出下一跳（即下一个结点交换机）。\n错的：\n路由器和结点交换机都使用统一的IP协议。\n路由器在网络层，网络层最重要但不唯一是ip协议。交换机在数据链路层，使用以太网协议"}]},{type:a,value:e},{type:b,tag:f,props:{},children:[{type:a,value:"ARP协议是ip映射到MAC，RARP是MAC映射到ip"}]},{type:a,value:e},{type:b,tag:f,props:{},children:[{type:a,value:"若事务T对数据R已加X锁，则其它事务对R\nS锁是共享锁，X锁是独占锁"}]},{type:a,value:e},{type:b,tag:f,props:{},children:[{type:a,value:"表的设计视图方式中，不可以（）。\n既然是叫"},{type:b,tag:"strong",props:{},children:[{type:a,value:"设计"}]},{type:a,value:"的视图，那对字段的增删改都可以，而删除一条记录则不行"}]},{type:a,value:e},{type:b,tag:f,props:{},children:[{type:a,value:"vi编辑文件时，要将某文本文件第1行到5行的内容复制到文件中的指定位置\n将光标移到第1行，在vi命令模式下输入5yy,然后将光标移到制定位置，按p键\n使用末行命令1，5y，然后将光标移到制定位置，按p键"}]},{type:a,value:e},{type:b,tag:f,props:{},children:[{type:a,value:"在linux网络编程中,以下关于socket描述符正确的是:\n对的：\nsocket存在两种模式:阻塞和非阻塞\n系统调用read从socket中读取数据时,当read返回0的时候,表示socket中数据读取完毕\n如果socket设置成非阻塞模式,当socket的输入缓冲区没有可读数据时,read操作会返回错误\n错的：\n在阻塞socket上调用write函数发送数据,函数返回时,表示数据已经发送出去"}]}]},excerpt:{type:Y,children:[]},dir:ap,path:"\u002F其他\u002F20180820\u002F做题笔记",extension:".md",title:W,url:"\u002Fblog-code\u002Fview\u002F其他\u002F20180820\u002F做题笔记\u002F",createAt:new Date(1534723200000),updateAt:new Date(1534723200000),attributes:[{name:"createAt",value:aq},{name:"updateAt",value:aq},{name:"sort",value:ap,url:"\u002Fblog-code\u002Fpage\u002F其他\u002F20180820\u002F1\u002F"}]}}],fetch:{},mutations:void 0}}("text","element","span","token","\n","p","punctuation"," ","operator","code","[","]","h1","a","true",-1,"icon","icon-link","wide","keyword",";","","img","class-name","Dis","div","nuxt-content-highlight","pre","line-numbers","int","(","=","\u003C",")","{","i","k","j","}","language-text","for","number","0","n","++","无名の窝",10000,"青春猪头-牧之原翔子-江之岛","做题笔记","2018-08-20T00:00:00.000Z","root","2018-9-5","2018-9-4","2018-8-30","2018-8-29","2018-8-28","2018-8-23","comment"," i","\n    "," j","\n        "," k","\n            ","+","\n                ","2018-8-22","2018-8-21","2018-8-20","\u002F其他\u002F20180820","2018-08-20")));