__NUXT_JSONP__("/view/%E4%B8%AD%E9%97%B4%E4%BB%B6/20200601/MQ%E6%80%BB%E7%BB%93", (function(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,A,B,C,D,E,F,G){return {data:[{siteConfig:{siteName:s,siteHost:"https:\u002F\u002Fcellargalaxy.github.io",basePath:"\u002Fblog-code\u002F",navs:[{text:"文章",url:"\u002Fblog-code\u002Fpage\u002F1\u002F"},{text:"归档",url:"\u002Fblog-code\u002Farchive\u002F0\u002F"},{text:"画画",url:"\u002Fblog-code\u002Fhtml\u002Fhua.html"},{text:"开源",url:"\u002Fblog-code\u002Fhttps:\u002Fgithub.com\u002Fcellargalaxy\u002Fblog-vue"}],pageSize:10,urlReplace:{"^/file/blog/code":"https:\u002F\u002Foracleamd1.dynv6.net\u002Ffile\u002Ffile\u002Fblog\u002Fcode"},backgroundImage:{duration:t,fade:1000,images:[{url:"https:\u002F\u002Fi.loli.net\u002F2020\u002F01\u002F25\u002FcofTzDQXitjeVZ6.jpg",description:u,type:l},{url:"https:\u002F\u002Fi.loli.net\u002F2020\u002F01\u002F25\u002FsfaRJ2lVeM3NDbE.jpg",description:u,type:l},{url:"https:\u002F\u002Fi.loli.net\u002F2020\u002F01\u002F26\u002FKybiTdftam5Su7x.jpg",description:"青春猪头-双葉理央",type:l},{url:"https:\u002F\u002Fi.loli.net\u002F2020\u002F09\u002F08\u002FxdX73nfs24qgOYk.jpg",description:"京吹-明日香,久美子",type:l},{url:"https:\u002F\u002Fi.loli.net\u002F2020\u002F02\u002F14\u002FMAiruNcEFW2HYtg.jpg",description:"终将成为你-七海灯子,小糸侑",type:l},{url:"https:\u002F\u002Fi.loli.net\u002F2020\u002F02\u002F05\u002FEojdAxTDJsFpbPw.jpg",description:"玉子市场-北白川玉子",type:l},{url:"https:\u002F\u002Fi.loli.net\u002F2020\u002F01\u002F31\u002FAXxwJDRS9fmN2uU.jpg",description:"fate_hf-弓道馆",type:l},{url:"https:\u002F\u002Fi.loli.net\u002F2020\u002F02\u002F01\u002FaHhVObpJus6dnM4.jpg",description:"fate_hf-樱花树",type:l}]}},homeConfig:{brandInterval:t,brands:[{imageUrl:"https:\u002F\u002Fi.loli.net\u002F2020\u002F01\u002F21\u002FmMEAnwY5XPC2pFb.jpg",title:"日常",texts:["我们所度过的每个平凡的日常，也许就是连续不断发生的奇迹。","日々、私たちが過ごしている日常は、実は奇跡の連続なのかもしれない。"]},{imageUrl:"https:\u002F\u002Fi.loli.net\u002F2020\u002F04\u002F19\u002FH1MmXb9xPcYEhT2.jpg",title:"昨日之歌",texts:["时间梭梭箭如飞，人道漫漫步蹒跚","人間そんな変わるもんじゃないのに、月日ばっかどんどん過ぎて"]}],navs:[{text:"Github",url:"https:\u002F\u002Fgithub.com\u002Fcellargalaxy\u002F"}]},pageFootConfig:{lines:[[{text:"Copyright © 2017-? ."},{text:"备案？不存在的"},{text:"Powered by Nuxt.js & Github"}]]},buildTime:new Date(1659171920704),siteName:s,file:{slug:v,description:"",createdAt:w,updatedAt:w,toc:[{id:o,depth:q,text:o},{id:x,depth:q,text:y},{id:p,depth:q,text:p}],body:{type:z,children:[{type:a,value:c},{type:b,tag:m,props:{id:"mq的作用"},children:[{type:b,tag:e,props:{href:"#mq%E7%9A%84%E4%BD%9C%E7%94%A8",ariaHidden:f,tabIndex:g},children:[{type:b,tag:h,props:{className:[i,j]},children:[]}]},{type:a,value:"MQ的作用"}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"削峰：顾名思义+允许异步"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"解耦：要给多服务调接口，对接麻烦"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"异步：要调多服务接口（超时）"}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:m,props:{id:"kafka高可用性"},children:[{type:b,tag:e,props:{href:"#kafka%E9%AB%98%E5%8F%AF%E7%94%A8%E6%80%A7",ariaHidden:f,tabIndex:g},children:[{type:b,tag:h,props:{className:[i,j]},children:[]}]},{type:a,value:"Kafka高可用性"}]},{type:a,value:c},{type:b,tag:n,props:{},children:[{type:a,value:"Kafka部署多个节点来支持高可用。每个主题有多个分区，分区下面又有一个leader副本和多个follow副本。\n读写都在leader副本里，follow副本往leader副本同步数据。\nkafka会将leader副本均匀分布在各个节点上，如果leader副本挂了，会在follow副本中选举一个新的leader副本。"}]},{type:a,value:c},{type:b,tag:m,props:{id:"kafka重复消费"},children:[{type:b,tag:e,props:{href:"#kafka%E9%87%8D%E5%A4%8D%E6%B6%88%E8%B4%B9",ariaHidden:f,tabIndex:g},children:[{type:b,tag:h,props:{className:[i,j]},children:[]}]},{type:a,value:"Kafka重复消费"}]},{type:a,value:c},{type:b,tag:n,props:{},children:[{type:a,value:"kafka保证每个分区的的消息是顺序的，并且会给消息一个offset。\n默认消费端每隔一段时间会给kafka上报自己拉到最新的offset，那kafka重启之后就会在offset开始继续消费。\n但是否要取消自动上报offset改为自己上报offset要看业务，如果每消费一条就上报一次，效率可能太低。"}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"生产一个唯一id，在消费的时候redis查一下消费过没"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"数据库弄个唯一索引"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"弄成重复消费也不要紧（幂等性）"}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:m,props:{id:"kafka丢数据与顺序性"},children:[{type:b,tag:e,props:{href:"#kafka%E4%B8%A2%E6%95%B0%E6%8D%AE%E4%B8%8E%E9%A1%BA%E5%BA%8F%E6%80%A7",ariaHidden:f,tabIndex:g},children:[{type:b,tag:h,props:{className:[i,j]},children:[]}]},{type:a,value:"Kafka丢数据与顺序性"}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"消费端弄丢了数据：消费端拉到了数据，然后就上报了offset，然而还没消费就挂掉了。\n最好保证幂等性，消费一批后才手动提交offset。"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Kafka弄丢了数据：leader副本接收了数据，生产端收到了确认，还没follow副本pull，leader就挂了。\n修改配置，要求数据写入所有follow副本之后，才能认为是写成功了。"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"保证消息的顺序性：每个需要顺序执行队列分到一个分区里，每个分区只用一个消费者消费"}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:m,props:{id:"kafka的消息语义"},children:[{type:b,tag:e,props:{href:"#kafka%E7%9A%84%E6%B6%88%E6%81%AF%E8%AF%AD%E4%B9%89",ariaHidden:f,tabIndex:g},children:[{type:b,tag:h,props:{className:[i,j]},children:[]}]},{type:a,value:"Kafka的消息语义"}]},{type:a,value:c},{type:b,tag:n,props:{},children:[{type:a,value:"在消息投递与消费的常见语义有三种。而要完整实现某种语义，需要在生产端，Kafka端和消费端进行保证。"}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"至少一次：消息不会丢，但可能重复"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"最多一次：消息可能会丢，但不会重复"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"精确一次：消息即不丢也不重复"}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:r,props:{id:o},children:[{type:b,tag:e,props:{href:"#%E7%94%9F%E4%BA%A7%E7%AB%AF",ariaHidden:f,tabIndex:g},children:[{type:b,tag:h,props:{className:[i,j]},children:[]}]},{type:a,value:o}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"至少一次：（默认）当网络问题导致没有收到提交确认，在旧版本生产端会进行重试"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"最多一次：取消生产端的重试机制"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"精确一次：在新版本的生产端，Kafka端会给每个生产端一个ID，并且通过消息ID进行去除。即便重复提交消息也只会有一条消息。"}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:r,props:{id:x},children:[{type:b,tag:e,props:{href:"#kafka%E7%AB%AF",ariaHidden:f,tabIndex:g},children:[{type:b,tag:h,props:{className:[i,j]},children:[]}]},{type:a,value:y}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"至少一次：不晓得"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"最多一次：生产端不等待确认消息或者只等待主副本确认消息"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"精确一次：生产端等待主副本和全部从副本确认消息"}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:r,props:{id:p},children:[{type:b,tag:e,props:{href:"#%E6%B6%88%E8%B4%B9%E7%AB%AF",ariaHidden:f,tabIndex:g},children:[{type:b,tag:h,props:{className:[i,j]},children:[]}]},{type:a,value:p}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"至少一次：先处理消息，再提交偏移量"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"最多一次：先提交偏移量，再处理消息"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"精确一次：\n"},{type:b,tag:k,props:{},children:[{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"处理结果与偏移量通过事务一起存储\n"},{type:b,tag:k,props:{},children:[{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"在数据库里利用事务"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"在kafka里，偏移量是保存在一个主题里的，kafka支持往不同主题提交消息作为一个事务"}]},{type:a,value:c}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"不一起存储则需要用分布式事务"}]},{type:a,value:c}]},{type:a,value:c}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:n,props:{},children:[{type:a,value:"kafka的事务的隔离级别有两种，读未提交和读已提交，可以分别用在最多一次和至少一次上。"}]},{type:a,value:c},{type:b,tag:m,props:{id:A},children:[{type:b,tag:e,props:{href:"#%E6%B6%88%E8%B4%B9%E7%A7%AF%E5%8E%8B",ariaHidden:f,tabIndex:g},children:[{type:b,tag:h,props:{className:[i,j]},children:[]}]},{type:a,value:A}]},{type:a,value:c},{type:b,tag:"ol",props:{},children:[{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"修复消费慢问题"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"建一个新的主题，分区是原来十倍"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"用个临时程序把积压的数据搬到新主题里"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"起十倍消费者消费新主题数据"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"恢复原来结构"}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:m,props:{id:"sqs"},children:[{type:b,tag:e,props:{href:"#sqs",ariaHidden:f,tabIndex:g},children:[{type:b,tag:h,props:{className:[i,j]},children:[]}]},{type:a,value:"SQS"}]},{type:a,value:c},{type:b,tag:n,props:{},children:[{type:a,value:"SQS没有分区的概念，提供两种队列，标准队列和先进先出队列。\n标准队列提供无上限的吞吐，但是不保证（但基本上）顺序。\n先进先出队列保证顺序，但吞吐限三千。\nSQS对消息提供了一个可见性超时，当客户端拉取消息后，在这段时间内客户端无法拉取此消息，超时后客户端可以重新拉取此消息。\n所以客户端消费完消息后需要向SQS提交删除消息。如果时间短了可能导致重复消费，时间长了需要更长时间才能重新消费失败信息。"}]},{type:a,value:c},{type:b,tag:m,props:{id:"sqs源码"},children:[{type:b,tag:e,props:{href:"#sqs%E6%BA%90%E7%A0%81",ariaHidden:f,tabIndex:g},children:[{type:b,tag:h,props:{className:[i,j]},children:[]}]},{type:a,value:"SQS源码"}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"链接工厂-\u003E链接-\u003E会话-\u003E队列-\u003E消费者-\u003E处理回调"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"消费者-\u003EnewSingleThreadExecutor-\u003E消息拉取-\u003E\n消息+处理回调=封装成一个对象，放在回调队列里-\u003E"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"会话-\u003EnewSingleThreadExecutor-\u003E回调队列"}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:n,props:{},children:[{type:a,value:"参考文章："}]},{type:a,value:c},{type:b,tag:n,props:{},children:[{type:b,tag:e,props:{href:"http:\u002F\u002Fcxy7.com\u002Farticles\u002F2018\u002F06\u002F12\u002F1528812656788.html",rel:[B,C,D],target:E},children:[{type:a,value:"Kafka中的消息传递保证语义"}]}]},{type:a,value:c},{type:b,tag:n,props:{},children:[{type:b,tag:e,props:{href:"http:\u002F\u002Fsongkun.me\u002F2019\u002F03\u002F03\u002F2019-03-03-kafka-message-delivery-semantics-and-impl\u002F",rel:[B,C,D],target:E},children:[{type:a,value:"Kafka 消息语义"}]}]}]},excerpt:{type:z,children:[]},dir:F,path:"\u002F中间件\u002F20200601\u002FMQ总结",extension:".md",title:v,url:"\u002Fblog-code\u002Fview\u002F中间件\u002F20200601\u002FMQ总结\u002F",createAt:new Date(1590969600000),updateAt:new Date(1590969600000),attributes:[{name:"createAt",value:G},{name:"updateAt",value:G},{name:"sort",value:F,url:"\u002Fblog-code\u002Fpage\u002F中间件\u002F20200601\u002F1\u002F"}]}}],fetch:{},mutations:void 0}}("text","element","\n","li","a","true",-1,"span","icon","icon-link","ul","wide","h1","p","生产端","消费端",2,"h2","无名の窝",10000,"青春猪头-牧之原翔子-江之岛","MQ总结","2020-06-01T00:00:00.000Z","kafka端","Kafka端","root","消费积压","nofollow","noopener","noreferrer","_blank","\u002F中间件\u002F20200601","2020-06-01")));