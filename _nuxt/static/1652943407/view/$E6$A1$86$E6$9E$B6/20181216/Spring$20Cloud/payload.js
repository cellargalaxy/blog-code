__NUXT_JSONP__("/view/$E6$A1$86$E6$9E$B6/20181216/Spring$20Cloud", (function(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,A,B,C,D,E,F){return {data:[{siteConfig:{siteName:o,siteHost:"https:\u002F\u002Fcellargalaxy.github.io",basePath:"\u002Fblog-code\u002F",navs:[{text:"文章",url:"\u002Fblog-code\u002Fpage\u002F1\u002F"},{text:"归档",url:"\u002Fblog-code\u002Farchive\u002F0\u002F"},{text:"画画",url:"\u002Fblog-code\u002Fhtml\u002Fhua.html"},{text:"开源",url:"\u002Fblog-code\u002Fhttps:\u002Fgithub.com\u002Fcellargalaxy\u002Fblog-vue"}],pageSize:10,urlReplace:{"^/file/blog/code":"http:\u002F\u002F123.207.79.108\u002Ffile\u002Ffile\u002Fblog\u002Fcode"},backgroundImage:{duration:p,fade:1000,images:[{url:"https:\u002F\u002Fi.loli.net\u002F2020\u002F01\u002F25\u002FcofTzDQXitjeVZ6.jpg",description:q,type:g},{url:"https:\u002F\u002Fi.loli.net\u002F2020\u002F01\u002F25\u002FsfaRJ2lVeM3NDbE.jpg",description:q,type:g},{url:"https:\u002F\u002Fi.loli.net\u002F2020\u002F01\u002F26\u002FKybiTdftam5Su7x.jpg",description:"青春猪头-双葉理央",type:g},{url:"https:\u002F\u002Fi.loli.net\u002F2020\u002F09\u002F08\u002FxdX73nfs24qgOYk.jpg",description:"京吹-明日香,久美子",type:g},{url:"https:\u002F\u002Fi.loli.net\u002F2020\u002F02\u002F14\u002FMAiruNcEFW2HYtg.jpg",description:"终将成为你-七海灯子,小糸侑",type:g},{url:"https:\u002F\u002Fi.loli.net\u002F2020\u002F02\u002F05\u002FEojdAxTDJsFpbPw.jpg",description:"玉子市场-北白川玉子",type:g},{url:"https:\u002F\u002Fi.loli.net\u002F2020\u002F01\u002F31\u002FAXxwJDRS9fmN2uU.jpg",description:"fate_hf-弓道馆",type:g},{url:"https:\u002F\u002Fi.loli.net\u002F2020\u002F02\u002F01\u002FaHhVObpJus6dnM4.jpg",description:"fate_hf-樱花树",type:g}]}},homeConfig:{brandInterval:p,brands:[{imageUrl:"https:\u002F\u002Fi.loli.net\u002F2020\u002F01\u002F21\u002FmMEAnwY5XPC2pFb.jpg",title:"日常",texts:["我们所度过的每个平凡的日常，也许就是连续不断发生的奇迹。","日々、私たちが過ごしている日常は、実は奇跡の連続なのかもしれない。"]},{imageUrl:"https:\u002F\u002Fi.loli.net\u002F2020\u002F04\u002F19\u002FH1MmXb9xPcYEhT2.jpg",title:"昨日之歌",texts:["时间梭梭箭如飞，人道漫漫步蹒跚","人間そんな変わるもんじゃないのに、月日ばっかどんどん過ぎて"]}],navs:[{text:"Github",url:"https:\u002F\u002Fgithub.com\u002Fcellargalaxy\u002F"}]},pageFootConfig:{lines:[[{text:"Copyright © 2017-? ."},{text:"备案？不存在的"},{text:"Powered by Nuxt.js & Github"}]]},buildTime:new Date(1652943415761),siteName:o,file:{slug:r,description:"最近终于终于啃完翟永超的《Spring Cloud微服务实战》。看完之后，对于这些牛逼的东西，我只能说我终于知道Spring Cloud是想干嘛了（叹气。jpg）。对此总结一下。\n实施Spring Cloud，即想通过把原本单独的大系统，拆分为多个的微服务，以达到系统解耦的目的。但为了依旧提供完整的服务，各个微服务仍然存在着业务依赖。而这些业务依赖则通过rpc等方式进行调用。因此微服务里存在着两个根本角色：服务提供者和服务消费者。当然，对于某一个微服务而言，他自己可以既是服务提供者也是服务消费者，因为他即为其他微服务提供服务，也使用其他微服务的服务。然而这么做问题会出现一大堆，Spring Cloud就是为了解决这些问题而开发或者封装其他工具诞生的。这里先罗列几个这些问题：\n\n作为服务消费者，怎么知道服务提供者在哪\n作为服务消费者，怎样调用服务提供者的服务\n作为服务消费者，万一服务提供者挂了该怎么办。不可能晾着其他请求一直等这位服务提供者恢复吧！？\n拆分后，微服务数量众多，又各自为政。接口自行变更，管理混乱，怎么办？\n拆分后，微服务数量众多，又各自为政。微服务之间怎样互通消息？\n拆分后，微服务数量众多，又各自为政。如果要修改配置，岂不是要一改就要改好几十甚至上百台机？\n",createdAt:s,updatedAt:s,toc:[],body:{type:t,children:[{type:b,tag:d,props:{},children:[{type:a,value:u}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:v}]},{type:a,value:c},{type:b,tag:w,props:{},children:[{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:x}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:y}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:z}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:A}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:B}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:C}]},{type:a,value:c}]},{type:a,value:c},{type:a,value:c},{type:b,tag:i,props:{id:"注册中心知道服务提供者在哪"},children:[{type:b,tag:h,props:{href:"#%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%E7%9F%A5%E9%81%93%E6%9C%8D%E5%8A%A1%E6%8F%90%E4%BE%9B%E8%80%85%E5%9C%A8%E5%93%AA",ariaHidden:j,tabIndex:k},children:[{type:b,tag:l,props:{className:[m,n]},children:[]}]},{type:a,value:"注册中心：知道服务提供者在哪"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"每一个微服务提供一种服务，为了知道我需要的微服务往哪里调用，Spring Cloud引入了一个注册中心，让各个微服务把自己提供的服务名称在注册中心里登记。这样子，服务消费者只需要往注册中心里查询所需要的服务名称，注册中心就会返回提供写个服务的微服务的网络地址。其中Netflix爸爸的"},{type:b,tag:f,props:{},children:[{type:a,value:"Eureka"}]},{type:a,value:"实现了注册中心的功能，Spring Cloud对Eureka进行了封装，成为了Spring Cloud Eureka组件。为了注册中心自身的高可用，注册中心往往也会启动几个，注册中心可以把自己组成到注册中心里，这样其他注册中心就会直到自己也是注册中心了。"}]},{type:a,value:c},{type:b,tag:i,props:{id:"客户端均衡负载与声明式服务调用调用服务提供者的服务"},children:[{type:b,tag:h,props:{href:"#%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%9D%87%E8%A1%A1%E8%B4%9F%E8%BD%BD%E4%B8%8E%E5%A3%B0%E6%98%8E%E5%BC%8F%E6%9C%8D%E5%8A%A1%E8%B0%83%E7%94%A8%E8%B0%83%E7%94%A8%E6%9C%8D%E5%8A%A1%E6%8F%90%E4%BE%9B%E8%80%85%E7%9A%84%E6%9C%8D%E5%8A%A1",ariaHidden:j,tabIndex:k},children:[{type:b,tag:l,props:{className:[m,n]},children:[]}]},{type:a,value:"客户端均衡负载与声明式服务调用：调用服务提供者的服务"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"服务消费者调用服务的基础版本是通过Spring Cloud封装好的"},{type:b,tag:f,props:{},children:[{type:a,value:"RestTempla"}]},{type:a,value:"对象。除了入参以外，指定服务的url的主机地址被替换为服务名，即"},{type:b,tag:f,props:{},children:[{type:a,value:"http:\u002F\u002F服务名\u002Fpath"}]},{type:a,value:"，来与具体的服务提供者解耦，具体有那些服务提供者需要到注册中心查询。提供同样服务的服务提供者有多个，需要在这些服务提供者之间均衡负载。又是Netflix爸爸的"},{type:b,tag:f,props:{},children:[{type:a,value:"Ribbon"}]},{type:a,value:"实现了服务消费者调用和均衡负载的功能。我们能直接使用Spring Cloud封装好的Ribbon，但是太麻烦了。所以不知道谁开源出来的"},{type:b,tag:f,props:{},children:[{type:a,value:"Feign"}]},{type:a,value:"，又在Ribbon的基础上进行了封装，使得我们只需要声明一个接口，写好接口里的方法，与服务提供者提供的服务对应。Feign就会帮我们实现这个接口，就能注入调用。就像mybatis一样。"}]},{type:a,value:c},{type:b,tag:i,props:{id:"熔断器解决服务提供者挂了"},children:[{type:b,tag:h,props:{href:"#%E7%86%94%E6%96%AD%E5%99%A8%E8%A7%A3%E5%86%B3%E6%9C%8D%E5%8A%A1%E6%8F%90%E4%BE%9B%E8%80%85%E6%8C%82%E4%BA%86",ariaHidden:j,tabIndex:k},children:[{type:b,tag:l,props:{className:[m,n]},children:[]}]},{type:a,value:"熔断器：解决服务提供者挂了"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"拆分为微服务后，可能会出现B依赖于A，C依赖于A，D依赖于A等等。一旦A挂了，如果BCD都无休止等待A的响应，那可以说整个系统都蹦了。但是如果只是简单报个错，又会影响用户体验。所以熔断器会监控统计服务提供者的监控情况，并设定服务调用的超时时间。一旦服务调用超时，熔断器允许我们指定一个备用的方法以调用，起码有点东西返回，说句我报错了也好。这种调用备用方法的叫做"},{type:b,tag:f,props:{},children:[{type:a,value:"服务降级"}]},{type:a,value:"。又是Netflix爸爸的"},{type:b,tag:f,props:{},children:[{type:a,value:"Hystrix"}]},{type:a,value:"实现了熔断器的功能，经过Spring Cloud封装为Spring Cloud Hystrix组件。在Hystrix的实现中，Hystrix会为每个服务配一个线程池来调用服务。这是为了其中一个服务炸了，不会阻塞掉全部的线程而影响到其他正常服务的调用。"}]},{type:a,value:c},{type:b,tag:i,props:{id:"api网关统一管理接口"},children:[{type:b,tag:h,props:{href:"#api%E7%BD%91%E5%85%B3%E7%BB%9F%E4%B8%80%E7%AE%A1%E7%90%86%E6%8E%A5%E5%8F%A3",ariaHidden:j,tabIndex:k},children:[{type:b,tag:l,props:{className:[m,n]},children:[]}]},{type:a,value:"API网关：统一管理接口"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"API网关除了重新配置接口实现路由以外，还会进行均衡负载。一般调用服务需要一定的权限，但是如果每个微服务都进行权限校验就混乱复杂了。所以API网关需要做权限校验的功能。所以感觉API网关有点像一个增强版的Nginx，能够让运维跟简单维护数量众多的微服务之间的路由与权限。没错，又是Netflix爸爸的"},{type:b,tag:f,props:{},children:[{type:a,value:"Zuul"}]},{type:a,value:"实现了API网关。"}]},{type:a,value:c},{type:b,tag:i,props:{id:"消息总线微服务之间互通消息"},children:[{type:b,tag:h,props:{href:"#%E6%B6%88%E6%81%AF%E6%80%BB%E7%BA%BF%E5%BE%AE%E6%9C%8D%E5%8A%A1%E4%B9%8B%E9%97%B4%E4%BA%92%E9%80%9A%E6%B6%88%E6%81%AF",ariaHidden:j,tabIndex:k},children:[{type:b,tag:l,props:{className:[m,n]},children:[]}]},{type:a,value:"消息总线：微服务之间互通消息"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"微服务独立开发，独立部署，所以互通消息就比较麻烦。目前我消息总线还不是很理解，感觉跟之后说的消息驱动或者zookeeper有点模糊。但跟在面的配置中心结合使用有点像对全部或者指定的微服务进行广播消息的功能。而有两个软件（需要独立安装或者启动）："},{type:b,tag:f,props:{},children:[{type:a,value:"RabbitMQ"}]},{type:a,value:"和Apache的"},{type:b,tag:f,props:{},children:[{type:a,value:"Kafka"}]},{type:a,value:"都实现了消息总线的功能，并被Spring Cloud封装的好好的。"}]},{type:a,value:c},{type:b,tag:i,props:{id:"配置中心统一管理配置"},children:[{type:b,tag:h,props:{href:"#%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83%E7%BB%9F%E4%B8%80%E7%AE%A1%E7%90%86%E9%85%8D%E7%BD%AE",ariaHidden:j,tabIndex:k},children:[{type:b,tag:l,props:{className:[m,n]},children:[]}]},{type:a,value:"配置中心：统一管理配置"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"如上问题所说，为了解决几十上百台机的配置，其实最好就是设定一个配置中心，把配置都放在配置中心统一管理。微服务启动的时候，往配置中心自己拿配置。并且结合git或者SVN，云一份，配置中心本地一份，哪怕云挂了也有本地的旧配置可以返回。配置中心好像是Spring Cloud自己实现的Spring Cloud Config组件。这里还有个问题，例如git上配置文件改了，但是这么多微服务并不知道配置更新了。所以可以结合消息总线。大约的逻辑是：先更新了git的配置，通过配置中心暴露的接口通知配置中心git上的配置更新了，然后配置中心会让消息总线通知相应的微服务来拿最新的配置，消息总线通知了相应的微服务，微服务各自到配置总线那最新的配置，全部微服务的配置更新完毕。"}]},{type:a,value:c},{type:b,tag:i,props:{id:D},children:[{type:b,tag:h,props:{href:"#%E5%85%B6%E4%BB%96",ariaHidden:j,tabIndex:k},children:[{type:b,tag:l,props:{className:[m,n]},children:[]}]},{type:a,value:D}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"消息驱动（理解是微服务之间的生产消费异步队列），好像是Spring Cloud自己实现的Spring Cloud Stream组件。"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"服务跟踪（用于跟踪记录统计各个微服务之间调用的时间之类的），好像是Spring Cloud自己实现的Spring Cloud Sleuth组件，貌似还能跟其他一些不知道什么鬼的软件配合使用。"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"参考文章："}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Spring Cloud微服务实战（翟永超）"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:b,tag:h,props:{href:"http:\u002F\u002Fwww.ityouknow.com\u002Fspringcloud\u002F2017\u002F05\u002F01\u002Fsimple-springcloud.html",rel:["nofollow","noopener","noreferrer"],target:"_blank"},children:[{type:a,value:"springcloud(一)：大话Spring Cloud"}]}]}]},excerpt:{type:t,children:[{type:b,tag:d,props:{},children:[{type:a,value:u}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:v}]},{type:a,value:c},{type:b,tag:w,props:{},children:[{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:x}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:y}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:z}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:A}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:B}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:C}]},{type:a,value:c}]}]},dir:E,path:"\u002F框架\u002F20181216\u002FSpring Cloud",extension:".md",title:r,url:"\u002Fblog-code\u002Fview\u002F$E6$A1$86$E6$9E$B6\u002F20181216\u002FSpring$20Cloud\u002F",createAt:new Date(1544918400000),updateAt:new Date(1544918400000),attributes:[{name:"createAt",value:F},{name:"updateAt",value:F},{name:"sort",value:E,url:"\u002Fblog-code\u002Fpage\u002F$E6$A1$86$E6$9E$B6\u002F20181216\u002F1\u002F"}]}}],fetch:{},mutations:void 0}}("text","element","\n","p","li","code","wide","a","h1","true",-1,"span","icon","icon-link","无名の窝",10000,"青春猪头-牧之原翔子-江之岛","Spring Cloud","2018-12-16T00:00:00.000Z","root","最近终于终于啃完翟永超的《Spring Cloud微服务实战》。看完之后，对于这些牛逼的东西，我只能说我终于知道Spring Cloud是想干嘛了（叹气。jpg）。对此总结一下。","实施Spring Cloud，即想通过把原本单独的大系统，拆分为多个的微服务，以达到系统解耦的目的。但为了依旧提供完整的服务，各个微服务仍然存在着业务依赖。而这些业务依赖则通过rpc等方式进行调用。因此微服务里存在着两个根本角色：服务提供者和服务消费者。当然，对于某一个微服务而言，他自己可以既是服务提供者也是服务消费者，因为他即为其他微服务提供服务，也使用其他微服务的服务。然而这么做问题会出现一大堆，Spring Cloud就是为了解决这些问题而开发或者封装其他工具诞生的。这里先罗列几个这些问题：","ol","作为服务消费者，怎么知道服务提供者在哪","作为服务消费者，怎样调用服务提供者的服务","作为服务消费者，万一服务提供者挂了该怎么办。不可能晾着其他请求一直等这位服务提供者恢复吧！？","拆分后，微服务数量众多，又各自为政。接口自行变更，管理混乱，怎么办？","拆分后，微服务数量众多，又各自为政。微服务之间怎样互通消息？","拆分后，微服务数量众多，又各自为政。如果要修改配置，岂不是要一改就要改好几十甚至上百台机？","其他","\u002F框架\u002F20181216","2018-12-16")));