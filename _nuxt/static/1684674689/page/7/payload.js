__NUXT_JSONP__("/page/7", (function(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,_,$,aa,ab,ac,ad,ae,af,ag,ah,ai,aj,ak,al,am,an,ao,ap,aq,ar,as,at,au,av,aw,ax,ay,az,aA,aB,aC,aD,aE,aF,aG,aH,aI,aJ,aK,aL,aM,aN,aO){H.type=d;H.children=[{type:c,tag:"h1",props:{id:I},children:[{type:c,tag:J,props:{ariaHidden:K,href:"#%E8%BF%9B%E7%A8%8B",tabIndex:L},children:[{type:c,tag:M,props:{className:[N,O]},children:[]}]},{type:b,value:I}]},{type:b,value:q},{type:c,tag:"h2",props:{id:p},children:[{type:c,tag:J,props:{ariaHidden:K,href:"#%E5%AD%A4%E5%84%BF%E8%BF%9B%E7%A8%8B%E4%B8%8E%E5%83%B5%E5%B0%B8%E8%BF%9B%E7%A8%8B",tabIndex:L},children:[{type:c,tag:M,props:{className:[N,O]},children:[]}]},{type:b,value:p}]},{type:b,value:q},{type:c,tag:k,props:{},children:[{type:b,value:"子进程是由父进程创建的，linux能确保子进程结束后，父进程能通过调用wait()或者waitpid()系统调用获取到子进程的信息。\n其实现方式是，当子进程结束后，虽然系统会是否子进程的大部分资源，如打开的文件，内存等，但是还是会保留少量资源，如pid，直到父进程调用获取子进程的信息才会释放。\n因此，如果子进程还没结束，父进程就结束了，那这些子进程则是孤儿进程，会被init进程（pid=1）收养，以调用释放孤儿进程的资源。\n但是如果子进程结束了，但他的父进程既不结束也不调用释放资源，那么这些子进程则是僵尸进程，会一直占用pid，直到系统无pid可用。"}]}];T.type=d;T.children=[{type:c,tag:k,props:{},children:[{type:b,value:"编辑距离可以用来判断两个字符串的相似性。量测方式是把一个字符串转变为另外一个字符串所需的操作次数。操作类型只有三种：增加，删除和替换。这样子，字符串的相似性则可以用"},{type:c,tag:j,props:{},children:[{type:b,value:"1-编辑距离\u002FMAX(字符串1长度,字符串2长度)"}]},{type:b,value:"来度量。"}]}];Y.type=d;Y.children=[];ab.type=d;ab.children=[{type:c,tag:k,props:{},children:[{type:b,value:aa}]}];ae.type=d;ae.children=[];ai.type=d;ai.children=[];ax.type=d;ax.children=[];aC.type=d;aC.children=[];aH.type=d;aH.children=[];aM.type=d;aM.children=[{type:c,tag:k,props:{},children:[{type:b,value:"之前一直只会使用"},{type:c,tag:j,props:{},children:[{type:b,value:"@RunWith(SpringRunner.class)"}]},{type:b,value:"和"},{type:c,tag:j,props:{},children:[{type:b,value:"@SpringBootTest"}]},{type:b,value:"注解来加载整个项目来注入依赖，就只会用个"},{type:c,tag:j,props:{},children:[{type:b,value:"assertEquals"}]},{type:b,value:"方法来进行测试（虽然现在也是）。但问题还是有的，且不论加载整个项目，把无关的依赖都加载进行，浪费时间。如果我要测试添加用户的接口，第一，一测试就把数据写进数据库了呀，即便是测试数据库，不要紧，那我测试第二遍，由于账户名相同，就写不进去数据库了，不能接受地报了错，其实啥问题都没有，如果要再测试就得改账户名，动了代码。也就是说这样的测试代码是连调用两次都不行的垃圾，这样子不是很奇怪吗。"}]},{type:b,value:q},{type:c,tag:k,props:{},children:[{type:b,value:"而Mockito能解决这些问题。先说说情景，我要对"},{type:c,tag:j,props:{},children:[{type:b,value:"UserService"}]},{type:b,value:"类测试添加账号和获取账号的方法，UserService调用了"},{type:c,tag:j,props:{},children:[{type:b,value:"UserDao"}]},{type:b,value:"的方法，为了避免我调用UserService的时候调用到真的，连接到数据库的UserDao，我需要给UserService替换一个UserDao的实现，而这个新的UserDao的实现的方法的返回我希望我能简单直观的控制，这样就叫做对UserService类mock了UserDao。"}]},{type:b,value:q},{type:c,tag:k,props:{},children:[{type:b,value:"在spring boot里使用很简单，下面是个简单例子，"},{type:c,tag:j,props:{},children:[{type:b,value:"UserPo"}]},{type:b,value:"类就是个普通的bean，放着账号密码，就不贴代码了。"}]}];return {data:[{siteConfig:{siteName:"无名の窝",siteHost:"https:\u002F\u002Fcellargalaxy.github.io",basePath:"\u002Fblog-code\u002F",navs:[{text:"文章",url:s},{text:"归档",url:"\u002Fblog-code\u002Farchive\u002F0\u002F"},{text:"画画",url:"\u002Fblog-code\u002Fhtml\u002Fhua.html"},{text:"开源",url:"\u002Fblog-code\u002Fhttps:\u002Fgithub.com\u002Fcellargalaxy\u002Fblog-vue"}],pageSize:t,urlReplace:{"^/file/blog/code":"https:\u002F\u002Foracleamd1.dynv6.net\u002Ffile\u002Ffile\u002Fblog\u002Fcode"},backgroundImage:{duration:u,fade:1000,images:[{url:"https:\u002F\u002Fi.loli.net\u002F2020\u002F01\u002F25\u002FcofTzDQXitjeVZ6.jpg",description:v,type:i},{url:"https:\u002F\u002Fi.loli.net\u002F2020\u002F01\u002F25\u002FsfaRJ2lVeM3NDbE.jpg",description:v,type:i},{url:"https:\u002F\u002Fi.loli.net\u002F2020\u002F01\u002F26\u002FKybiTdftam5Su7x.jpg",description:"青春猪头-双葉理央",type:i},{url:"https:\u002F\u002Fi.loli.net\u002F2020\u002F09\u002F08\u002FxdX73nfs24qgOYk.jpg",description:"京吹-明日香,久美子",type:i},{url:"https:\u002F\u002Fi.loli.net\u002F2020\u002F02\u002F14\u002FMAiruNcEFW2HYtg.jpg",description:"终将成为你-七海灯子,小糸侑",type:i},{url:"https:\u002F\u002Fi.loli.net\u002F2020\u002F02\u002F05\u002FEojdAxTDJsFpbPw.jpg",description:"玉子市场-北白川玉子",type:i},{url:"https:\u002F\u002Fi.loli.net\u002F2020\u002F01\u002F31\u002FAXxwJDRS9fmN2uU.jpg",description:"fate_hf-弓道馆",type:i},{url:"https:\u002F\u002Fi.loli.net\u002F2020\u002F02\u002F01\u002FaHhVObpJus6dnM4.jpg",description:"fate_hf-樱花树",type:i}]}},homeConfig:{brandInterval:u,brands:[{imageUrl:"https:\u002F\u002Fi.loli.net\u002F2020\u002F01\u002F21\u002FmMEAnwY5XPC2pFb.jpg",title:"日常",texts:["我们所度过的每个平凡的日常，也许就是连续不断发生的奇迹。","日々、私たちが過ごしている日常は、実は奇跡の連続なのかもしれない。"]},{imageUrl:"https:\u002F\u002Fi.loli.net\u002F2020\u002F04\u002F19\u002FH1MmXb9xPcYEhT2.jpg",title:"昨日之歌",texts:["时间梭梭箭如飞，人道漫漫步蹒跚","人間そんな変わるもんじゃないのに、月日ばっかどんどん過ぎて"]}],navs:[{text:"Github",url:"https:\u002F\u002Fgithub.com\u002Fcellargalaxy\u002F"}]},pageFootConfig:{lines:[[{text:"Copyright © 2017-? ."},{text:"备案？不存在的"},{text:"Powered by Nuxt.js & Github"}]]},buildTime:new Date(1684674701715),rootPath:s,crumbs:[],pageSize:t,total:119,currentPage:7,files:[{slug:w,description:"进程\n孤儿进程与僵尸进程\n子进程是由父进程创建的，linux能确保子进程结束后，父进程能通过调用wait()或者waitpid()系统调用获取到子进程的信息。\n其实现方式是，当子进程结束后，虽然系统会是否子进程的大部分资源，如打开的文件，内存等，但是还是会保留少量资源，如pid，直到父进程调用获取子进程的信息才会释放。\n因此，如果子进程还没结束，父进程就结束了，那这些子进程则是孤儿进程，会被init进程（pid=1）收养，以调用释放孤儿进程的资源。\n但是如果子进程结束了，但他的父进程既不结束也不调用释放资源，那么这些子进程则是僵尸进程，会一直占用pid，直到系统无pid可用。",createdAt:x,updatedAt:x,toc:[{id:p,depth:a,text:p},{id:"什么是线程安全如何实现线程安全",depth:a,text:"什么是线程安全，如何实现线程安全"},{id:y,depth:a,text:y},{id:z,depth:a,text:z},{id:A,depth:a,text:A},{id:B,depth:a,text:B},{id:C,depth:a,text:C},{id:D,depth:a,text:D},{id:E,depth:a,text:E},{id:F,depth:a,text:F},{id:G,depth:a,text:G}],body:H,excerpt:H,dir:P,path:"\u002Fjava\u002F20181209\u002FJava多线程",extension:e,title:w,url:"\u002Fblog-code\u002Fview\u002Fjava\u002F20181209\u002FJava多线程\u002F",createAt:new Date(1544313600000),updateAt:new Date(1544313600000),attributes:[{name:f,value:Q},{name:g,value:Q},{name:h,value:P,url:"\u002Fblog-code\u002Fpage\u002Fjava\u002F20181209\u002F1\u002F"}]},{slug:R,description:"编辑距离可以用来判断两个字符串的相似性。量测方式是把一个字符串转变为另外一个字符串所需的操作次数。操作类型只有三种：增加，删除和替换。这样子，字符串的相似性则可以用1-编辑距离\u002FMAX(字符串1长度,字符串2长度)来度量。",createdAt:S,updatedAt:S,toc:[],body:T,excerpt:T,dir:U,path:"\u002F算法\u002F20181114\u002F编辑距离",extension:e,title:R,url:"\u002Fblog-code\u002Fview\u002F算法\u002F20181114\u002F编辑距离\u002F",createAt:new Date(1542153600000),updateAt:new Date(1542153600000),attributes:[{name:f,value:V},{name:g,value:V},{name:h,value:U,url:"\u002Fblog-code\u002Fpage\u002F算法\u002F20181114\u002F1\u002F"}]},{slug:W,description:l,createdAt:X,updatedAt:X,toc:[],body:Y,excerpt:Y,dir:Z,path:"\u002F算法\u002F20181108\u002Fword2vec学习小记",extension:e,title:W,url:"\u002Fblog-code\u002Fview\u002F算法\u002F20181108\u002Fword2vec学习小记\u002F",createAt:new Date(1541635200000),updateAt:new Date(1541635200000),attributes:[{name:f,value:_},{name:g,value:_},{name:h,value:Z,url:"\u002Fblog-code\u002Fpage\u002F算法\u002F20181108\u002F1\u002F"}]},{slug:$,description:aa,createdAt:m,updatedAt:m,toc:[],body:ab,excerpt:ab,dir:r,path:"\u002F框架\u002F20181024\u002FQuartz集群原理及源码分析",extension:e,title:$,url:"\u002Fblog-code\u002Fview\u002F框架\u002F20181024\u002FQuartz集群原理及源码分析\u002F",createAt:new Date(1540339200000),updateAt:new Date(1540339200000),attributes:[{name:f,value:n},{name:g,value:n},{name:h,value:r,url:ac}]},{slug:ad,description:l,createdAt:m,updatedAt:m,toc:[{id:"job与jobdetail",depth:a,text:"Job与JobDetail"},{id:"trigger",depth:a,text:"Trigger"},{id:"scheduler",depth:a,text:"Scheduler"}],body:ae,excerpt:ae,dir:r,path:"\u002F框架\u002F20181024\u002FQuartz框架的使用",extension:e,title:ad,url:"\u002Fblog-code\u002Fview\u002F框架\u002F20181024\u002FQuartz框架的使用\u002F",createAt:new Date(1540339200000),updateAt:new Date(1540339200000),attributes:[{name:f,value:n},{name:g,value:n},{name:h,value:r,url:ac}]},{slug:af,description:l,createdAt:m,updatedAt:m,toc:[{id:ag,depth:a,text:ag},{id:ah,depth:a,text:ah}],body:ai,excerpt:ai,dir:aj,path:"\u002F中间件\u002F20181024\u002FMysql的锁与引擎",extension:e,title:af,url:"\u002Fblog-code\u002Fview\u002F中间件\u002F20181024\u002FMysql的锁与引擎\u002F",createAt:new Date(1540339200000),updateAt:new Date(1540339200000),attributes:[{name:f,value:n},{name:g,value:n},{name:h,value:aj,url:"\u002Fblog-code\u002Fpage\u002F中间件\u002F20181024\u002F1\u002F"}]},{slug:ak,description:l,createdAt:al,updatedAt:al,toc:[{id:am,depth:a,text:am},{id:an,depth:a,text:an},{id:ao,depth:a,text:ao},{id:ap,depth:a,text:ap},{id:aq,depth:a,text:aq},{id:ar,depth:a,text:ar},{id:as,depth:a,text:as},{id:"arp",depth:a,text:"ARP"},{id:"icmp",depth:a,text:"ICMP"},{id:"udp",depth:a,text:"UDP"},{id:"tcp",depth:a,text:"TCP"},{id:at,depth:o,text:at},{id:"连续arq协议滑动窗口协议",depth:o,text:"连续ARQ协议\u002F滑动窗口协议"},{id:au,depth:o,text:au},{id:av,depth:o,text:av},{id:aw,depth:o,text:aw},{id:"tcp的三次握手和四次分手",depth:o,text:"TCP的三次握手和四次分手"}],body:ax,excerpt:ax,dir:ay,path:"\u002F协议\u002F20180916\u002F计算机网络复习笔记",extension:e,title:ak,url:"\u002Fblog-code\u002Fview\u002F协议\u002F20180916\u002F计算机网络复习笔记\u002F",createAt:new Date(1537056000000),updateAt:new Date(1537056000000),attributes:[{name:f,value:az},{name:g,value:az},{name:h,value:ay,url:"\u002Fblog-code\u002Fpage\u002F协议\u002F20180916\u002F1\u002F"}]},{slug:aA,description:l,createdAt:aB,updatedAt:aB,toc:[],body:aC,excerpt:aC,dir:aD,path:"\u002F框架\u002F20180831\u002Fjwt总结与jjwt的使用",extension:e,title:aA,url:"\u002Fblog-code\u002Fview\u002F框架\u002F20180831\u002Fjwt总结与jjwt的使用\u002F",createAt:new Date(1535673600000),updateAt:new Date(1535673600000),attributes:[{name:f,value:aE},{name:g,value:aE},{name:h,value:aD,url:"\u002Fblog-code\u002Fpage\u002F框架\u002F20180831\u002F1\u002F"}]},{slug:aF,description:l,createdAt:aG,updatedAt:aG,toc:[],body:aH,excerpt:aH,dir:aI,path:"\u002F其他\u002F20180820\u002F做题笔记",extension:e,title:aF,url:"\u002Fblog-code\u002Fview\u002F其他\u002F20180820\u002F做题笔记\u002F",createAt:new Date(1534723200000),updateAt:new Date(1534723200000),attributes:[{name:f,value:aJ},{name:g,value:aJ},{name:h,value:aI,url:"\u002Fblog-code\u002Fpage\u002F其他\u002F20180820\u002F1\u002F"}]},{slug:aK,description:"之前一直只会使用@RunWith(SpringRunner.class)和@SpringBootTest注解来加载整个项目来注入依赖，就只会用个assertEquals方法来进行测试（虽然现在也是）。但问题还是有的，且不论加载整个项目，把无关的依赖都加载进行，浪费时间。如果我要测试添加用户的接口，第一，一测试就把数据写进数据库了呀，即便是测试数据库，不要紧，那我测试第二遍，由于账户名相同，就写不进去数据库了，不能接受地报了错，其实啥问题都没有，如果要再测试就得改账户名，动了代码。也就是说这样的测试代码是连调用两次都不行的垃圾，这样子不是很奇怪吗。\n而Mockito能解决这些问题。先说说情景，我要对UserService类测试添加账号和获取账号的方法，UserService调用了UserDao的方法，为了避免我调用UserService的时候调用到真的，连接到数据库的UserDao，我需要给UserService替换一个UserDao的实现，而这个新的UserDao的实现的方法的返回我希望我能简单直观的控制，这样就叫做对UserService类mock了UserDao。\n在spring boot里使用很简单，下面是个简单例子，UserPo类就是个普通的bean，放着账号密码，就不贴代码了。",createdAt:aL,updatedAt:aL,toc:[],body:aM,excerpt:aM,dir:aN,path:"\u002F框架\u002F20180809\u002FSpring Boot使用Mockito做单元测试",extension:e,title:aK,url:"\u002Fblog-code\u002Fview\u002F框架\u002F20180809\u002FSpring Boot使用Mockito做单元测试\u002F",createAt:new Date(1533772800000),updateAt:new Date(1533772800000),attributes:[{name:f,value:aO},{name:g,value:aO},{name:h,value:aN,url:"\u002Fblog-code\u002Fpage\u002F框架\u002F20180809\u002F1\u002F"}]}]}],fetch:{},mutations:void 0}}(2,"text","element","root",".md","createAt","updateAt","sort","wide","code","p","","2018-10-24T00:00:00.000Z","2018-10-24",3,"孤儿进程与僵尸进程","\n","\u002F框架\u002F20181024","\u002Fblog-code\u002Fpage\u002F1\u002F",10,10000,"青春猪头-牧之原翔子-江之岛","Java多线程","2018-12-09T00:00:00.000Z","线程的生命周期","创建线程的方式","如何关闭线程","死锁","线程池作用","线程池核心参数","创建线程池的方式","配置线程池","其他方法",{},"进程","a","true",-1,"span","icon","icon-link","\u002Fjava\u002F20181209","2018-12-09","编辑距离","2018-11-14T00:00:00.000Z",{},"\u002F算法\u002F20181114","2018-11-14","word2vec学习小记","2018-11-08T00:00:00.000Z",{},"\u002F算法\u002F20181108","2018-11-08","Quartz集群原理及源码分析","我们需要Quartz框架执行任务，就需要告诉Quartz所需的JobDetail和Trigger。在单机里，Quartz会把JobDetail和Trigger保存在内存里，如果重启，JobDetail和Trigger的数据都会全部丢失（虽然会在代码里重新添加）。显然，需要集群执行，把JobDetail和Trigger保存在内存里是没有办法在各个节点之间进行同步的，而Quartz利用数据库的锁来进行实现。",{},"\u002Fblog-code\u002Fpage\u002F框架\u002F20181024\u002F1\u002F","Quartz框架的使用",{},"Mysql的锁与引擎","共享锁","独占锁",{},"\u002F中间件\u002F20181024","计算机网络复习笔记","2018-09-16T00:00:00.000Z","网络层次","网际协议ip","虚拟互联网络","ip地址分类","划分子网","ip数据报","ip层转发分组流程","等待停止协议","超时重传","流量控制","拥塞控制",{},"\u002F协议\u002F20180916","2018-09-16","jwt总结与jjwt的使用","2018-08-31T00:00:00.000Z",{},"\u002F框架\u002F20180831","2018-08-31","做题笔记","2018-08-20T00:00:00.000Z",{},"\u002F其他\u002F20180820","2018-08-20","Spring Boot使用Mockito做单元测试","2018-08-09T00:00:00.000Z",{},"\u002F框架\u002F20180809","2018-08-09")));