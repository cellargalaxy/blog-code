__NUXT_JSONP__("/page/7", (function(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,_,$,aa,ab,ac,ad,ae,af,ag,ah,ai,aj,ak,al,am,an,ao,ap,aq,ar,as,at,au,av,aw,ax,ay,az,aA,aB,aC,aD,aE,aF,aG,aH,aI,aJ,aK,aL){H.type=d;H.children=[];M.type=d;M.children=[];R.type=d;R.children=[];W.type=d;W.children=[{type:b,tag:j,props:{},children:[{type:a,value:"之前一直只会使用"},{type:b,tag:k,props:{},children:[{type:a,value:"@RunWith(SpringRunner.class)"}]},{type:a,value:"和"},{type:b,tag:k,props:{},children:[{type:a,value:"@SpringBootTest"}]},{type:a,value:"注解来加载整个项目来注入依赖，就只会用个"},{type:b,tag:k,props:{},children:[{type:a,value:"assertEquals"}]},{type:a,value:"方法来进行测试（虽然现在也是）。但问题还是有的，且不论加载整个项目，把无关的依赖都加载进行，浪费时间。如果我要测试添加用户的接口，第一，一测试就把数据写进数据库了呀，即便是测试数据库，不要紧，那我测试第二遍，由于账户名相同，就写不进去数据库了，不能接受地报了错，其实啥问题都没有，如果要再测试就得改账户名，动了代码。也就是说这样的测试代码是连调用两次都不行的垃圾，这样子不是很奇怪吗。"}]},{type:a,value:m},{type:b,tag:j,props:{},children:[{type:a,value:"而Mockito能解决这些问题。先说说情景，我要对"},{type:b,tag:k,props:{},children:[{type:a,value:"UserService"}]},{type:a,value:"类测试添加账号和获取账号的方法，UserService调用了"},{type:b,tag:k,props:{},children:[{type:a,value:"UserDao"}]},{type:a,value:"的方法，为了避免我调用UserService的时候调用到真的，连接到数据库的UserDao，我需要给UserService替换一个UserDao的实现，而这个新的UserDao的实现的方法的返回我希望我能简单直观的控制，这样就叫做对UserService类mock了UserDao。"}]},{type:a,value:m},{type:b,tag:j,props:{},children:[{type:a,value:"在spring boot里使用很简单，下面是个简单例子，"},{type:b,tag:k,props:{},children:[{type:a,value:"UserPo"}]},{type:a,value:"类就是个普通的bean，放着账号密码，就不贴代码了。"}]}];_.type=d;_.children=[{type:b,tag:j,props:{},children:[{type:a,value:"让spring boot支持CORS非常简单，不用做任何配置，只需要在controller里使用"},{type:b,tag:k,props:{},children:[{type:a,value:"@CrossOrigin"}]},{type:a,value:"注解即可。"}]},{type:a,value:m},{type:b,tag:j,props:{},children:[{type:a,value:"@CrossOrigin注解可以使用在类或者方法上，其参数主要有origins和maxAge，用来指定允许跨域的域默认是*，和OPTIONS响应的有效时间，默认是1800。当类和方法都使用@CrossOrigin注解时，会自动合并两个注解的参数。"}]}];ah.type=d;ah.children=[{type:b,tag:ai,props:{id:aj},children:[{type:b,tag:ak,props:{ariaHidden:al,href:"#%E4%BD%95%E4%B8%BA%E5%9F%9F",tabIndex:am},children:[{type:b,tag:an,props:{className:[ao,ap]},children:[]}]},{type:a,value:aj}]},{type:a,value:m},{type:b,tag:j,props:{},children:[{type:a,value:"这里的域指的并不是域名，而是协议、主机地址和端口的唯一组合，即协议，主机地址和端口其中一个不一样那就是另外一个域了。"}]},{type:a,value:m},{type:b,tag:ai,props:{id:aq},children:[{type:b,tag:ak,props:{ariaHidden:al,href:"#%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98%E4%B8%BA%E4%BD%95%E8%80%8C%E6%9D%A5",tabIndex:am},children:[{type:b,tag:an,props:{className:[ao,ap]},children:[]}]},{type:a,value:aq}]},{type:a,value:m},{type:b,tag:j,props:{},children:[{type:a,value:"浏览器为了安全，避免网页被嵌入恶意代码，限制来源于某个域的脚本只能向其来源的域发起ajax请求，并且脚本也无法获取别的域的cookie，DOM等资源，这个叫同源策略。例如我在"},{type:b,tag:k,props:{},children:[{type:a,value:"http:\u002F\u002Fwww.alipay.com\u002F"}]},{type:a,value:"里嵌入了个检测你支付宝密码的脚本，发现你输入密码，就把你的密码发送到我的域名下，但由于我的域名跟阿里的域名不在同一个域里面，这样子偷偷发送密码的请求就会被浏览器拦截住。"}]},{type:a,value:m},{type:b,tag:j,props:{},children:[{type:a,value:"接下来以来源于a.com域（简称a域）的脚本向b.com（简称b域）发起请求作为情景来解释"}]}];au.type=d;au.children=[];az.type=d;az.children=[];aE.type=d;aE.children=[];aJ.type=d;aJ.children=[];return {data:[{siteConfig:{siteName:"无名の窝",siteHost:"https:\u002F\u002Fcellargalaxy.github.io",basePath:"\u002Fblog-code\u002F",navs:[{text:"文章",url:q},{text:"归档",url:"\u002Fblog-code\u002Farchive\u002F0\u002F"},{text:"画画",url:"\u002Fblog-code\u002Fhtml\u002Fhua.html"},{text:"开源",url:"\u002Fblog-code\u002Fhttps:\u002Fgithub.com\u002Fcellargalaxy\u002Fblog-vue"}],pageSize:r,urlReplace:{"^/file/blog/code":"https:\u002F\u002Foracleamd1.dynv6.net\u002Ffile\u002Ffile\u002Fblog\u002Fcode"},backgroundImage:{duration:s,fade:1000,images:[{url:"https:\u002F\u002Fi.loli.net\u002F2020\u002F01\u002F25\u002FcofTzDQXitjeVZ6.jpg",description:t,type:i},{url:"https:\u002F\u002Fi.loli.net\u002F2020\u002F01\u002F25\u002FsfaRJ2lVeM3NDbE.jpg",description:t,type:i},{url:"https:\u002F\u002Fi.loli.net\u002F2020\u002F01\u002F26\u002FKybiTdftam5Su7x.jpg",description:"青春猪头-双葉理央",type:i},{url:"https:\u002F\u002Fi.loli.net\u002F2020\u002F09\u002F08\u002FxdX73nfs24qgOYk.jpg",description:"京吹-明日香,久美子",type:i},{url:"https:\u002F\u002Fi.loli.net\u002F2020\u002F02\u002F14\u002FMAiruNcEFW2HYtg.jpg",description:"终将成为你-七海灯子,小糸侑",type:i},{url:"https:\u002F\u002Fi.loli.net\u002F2020\u002F02\u002F05\u002FEojdAxTDJsFpbPw.jpg",description:"玉子市场-北白川玉子",type:i},{url:"https:\u002F\u002Fi.loli.net\u002F2020\u002F01\u002F31\u002FAXxwJDRS9fmN2uU.jpg",description:"fate_hf-弓道馆",type:i},{url:"https:\u002F\u002Fi.loli.net\u002F2020\u002F02\u002F01\u002FaHhVObpJus6dnM4.jpg",description:"fate_hf-樱花树",type:i}]}},homeConfig:{brandInterval:s,brands:[{imageUrl:"https:\u002F\u002Fi.loli.net\u002F2020\u002F01\u002F21\u002FmMEAnwY5XPC2pFb.jpg",title:"日常",texts:["我们所度过的每个平凡的日常，也许就是连续不断发生的奇迹。","日々、私たちが過ごしている日常は、実は奇跡の連続なのかもしれない。"]},{imageUrl:"https:\u002F\u002Fi.loli.net\u002F2020\u002F04\u002F19\u002FH1MmXb9xPcYEhT2.jpg",title:"昨日之歌",texts:["时间梭梭箭如飞，人道漫漫步蹒跚","人間そんな変わるもんじゃないのに、月日ばっかどんどん過ぎて"]}],navs:[{text:"Github",url:"https:\u002F\u002Fgithub.com\u002Fcellargalaxy\u002F"}]},pageFootConfig:{lines:[[{text:"Copyright © 2017-? ."},{text:"备案？不存在的"},{text:"Powered by Nuxt.js & Github"}]]},buildTime:new Date(1655455918470),rootPath:q,crumbs:[],pageSize:r,total:113,currentPage:7,files:[{slug:u,description:l,createdAt:v,updatedAt:v,toc:[{id:w,depth:c,text:w},{id:x,depth:c,text:x},{id:y,depth:c,text:y},{id:z,depth:c,text:z},{id:A,depth:c,text:A},{id:B,depth:c,text:B},{id:C,depth:c,text:C},{id:"arp",depth:c,text:"ARP"},{id:"icmp",depth:c,text:"ICMP"},{id:"udp",depth:c,text:"UDP"},{id:"tcp",depth:c,text:"TCP"},{id:D,depth:n,text:D},{id:"连续arq协议滑动窗口协议",depth:n,text:"连续ARQ协议\u002F滑动窗口协议"},{id:E,depth:n,text:E},{id:F,depth:n,text:F},{id:G,depth:n,text:G},{id:"tcp的三次握手和四次分手",depth:n,text:"TCP的三次握手和四次分手"}],body:H,excerpt:H,dir:I,path:"\u002F协议\u002F20180916\u002F计算机网络复习笔记",extension:e,title:u,url:"\u002Fblog-code\u002Fview\u002F协议\u002F20180916\u002F计算机网络复习笔记\u002F",createAt:new Date(1537056000000),updateAt:new Date(1537056000000),attributes:[{name:f,value:J},{name:g,value:J},{name:h,value:I,url:"\u002Fblog-code\u002Fpage\u002F协议\u002F20180916\u002F1\u002F"}]},{slug:K,description:l,createdAt:L,updatedAt:L,toc:[],body:M,excerpt:M,dir:N,path:"\u002F框架\u002F20180831\u002Fjwt总结与jjwt的使用",extension:e,title:K,url:"\u002Fblog-code\u002Fview\u002F框架\u002F20180831\u002Fjwt总结与jjwt的使用\u002F",createAt:new Date(1535673600000),updateAt:new Date(1535673600000),attributes:[{name:f,value:O},{name:g,value:O},{name:h,value:N,url:"\u002Fblog-code\u002Fpage\u002F框架\u002F20180831\u002F1\u002F"}]},{slug:P,description:l,createdAt:Q,updatedAt:Q,toc:[],body:R,excerpt:R,dir:S,path:"\u002F其他\u002F20180820\u002F做题笔记",extension:e,title:P,url:"\u002Fblog-code\u002Fview\u002F其他\u002F20180820\u002F做题笔记\u002F",createAt:new Date(1534723200000),updateAt:new Date(1534723200000),attributes:[{name:f,value:T},{name:g,value:T},{name:h,value:S,url:"\u002Fblog-code\u002Fpage\u002F其他\u002F20180820\u002F1\u002F"}]},{slug:U,description:"之前一直只会使用@RunWith(SpringRunner.class)和@SpringBootTest注解来加载整个项目来注入依赖，就只会用个assertEquals方法来进行测试（虽然现在也是）。但问题还是有的，且不论加载整个项目，把无关的依赖都加载进行，浪费时间。如果我要测试添加用户的接口，第一，一测试就把数据写进数据库了呀，即便是测试数据库，不要紧，那我测试第二遍，由于账户名相同，就写不进去数据库了，不能接受地报了错，其实啥问题都没有，如果要再测试就得改账户名，动了代码。也就是说这样的测试代码是连调用两次都不行的垃圾，这样子不是很奇怪吗。\n而Mockito能解决这些问题。先说说情景，我要对UserService类测试添加账号和获取账号的方法，UserService调用了UserDao的方法，为了避免我调用UserService的时候调用到真的，连接到数据库的UserDao，我需要给UserService替换一个UserDao的实现，而这个新的UserDao的实现的方法的返回我希望我能简单直观的控制，这样就叫做对UserService类mock了UserDao。\n在spring boot里使用很简单，下面是个简单例子，UserPo类就是个普通的bean，放着账号密码，就不贴代码了。",createdAt:V,updatedAt:V,toc:[],body:W,excerpt:W,dir:X,path:"\u002F框架\u002F20180809\u002FSpring Boot使用Mockito做单元测试",extension:e,title:U,url:"\u002Fblog-code\u002Fview\u002F框架\u002F20180809\u002FSpring Boot使用Mockito做单元测试\u002F",createAt:new Date(1533772800000),updateAt:new Date(1533772800000),attributes:[{name:f,value:Y},{name:g,value:Y},{name:h,value:X,url:"\u002Fblog-code\u002Fpage\u002F框架\u002F20180809\u002F1\u002F"}]},{slug:Z,description:"让spring boot支持CORS非常简单，不用做任何配置，只需要在controller里使用@CrossOrigin注解即可。\n@CrossOrigin注解可以使用在类或者方法上，其参数主要有origins和maxAge，用来指定允许跨域的域默认是*，和OPTIONS响应的有效时间，默认是1800。当类和方法都使用@CrossOrigin注解时，会自动合并两个注解的参数。",createdAt:o,updatedAt:o,toc:[],body:_,excerpt:_,dir:$,path:"\u002F框架\u002F20180802\u002Fspring boot与Nginx支持CORS",extension:e,title:Z,url:"\u002Fblog-code\u002Fview\u002F框架\u002F20180802\u002Fspring boot与Nginx支持CORS\u002F",createAt:new Date(1533168000000),updateAt:new Date(1533168000000),attributes:[{name:f,value:p},{name:g,value:p},{name:h,value:$,url:"\u002Fblog-code\u002Fpage\u002F框架\u002F20180802\u002F1\u002F"}]},{slug:aa,description:"何为域\n这里的域指的并不是域名，而是协议、主机地址和端口的唯一组合，即协议，主机地址和端口其中一个不一样那就是另外一个域了。\n跨域问题为何而来\n浏览器为了安全，避免网页被嵌入恶意代码，限制来源于某个域的脚本只能向其来源的域发起ajax请求，并且脚本也无法获取别的域的cookie，DOM等资源，这个叫同源策略。例如我在http:\u002F\u002Fwww.alipay.com\u002F里嵌入了个检测你支付宝密码的脚本，发现你输入密码，就把你的密码发送到我的域名下，但由于我的域名跟阿里的域名不在同一个域里面，这样子偷偷发送密码的请求就会被浏览器拦截住。\n接下来以来源于a.com域（简称a域）的脚本向b.com（简称b域）发起请求作为情景来解释",createdAt:o,updatedAt:o,toc:[{id:ab,depth:c,text:ab},{id:ac,depth:c,text:ac},{id:ad,depth:c,text:ad},{id:ae,depth:c,text:ae},{id:af,depth:c,text:af},{id:ag,depth:c,text:ag}],body:ah,excerpt:ah,dir:ar,path:"\u002F协议\u002F20180802\u002FJSONP和CORS的跨域请求",extension:e,title:aa,url:"\u002Fblog-code\u002Fview\u002F协议\u002F20180802\u002FJSONP和CORS的跨域请求\u002F",createAt:new Date(1533168000000),updateAt:new Date(1533168000000),attributes:[{name:f,value:p},{name:g,value:p},{name:h,value:ar,url:"\u002Fblog-code\u002Fpage\u002F协议\u002F20180802\u002F1\u002F"}]},{slug:as,description:l,createdAt:at,updatedAt:at,toc:[],body:au,excerpt:au,dir:av,path:"\u002F框架\u002F20180728\u002Fspring boot+Spring Security+jjwt",extension:e,title:as,url:"\u002Fblog-code\u002Fview\u002F框架\u002F20180728\u002Fspring boot+Spring Security+jjwt\u002F",createAt:new Date(1532736000000),updateAt:new Date(1532736000000),attributes:[{name:f,value:aw},{name:g,value:aw},{name:h,value:av,url:"\u002Fblog-code\u002Fpage\u002F框架\u002F20180728\u002F1\u002F"}]},{slug:ax,description:l,createdAt:ay,updatedAt:ay,toc:[],body:az,excerpt:az,dir:aA,path:"\u002F中间件\u002F20180718\u002F使用sql游标遍历结果集",extension:e,title:ax,url:"\u002Fblog-code\u002Fview\u002F中间件\u002F20180718\u002F使用sql游标遍历结果集\u002F",createAt:new Date(1531872000000),updateAt:new Date(1531872000000),attributes:[{name:f,value:aB},{name:g,value:aB},{name:h,value:aA,url:"\u002Fblog-code\u002Fpage\u002F中间件\u002F20180718\u002F1\u002F"}]},{slug:aC,description:l,createdAt:aD,updatedAt:aD,toc:[],body:aE,excerpt:aE,dir:aF,path:"\u002F折腾\u002F20180714\u002FUbuntu安装配置Redis与置换策略",extension:e,title:aC,url:"\u002Fblog-code\u002Fview\u002F折腾\u002F20180714\u002FUbuntu安装配置Redis与置换策略\u002F",createAt:new Date(1531526400000),updateAt:new Date(1531526400000),attributes:[{name:f,value:aG},{name:g,value:aG},{name:h,value:aF,url:"\u002Fblog-code\u002Fpage\u002F折腾\u002F20180714\u002F1\u002F"}]},{slug:aH,description:l,createdAt:aI,updatedAt:aI,toc:[],body:aJ,excerpt:aJ,dir:aK,path:"\u002F框架\u002F20180705\u002F作业调度系统-Quarzt的简单使用",extension:e,title:aH,url:"\u002Fblog-code\u002Fview\u002F框架\u002F20180705\u002F作业调度系统-Quarzt的简单使用\u002F",createAt:new Date(1530748800000),updateAt:new Date(1530748800000),attributes:[{name:f,value:aL},{name:g,value:aL},{name:h,value:aK,url:"\u002Fblog-code\u002Fpage\u002F框架\u002F20180705\u002F1\u002F"}]}]}],fetch:{},mutations:void 0}}("text","element",2,"root",".md","createAt","updateAt","sort","wide","p","code","","\n",3,"2018-08-02T00:00:00.000Z","2018-08-02","\u002Fblog-code\u002Fpage\u002F1\u002F",10,10000,"青春猪头-牧之原翔子-江之岛","计算机网络复习笔记","2018-09-16T00:00:00.000Z","网络层次","网际协议ip","虚拟互联网络","ip地址分类","划分子网","ip数据报","ip层转发分组流程","等待停止协议","超时重传","流量控制","拥塞控制",{},"\u002F协议\u002F20180916","2018-09-16","jwt总结与jjwt的使用","2018-08-31T00:00:00.000Z",{},"\u002F框架\u002F20180831","2018-08-31","做题笔记","2018-08-20T00:00:00.000Z",{},"\u002F其他\u002F20180820","2018-08-20","Spring Boot使用Mockito做单元测试","2018-08-09T00:00:00.000Z",{},"\u002F框架\u002F20180809","2018-08-09","spring boot与Nginx支持CORS",{},"\u002F框架\u002F20180802","JSONP和CORS的跨域请求","简单请求的请求","简单请求的响应","预检请求的请求","预检请求的回应","实际请求的请求","实际请求的响应",{},"h1","何为域","a","true",-1,"span","icon","icon-link","跨域问题为何而来","\u002F协议\u002F20180802","spring boot+Spring Security+jjwt","2018-07-28T00:00:00.000Z",{},"\u002F框架\u002F20180728","2018-07-28","使用sql游标遍历结果集","2018-07-18T00:00:00.000Z",{},"\u002F中间件\u002F20180718","2018-07-18","Ubuntu安装配置Redis与置换策略","2018-07-14T00:00:00.000Z",{},"\u002F折腾\u002F20180714","2018-07-14","作业调度系统-Quarzt的简单使用","2018-07-05T00:00:00.000Z",{},"\u002F框架\u002F20180705","2018-07-05")));