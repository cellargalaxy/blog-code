__NUXT_JSONP__("/page/8", (function(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,_,$,aa,ab,ac,ad,ae,af,ag,ah,ai,aj,ak,al,am,an,ao,ap,aq,ar,as,at,au){H.type=d;H.children=[];N.type=d;N.children=[{type:b,tag:i,props:{},children:[{type:a,value:L}]}];S.type=d;S.children=[{type:b,tag:i,props:{},children:[{type:a,value:"之前我理解的通讯比较狭隘，以为要是传输数据。但是看了别人的，发现哪怕是信号的传递，同步，也叫通讯。"}]},{type:a,value:c},{type:b,tag:p,props:{id:T},children:[{type:b,tag:q,props:{ariaHidden:r,href:"#%E7%BA%BF%E7%A8%8B%E4%B8%8E%E8%BF%9B%E7%A8%8B%E4%B9%8B%E9%97%B4%E7%9A%84%E5%85%B3%E7%B3%BB",tabIndex:s},children:[{type:b,tag:t,props:{className:[u,v]},children:[]}]},{type:a,value:T}]},{type:a,value:c},{type:b,tag:i,props:{},children:[{type:a,value:"进程是系统进行资源分配和调度的独立单位，有自己独立的地址空间。是一个程序在有个数据集合上面的一次活动。而线程是进程的实体，是cpu调度和分派的基本单位。线程除了最基本的栈，程序计数器意外，不拥有专属资源。但可以与进程下的其他线程共享进程的全部资源。"}]},{type:a,value:c},{type:b,tag:i,props:{},children:[{type:a,value:"线程是进程的不同的执行路径。一个进程奔溃后，在保护模式下不会对其他进程造成影响。而一个线程死掉就等于整个进程死掉。因此，进程的健壮性比线程好，但是切换开销大。对于要同时进行又要共享变量，只能用线程。"}]}];Y.type=d;Y.children=[{type:b,tag:p,props:{id:Z},children:[{type:b,tag:q,props:{ariaHidden:r,href:"#%E6%B3%A8%E8%A7%A3%E6%98%AF%E4%BB%80%E4%B9%88",tabIndex:s},children:[{type:b,tag:t,props:{className:[u,v]},children:[]}]},{type:a,value:Z}]},{type:a,value:c},{type:b,tag:i,props:{},children:[{type:a,value:"注解用的多了，但是其实注解是什么。打个比喻，注解就是一张标签纸，上面写着若干信息，用来标记解释被贴上这张标签纸的事物.而其事物的性质并没有发生改变，无论这张标签纸上的解释是否正确。因此，使用注解是非入侵代码的。"}]},{type:a,value:c},{type:b,tag:p,props:{id:_},children:[{type:b,tag:q,props:{ariaHidden:r,href:"#%E5%85%83%E6%B3%A8%E8%A7%A3",tabIndex:s},children:[{type:b,tag:t,props:{className:[u,v]},children:[]}]},{type:a,value:_}]},{type:a,value:c},{type:b,tag:i,props:{},children:[{type:a,value:"元注解也是注解，不过是特殊的，用来标注其他注解的注解，就像Object是全部类的父类一样。比喻的说，就是标签纸A上可以贴标签纸B，标签纸B可以贴标签纸C……，最后的标签纸N就是元注解。元注解有五个：@Retention、@Target、@Inherited、@Documented、@Repeatable。"}]}];ad.type=d;ad.children=[{type:b,tag:i,props:{},children:[{type:a,value:ac}]}];ag.type=d;ag.children=[];ai.type=d;ai.children=[];al.type=d;al.children=[{type:b,tag:p,props:{id:"java面向对象"},children:[{type:b,tag:q,props:{ariaHidden:r,href:"#java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1",tabIndex:s},children:[{type:b,tag:t,props:{className:[u,v]},children:[]}]},{type:a,value:"Java面向对象"}]},{type:a,value:c},{type:b,tag:i,props:{},children:[{type:a,value:"Java面向对象有三大特点：封装，继承，多态。"}]},{type:a,value:c},{type:b,tag:"ul",props:{},children:[{type:a,value:c},{type:b,tag:A,props:{},children:[{type:a,value:"封装是把数据和操作隐藏到对象里面，无法看到对象是什么实现的，对象只向外界暴露最简单的接口。封装通过private，default，protected和public来控制封装和访问。"}]},{type:a,value:c},{type:b,tag:A,props:{},children:[{type:a,value:"继承是子类复用父类的代码。使得子类具有父类的全部行为和特性，但也能修改父类的行为和特性或者拓展自己新的行为和特性。java的类是单继承，接口是多继承。"}]},{type:a,value:c},{type:b,tag:A,props:{},children:[{type:a,value:"多态使得不同的子类对同一个请求可是有不同的响应，并且调用者不需要知道其实现是哪个子类的版本。多态分为编译时多态（重载）和运行时多态（重写）。"}]},{type:a,value:c}]}];aq.type=d;aq.children=[];at.type=d;at.children=[{type:b,tag:i,props:{},children:[{type:a,value:"JDBC是通过"},{type:b,tag:n,props:{},children:[{type:a,value:"Class.forName(String)"}]},{type:a,value:"反射加载所需的驱动类。然后就可以通过jdk自带的"},{type:b,tag:n,props:{},children:[{type:a,value:"DriverManager"}]},{type:a,value:"的静态方法获取一个数据库连接："},{type:b,tag:n,props:{},children:[{type:a,value:"Connection"}]},{type:a,value:"。通过这个Connection我们就可以对数据库进行增删查改了。要对数据库进行增删查改还是离不开sql。需要使用sql，调用Connection的方法创建一个"},{type:b,tag:n,props:{},children:[{type:a,value:"Statement"}]},{type:a,value:"或者"},{type:b,tag:n,props:{},children:[{type:a,value:"PreparedStatement"}]},{type:a,value:"对象。创建Statement就利用一句完整的sql就好了，但是不防止注入。而PreparedStatement的sql在参数上用问号代替，作为占位符。之后再填充这些占位符，其占位符是用下标指定，下标从1开始，是防止注入的。创建好PreparedStatement执行。在这里可以设置事务。如果是select，执行后返回一个"},{type:b,tag:n,props:{},children:[{type:a,value:"ResultSet"}]},{type:a,value:"对象作为返回结果。可以通过这个结果获取列名，元组的数据等。如果是insert，delete或者update，会返回一个int，表示受此命令影响的行数。"}]}];return {data:[{siteConfig:{siteName:"无名の窝",siteHost:"https:\u002F\u002Fcellargalaxy.github.io",basePath:"\u002Fblog-code\u002F",navs:[{text:"文章",url:B},{text:"归档",url:"\u002Fblog-code\u002Farchive\u002F0\u002F"},{text:"画画",url:"\u002Fblog-code\u002Fhtml\u002Fhua.html"},{text:"开源",url:"\u002Fblog-code\u002Fhttps:\u002Fgithub.com\u002Fcellargalaxy\u002Fblog-vue"}],pageSize:C,urlReplace:{"^/file/blog/code":"https:\u002F\u002Foracleamd1.dynv6.net\u002Ffile\u002Ffile\u002Fblog\u002Fcode"},backgroundImage:{duration:D,fade:1000,images:[{url:"https:\u002F\u002Fi.loli.net\u002F2020\u002F01\u002F25\u002FcofTzDQXitjeVZ6.jpg",description:E,type:j},{url:"https:\u002F\u002Fi.loli.net\u002F2020\u002F01\u002F25\u002FsfaRJ2lVeM3NDbE.jpg",description:E,type:j},{url:"https:\u002F\u002Fi.loli.net\u002F2020\u002F01\u002F26\u002FKybiTdftam5Su7x.jpg",description:"青春猪头-双葉理央",type:j},{url:"https:\u002F\u002Fi.loli.net\u002F2020\u002F09\u002F08\u002FxdX73nfs24qgOYk.jpg",description:"京吹-明日香,久美子",type:j},{url:"https:\u002F\u002Fi.loli.net\u002F2020\u002F02\u002F14\u002FMAiruNcEFW2HYtg.jpg",description:"终将成为你-七海灯子,小糸侑",type:j},{url:"https:\u002F\u002Fi.loli.net\u002F2020\u002F02\u002F05\u002FEojdAxTDJsFpbPw.jpg",description:"玉子市场-北白川玉子",type:j},{url:"https:\u002F\u002Fi.loli.net\u002F2020\u002F01\u002F31\u002FAXxwJDRS9fmN2uU.jpg",description:"fate_hf-弓道馆",type:j},{url:"https:\u002F\u002Fi.loli.net\u002F2020\u002F02\u002F01\u002FaHhVObpJus6dnM4.jpg",description:"fate_hf-樱花树",type:j}]}},homeConfig:{brandInterval:D,brands:[{imageUrl:"https:\u002F\u002Fi.loli.net\u002F2020\u002F01\u002F21\u002FmMEAnwY5XPC2pFb.jpg",title:"日常",texts:["我们所度过的每个平凡的日常，也许就是连续不断发生的奇迹。","日々、私たちが過ごしている日常は、実は奇跡の連続なのかもしれない。"]},{imageUrl:"https:\u002F\u002Fi.loli.net\u002F2020\u002F04\u002F19\u002FH1MmXb9xPcYEhT2.jpg",title:"昨日之歌",texts:["时间梭梭箭如飞，人道漫漫步蹒跚","人間そんな変わるもんじゃないのに、月日ばっかどんどん過ぎて"]}],navs:[{text:"Github",url:"https:\u002F\u002Fgithub.com\u002Fcellargalaxy\u002F"}]},pageFootConfig:{lines:[[{text:"Copyright © 2017-? ."},{text:"备案？不存在的"},{text:"Powered by Nuxt.js & Github"}]]},buildTime:new Date(1655455918701),rootPath:B,crumbs:[],pageSize:C,total:113,currentPage:8,files:[{slug:F,description:o,createdAt:G,updatedAt:G,toc:[],body:H,excerpt:H,dir:I,path:"\u002F其他\u002F20180524\u002F做题笔记",extension:e,title:F,url:"\u002Fblog-code\u002Fview\u002F其他\u002F20180524\u002F做题笔记\u002F",createAt:new Date(1527120000000),updateAt:new Date(1527120000000),attributes:[{name:f,value:J},{name:g,value:J},{name:h,value:I,url:"\u002Fblog-code\u002Fpage\u002F其他\u002F20180524\u002F1\u002F"}]},{slug:K,description:L,createdAt:M,updatedAt:M,toc:[],body:N,excerpt:N,dir:O,path:"\u002F框架\u002F20180519\u002FSpring Cloud是个啥",extension:e,title:K,url:"\u002Fblog-code\u002Fview\u002F框架\u002F20180519\u002FSpring Cloud是个啥\u002F",createAt:new Date(1526688000000),updateAt:new Date(1526688000000),attributes:[{name:f,value:P},{name:g,value:P},{name:h,value:O,url:"\u002Fblog-code\u002Fpage\u002F框架\u002F20180519\u002F1\u002F"}]},{slug:Q,description:"之前我理解的通讯比较狭隘，以为要是传输数据。但是看了别人的，发现哪怕是信号的传递，同步，也叫通讯。\n线程与进程之间的关系\n进程是系统进行资源分配和调度的独立单位，有自己独立的地址空间。是一个程序在有个数据集合上面的一次活动。而线程是进程的实体，是cpu调度和分派的基本单位。线程除了最基本的栈，程序计数器意外，不拥有专属资源。但可以与进程下的其他线程共享进程的全部资源。\n线程是进程的不同的执行路径。一个进程奔溃后，在保护模式下不会对其他进程造成影响。而一个线程死掉就等于整个进程死掉。因此，进程的健壮性比线程好，但是切换开销大。对于要同时进行又要共享变量，只能用线程。",createdAt:R,updatedAt:R,toc:[],body:S,excerpt:S,dir:U,path:"\u002Fjava\u002F20180518\u002Fjava线程与进程通讯",extension:e,title:Q,url:"\u002Fblog-code\u002Fview\u002Fjava\u002F20180518\u002Fjava线程与进程通讯\u002F",createAt:new Date(1526601600000),updateAt:new Date(1526601600000),attributes:[{name:f,value:V},{name:g,value:V},{name:h,value:U,url:"\u002Fblog-code\u002Fpage\u002Fjava\u002F20180518\u002F1\u002F"}]},{slug:W,description:"注解是什么\n注解用的多了，但是其实注解是什么。打个比喻，注解就是一张标签纸，上面写着若干信息，用来标记解释被贴上这张标签纸的事物.而其事物的性质并没有发生改变，无论这张标签纸上的解释是否正确。因此，使用注解是非入侵代码的。\n元注解\n元注解也是注解，不过是特殊的，用来标注其他注解的注解，就像Object是全部类的父类一样。比喻的说，就是标签纸A上可以贴标签纸B，标签纸B可以贴标签纸C……，最后的标签纸N就是元注解。元注解有五个：@Retention、@Target、@Inherited、@Documented、@Repeatable。",createdAt:X,updatedAt:X,toc:[],body:Y,excerpt:Y,dir:$,path:"\u002Fjava\u002F20180516\u002Fjava注解",extension:e,title:W,url:"\u002Fblog-code\u002Fview\u002Fjava\u002F20180516\u002Fjava注解\u002F",createAt:new Date(1526428800000),updateAt:new Date(1526428800000),attributes:[{name:f,value:aa},{name:g,value:aa},{name:h,value:$,url:"\u002Fblog-code\u002Fpage\u002Fjava\u002F20180516\u002F1\u002F"}]},{slug:ab,description:ac,createdAt:k,updatedAt:k,toc:[],body:ad,excerpt:ad,dir:l,path:"\u002F折腾\u002F20180515\u002Fmysql的主从数据库设置",extension:e,title:ab,url:"\u002Fblog-code\u002Fview\u002F折腾\u002F20180515\u002Fmysql的主从数据库设置\u002F",createAt:new Date(1526342400000),updateAt:new Date(1526342400000),attributes:[{name:f,value:m},{name:g,value:m},{name:h,value:l,url:y}]},{slug:ae,description:o,createdAt:k,updatedAt:k,toc:[{id:af,depth:z,text:af}],body:ag,excerpt:ag,dir:l,path:"\u002F折腾\u002F20180515\u002Fmysql和mariadb的安装卸载",extension:e,title:ae,url:"\u002Fblog-code\u002Fview\u002F折腾\u002F20180515\u002Fmysql和mariadb的安装卸载\u002F",createAt:new Date(1526342400000),updateAt:new Date(1526342400000),attributes:[{name:f,value:m},{name:g,value:m},{name:h,value:l,url:y}]},{slug:ah,description:o,createdAt:k,updatedAt:k,toc:[],body:ai,excerpt:ai,dir:l,path:"\u002F折腾\u002F20180515\u002Fmongodb的Replica Set主从配置",extension:e,title:ah,url:"\u002Fblog-code\u002Fview\u002F折腾\u002F20180515\u002Fmongodb的Replica Set主从配置\u002F",createAt:new Date(1526342400000),updateAt:new Date(1526342400000),attributes:[{name:f,value:m},{name:g,value:m},{name:h,value:l,url:y}]},{slug:aj,description:"Java面向对象\nJava面向对象有三大特点：封装，继承，多态。\n\n封装是把数据和操作隐藏到对象里面，无法看到对象是什么实现的，对象只向外界暴露最简单的接口。封装通过private，default，protected和public来控制封装和访问。\n继承是子类复用父类的代码。使得子类具有父类的全部行为和特性，但也能修改父类的行为和特性或者拓展自己新的行为和特性。java的类是单继承，接口是多继承。\n多态使得不同的子类对同一个请求可是有不同的响应，并且调用者不需要知道其实现是哪个子类的版本。多态分为编译时多态（重载）和运行时多态（重写）。\n",createdAt:ak,updatedAt:ak,toc:[],body:al,excerpt:al,dir:am,path:"\u002Fjava\u002F20180514\u002FExec的源码乱看与杂七杂八",extension:e,title:aj,url:"\u002Fblog-code\u002Fview\u002Fjava\u002F20180514\u002FExec的源码乱看与杂七杂八\u002F",createAt:new Date(1526256000000),updateAt:new Date(1526256000000),attributes:[{name:f,value:an},{name:g,value:an},{name:h,value:am,url:"\u002Fblog-code\u002Fpage\u002Fjava\u002F20180514\u002F1\u002F"}]},{slug:ao,description:o,createdAt:w,updatedAt:w,toc:[{id:ap,depth:z,text:ap},{id:"innodb的锁",depth:z,text:"InnoDB的锁"}],body:aq,excerpt:aq,dir:ar,path:"\u002F中间件\u002F20180510\u002Fmysql杂七杂八",extension:e,title:ao,url:"\u002Fblog-code\u002Fview\u002F中间件\u002F20180510\u002Fmysql杂七杂八\u002F",createAt:new Date(1525910400000),updateAt:new Date(1525910400000),attributes:[{name:f,value:x},{name:g,value:x},{name:h,value:ar,url:"\u002Fblog-code\u002Fpage\u002F中间件\u002F20180510\u002F1\u002F"}]},{slug:as,description:"JDBC是通过Class.forName(String)反射加载所需的驱动类。然后就可以通过jdk自带的DriverManager的静态方法获取一个数据库连接：Connection。通过这个Connection我们就可以对数据库进行增删查改了。要对数据库进行增删查改还是离不开sql。需要使用sql，调用Connection的方法创建一个Statement或者PreparedStatement对象。创建Statement就利用一句完整的sql就好了，但是不防止注入。而PreparedStatement的sql在参数上用问号代替，作为占位符。之后再填充这些占位符，其占位符是用下标指定，下标从1开始，是防止注入的。创建好PreparedStatement执行。在这里可以设置事务。如果是select，执行后返回一个ResultSet对象作为返回结果。可以通过这个结果获取列名，元组的数据等。如果是insert，delete或者update，会返回一个int，表示受此命令影响的行数。",createdAt:w,updatedAt:w,toc:[],body:at,excerpt:at,dir:au,path:"\u002Fjava\u002F20180510\u002FJDBC复习",extension:e,title:as,url:"\u002Fblog-code\u002Fview\u002Fjava\u002F20180510\u002FJDBC复习\u002F",createAt:new Date(1525910400000),updateAt:new Date(1525910400000),attributes:[{name:f,value:x},{name:g,value:x},{name:h,value:au,url:"\u002Fblog-code\u002Fpage\u002Fjava\u002F20180510\u002F1\u002F"}]}]}],fetch:{},mutations:void 0}}("text","element","\n","root",".md","createAt","updateAt","sort","p","wide","2018-05-15T00:00:00.000Z","\u002F折腾\u002F20180515","2018-05-15","code","","h1","a","true",-1,"span","icon","icon-link","2018-05-10T00:00:00.000Z","2018-05-10","\u002Fblog-code\u002Fpage\u002F折腾\u002F20180515\u002F1\u002F",2,"li","\u002Fblog-code\u002Fpage\u002F1\u002F",10,10000,"青春猪头-牧之原翔子-江之岛","做题笔记","2018-05-24T00:00:00.000Z",{},"\u002F其他\u002F20180524","2018-05-24","Spring Cloud是个啥","其实你问我Spring Cloud是个啥，我也还是说不清的。因为看了网上的文章，我还是看的有点懵逼的。毕竟，我还是项（人）目（生）经验太少，too young，想东西too simple了。不过，作为一名懒惰的程序员，就算sometimes naive，在设计的时候多多少少有一点倾向Spring Cloud所提倡的来实现了。","2018-05-19T00:00:00.000Z",{},"\u002F框架\u002F20180519","2018-05-19","java线程与进程通讯","2018-05-18T00:00:00.000Z",{},"线程与进程之间的关系","\u002Fjava\u002F20180518","2018-05-18","java注解","2018-05-16T00:00:00.000Z",{},"注解是什么","元注解","\u002Fjava\u002F20180516","2018-05-16","mysql的主从数据库设置","尝试了一下mysql主从数据库的同步，想不到还蛮简单的。网上说mysql做主从同步要数据库版本一样啊，系统都要一样啊等等一堆条件，但是我发现我本地ubuntu的从数据库mysql和vps的centos上面的主数据库mariadb都能成功同步。当然，如果是在生产环境下，这样子可以避免不必要的麻烦。还有主从数据库的数据一开始还是要一致的。",{},"mysql和mariadb的安装卸载","centos卸载mariadb",{},"mongodb的Replica Set主从配置",{},"Exec的源码乱看与杂七杂八","2018-05-14T00:00:00.000Z",{},"\u002Fjava\u002F20180514","2018-05-14","mysql杂七杂八","引擎的锁",{},"\u002F中间件\u002F20180510","JDBC复习",{},"\u002Fjava\u002F20180510")));