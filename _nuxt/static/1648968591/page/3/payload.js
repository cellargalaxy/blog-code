__NUXT_JSONP__("/page/3", (function(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,_,$,aa,ab,ac,ad,ae,af,ag,ah,ai,aj,ak,al,am,an,ao,ap,aq,ar,as,at,au,av,aw,ax,ay,az,aA){x.type=d;x.children=[{type:c,tag:"h1",props:{id:"java内存模型jmm"},children:[{type:c,tag:y,props:{ariaHidden:"true",href:"#java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8Bjmm",tabIndex:-1},children:[{type:c,tag:"span",props:{className:["icon","icon-link"]},children:[]}]},{type:b,value:"java内存模型(JMM)"}]},{type:b,value:l},{type:c,tag:i,props:{},children:[{type:b,value:"JMM模型下，每个线程都有自己的本地内存，线程对内存的操作也是先操作本地内存。\n之后才将本地内存的数据刷新到主内存里，让各个线程更新共享。"}]}];D.type=d;D.children=[];O.type=d;O.children=[];S.type=d;S.children=[];V.type=d;V.children=[{type:c,tag:i,props:{},children:[{type:b,value:"ES的数据结构：index -\u003E type -\u003E document -\u003E field。"}]},{type:b,value:l},{type:c,tag:i,props:{},children:[{type:b,value:"每一个索引会被分为多个shard，每个shard保存部分数据，分别放在不同节点上。\nshard有主shard允许读写，从shard允许读，从shard会与主shard同步数据。\nES集群会选举出一个主节点，负责维护索引元数据和管理主shard和从shard。"}]},{type:b,value:l},{type:c,tag:i,props:{},children:[{type:b,value:"ES写数据请求：客户端选择一个节点作为自己的协调节点，协调节点根据请求文档进行路由。\n把请求转发给主shard所在的节点，当从shard也同步完成了，协调节点才会给客户端响应。"}]},{type:b,value:l},{type:c,tag:i,props:{},children:[{type:b,value:"ES读数据请求：客户端选择一个节点作为自己的协调节点，协调节点根据请求文档进行路由。\n在主shard和全部从shard节点上轮询一个节点进行请求转发，然后把结果返回给客户端。"}]}];$.type=d;$.children=[];af.type=d;af.children=[{type:c,tag:i,props:{},children:[{type:b,value:ad}]}];ao.type=d;ao.children=[];at.type=d;at.children=[{type:c,tag:i,props:{},children:[{type:b,value:"本文主要是"},{type:c,tag:y,props:{href:"https:\u002F\u002Fmp.weixin.qq.com\u002Fs\u002FRkncXcZT4nDQgdLeUcFaxQ",rel:["nofollow","noopener","noreferrer"],target:"_blank"},children:[{type:b,value:"聊聊 Linux 中的五种 IO 模型"}]},{type:b,value:"的概括。"}]}];ay.type=d;ay.children=[];return {data:[{navbarConfig:{brandText:"无名の窝",brandUrl:"\u002Fblog-code\u002F",navs:[{text:"文章",url:"\u002Fblog-code\u002Fpage\u002F1\u002F"},{text:"归档",url:"\u002Fblog-code\u002Farchive\u002F0\u002F"},{text:"画画",url:"\u002Fblog-code\u002Fhtml\u002Fhua.html"},{text:"开源",url:"\u002Fblog-code\u002Fhttps:\u002Fgithub.com\u002Fcellargalaxy\u002Fblog-vue"}]},homeConfig:{brandInterval:10000,brands:[{imageUrl:"https:\u002F\u002Fi.loli.net\u002F2020\u002F01\u002F21\u002FmMEAnwY5XPC2pFb.jpg",title:"日常",texts:["我们所度过的每个平凡的日常，也许就是连续不断发生的奇迹。","日々、私たちが過ごしている日常は、実は奇跡の連続なのかもしれない。"]},{imageUrl:"https:\u002F\u002Fi.loli.net\u002F2020\u002F04\u002F19\u002FH1MmXb9xPcYEhT2.jpg",title:"昨日之歌",texts:["时间梭梭箭如飞，人道漫漫步蹒跚","人間そんな変わるもんじゃないのに、月日ばっかどんどん過ぎて"]}],navs:[{text:"Github",url:"https:\u002F\u002Fgithub.com\u002Fcellargalaxy\u002F"}]},pageFootConfig:{lines:[[{text:"Copyright © 2017-? ."},{text:"备案？不存在的"},{text:"Powered by Nuxt.js & Github"}]]},buildTime:new Date(1648968602460),pageSize:10,total:109,currentPage:k,files:[{slug:o,description:"java内存模型(JMM)\nJMM模型下，每个线程都有自己的本地内存，线程对内存的操作也是先操作本地内存。\n之后才将本地内存的数据刷新到主内存里，让各个线程更新共享。",createdAt:p,updatedAt:p,toc:[{id:q,depth:a,text:q},{id:r,depth:a,text:r},{id:s,depth:a,text:s},{id:t,depth:a,text:t},{id:u,depth:a,text:u},{id:v,depth:a,text:v},{id:w,depth:a,text:w}],body:x,excerpt:x,dir:z,path:"\u002Fjava\u002F20200617\u002FJava并发",extension:e,title:o,url:"\u002Fblog-code\u002Fview\u002Fjava\u002F20200617\u002FJava并发",createAt:new Date(1592352000000),updateAt:new Date(1592352000000),attributes:[{name:f,value:A},{name:g,value:A},{name:h,value:z,url:"\u002Fblog-code\u002Fpage\u002Fjava\u002F20200617\u002F1\u002F"}]},{slug:B,description:j,createdAt:C,updatedAt:C,toc:[],body:D,excerpt:D,dir:E,path:"\u002F中间件\u002F20200609\u002FMySQL总结",extension:e,title:B,url:"\u002Fblog-code\u002Fview\u002F中间件\u002F20200609\u002FMySQL总结",createAt:new Date(1591660800000),updateAt:new Date(1591660800000),attributes:[{name:f,value:F},{name:g,value:F},{name:h,value:E,url:"\u002Fblog-code\u002Fpage\u002F中间件\u002F20200609\u002F1\u002F"}]},{slug:G,description:j,createdAt:H,updatedAt:H,toc:[{id:I,depth:a,text:I},{id:J,depth:a,text:J},{id:K,depth:a,text:K},{id:L,depth:a,text:L},{id:"sorted-set",depth:a,text:"sorted set"},{id:"rdb",depth:a,text:"RDB"},{id:"aof",depth:a,text:"AOF"},{id:M,depth:a,text:M},{id:N,depth:a,text:N}],body:O,excerpt:O,dir:P,path:"\u002F中间件\u002F20200603\u002FRedis总结",extension:e,title:G,url:"\u002Fblog-code\u002Fview\u002F中间件\u002F20200603\u002FRedis总结",createAt:new Date(1591142400000),updateAt:new Date(1591142400000),attributes:[{name:f,value:Q},{name:g,value:Q},{name:h,value:P,url:"\u002Fblog-code\u002Fpage\u002F中间件\u002F20200603\u002F1\u002F"}]},{slug:R,description:j,createdAt:m,updatedAt:m,toc:[],body:S,excerpt:S,dir:T,path:"\u002F框架\u002F20200602\u002FTaf框架",extension:e,title:R,url:"\u002Fblog-code\u002Fview\u002F框架\u002F20200602\u002FTaf框架",createAt:new Date(1591056000000),updateAt:new Date(1591056000000),attributes:[{name:f,value:n},{name:g,value:n},{name:h,value:T,url:"\u002Fblog-code\u002Fpage\u002F框架\u002F20200602\u002F1\u002F"}]},{slug:U,description:"ES的数据结构：index -\u003E type -\u003E document -\u003E field。\n每一个索引会被分为多个shard，每个shard保存部分数据，分别放在不同节点上。\nshard有主shard允许读写，从shard允许读，从shard会与主shard同步数据。\nES集群会选举出一个主节点，负责维护索引元数据和管理主shard和从shard。\nES写数据请求：客户端选择一个节点作为自己的协调节点，协调节点根据请求文档进行路由。\n把请求转发给主shard所在的节点，当从shard也同步完成了，协调节点才会给客户端响应。\nES读数据请求：客户端选择一个节点作为自己的协调节点，协调节点根据请求文档进行路由。\n在主shard和全部从shard节点上轮询一个节点进行请求转发，然后把结果返回给客户端。",createdAt:m,updatedAt:m,toc:[],body:V,excerpt:V,dir:W,path:"\u002F中间件\u002F20200602\u002FElasticSearch总结",extension:e,title:U,url:"\u002Fblog-code\u002Fview\u002F中间件\u002F20200602\u002FElasticSearch总结",createAt:new Date(1591056000000),updateAt:new Date(1591056000000),attributes:[{name:f,value:n},{name:g,value:n},{name:h,value:W,url:"\u002Fblog-code\u002Fpage\u002F中间件\u002F20200602\u002F1\u002F"}]},{slug:X,description:j,createdAt:Y,updatedAt:Y,toc:[{id:Z,depth:a,text:Z},{id:"kafka端",depth:a,text:"Kafka端"},{id:_,depth:a,text:_}],body:$,excerpt:$,dir:aa,path:"\u002F中间件\u002F20200601\u002FMQ总结",extension:e,title:X,url:"\u002Fblog-code\u002Fview\u002F中间件\u002F20200601\u002FMQ总结",createAt:new Date(1590969600000),updateAt:new Date(1590969600000),attributes:[{name:f,value:ab},{name:g,value:ab},{name:h,value:aa,url:"\u002Fblog-code\u002Fpage\u002F中间件\u002F20200601\u002F1\u002F"}]},{slug:ac,description:ad,createdAt:ae,updatedAt:ae,toc:[],body:af,excerpt:af,dir:ag,path:"\u002Fjava\u002F20200518\u002FJava引用类型",extension:e,title:ac,url:"\u002Fblog-code\u002Fview\u002Fjava\u002F20200518\u002FJava引用类型",createAt:new Date(1589760000000),updateAt:new Date(1589760000000),attributes:[{name:f,value:ah},{name:g,value:ah},{name:h,value:ag,url:"\u002Fblog-code\u002Fpage\u002Fjava\u002F20200518\u002F1\u002F"}]},{slug:ai,description:j,createdAt:aj,updatedAt:aj,toc:[{id:ak,depth:a,text:ak},{id:al,depth:a,text:al},{id:am,depth:a,text:am},{id:an,depth:a,text:an},{id:"serial与serial-old",depth:a,text:"Serial与Serial Old"},{id:"parnew",depth:a,text:"ParNew"},{id:"parallel-scavenge与parallel-old",depth:a,text:"Parallel Scavenge与Parallel Old"},{id:"cms收集器",depth:a,text:"CMS收集器"},{id:"g1收集器",depth:a,text:"G1收集器"},{id:"g1内存划分",depth:k,text:"G1内存划分"},{id:"remembered-set",depth:k,text:"Remembered Set"},{id:"g1回收步骤",depth:k,text:"G1回收步骤"}],body:ao,excerpt:ao,dir:ap,path:"\u002Fjava\u002F20200515\u002F垃圾收集算法与垃圾收集器",extension:e,title:ai,url:"\u002Fblog-code\u002Fview\u002Fjava\u002F20200515\u002F垃圾收集算法与垃圾收集器",createAt:new Date(1589500800000),updateAt:new Date(1589500800000),attributes:[{name:f,value:aq},{name:g,value:aq},{name:h,value:ap,url:"\u002Fblog-code\u002Fpage\u002Fjava\u002F20200515\u002F1\u002F"}]},{slug:ar,description:"本文主要是聊聊 Linux 中的五种 IO 模型的概括。",createdAt:as,updatedAt:as,toc:[],body:at,excerpt:at,dir:au,path:"\u002F操作系统\u002F20200513\u002FLinux的IO模型",extension:e,title:ar,url:"\u002Fblog-code\u002Fview\u002F操作系统\u002F20200513\u002FLinux的IO模型",createAt:new Date(1589328000000),updateAt:new Date(1589328000000),attributes:[{name:f,value:av},{name:g,value:av},{name:h,value:au,url:"\u002Fblog-code\u002Fpage\u002F操作系统\u002F20200513\u002F1\u002F"}]},{slug:aw,description:j,createdAt:ax,updatedAt:ax,toc:[],body:ay,excerpt:ay,dir:az,path:"\u002F算法\u002F20200512\u002F一些位运算",extension:e,title:aw,url:"\u002Fblog-code\u002Fview\u002F算法\u002F20200512\u002F一些位运算",createAt:new Date(1589241600000),updateAt:new Date(1589241600000),attributes:[{name:f,value:aA},{name:g,value:aA},{name:h,value:az,url:"\u002Fblog-code\u002Fpage\u002F算法\u002F20200512\u002F1\u002F"}]}]}],fetch:{},mutations:void 0}}(2,"text","element","root",".md","createAt","updateAt","sort","p","",3,"\n","2020-06-02T00:00:00.000Z","2020-06-02","Java并发","2020-06-17T00:00:00.000Z","偏向锁","获取轻量级锁","释放轻量级锁","重量级锁","锁消除","锁优化","锁升级与锁降级",{},"a","\u002Fjava\u002F20200617","2020-06-17","MySQL总结","2020-06-09T00:00:00.000Z",{},"\u002F中间件\u002F20200609","2020-06-09","Redis总结","2020-06-03T00:00:00.000Z","string","list","hash","set","哨兵集群选举","哨兵集群的数据丢失",{},"\u002F中间件\u002F20200603","2020-06-03","Taf框架",{},"\u002F框架\u002F20200602","ElasticSearch总结",{},"\u002F中间件\u002F20200602","MQ总结","2020-06-01T00:00:00.000Z","生产端","消费端",{},"\u002F中间件\u002F20200601","2020-06-01","Java引用类型","java除了基本类型以外，其余的都是引用类型。\n而java的引用类型有四种：强引用，软引用，弱引用和虚引用。\n除了强引用外，其余的引用都是抽象类Reference的子类。","2020-05-18T00:00:00.000Z",{},"\u002Fjava\u002F20200518","2020-05-18","垃圾收集算法与垃圾收集器","2020-05-15T00:00:00.000Z","标记-清除算法","标记-整理算法","复制算法","概念",{},"\u002Fjava\u002F20200515","2020-05-15","Linux的IO模型","2020-05-13T00:00:00.000Z",{},"\u002F操作系统\u002F20200513","2020-05-13","一些位运算","2020-05-12T00:00:00.000Z",{},"\u002F算法\u002F20200512","2020-05-12")));