__NUXT_JSONP__("/page/协议/1", (function(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,_,$,aa,ab,ac,ad,ae,af,ag,ah,ai,aj,ak,al,am,an,ao,ap,aq,ar,as,at,au){z.type=g;z.children=[{type:a,tag:m,props:{id:A},children:[{type:a,tag:n,props:{ariaHidden:o,href:"#%E5%89%8D%E8%A8%80",tabIndex:p},children:[{type:a,tag:q,props:{className:[r,s]},children:[]}]},{type:b,value:A}]},{type:b,value:d},{type:a,tag:f,props:{},children:[{type:b,value:"貌似我许久以前去尝试去看过OAuth2.0的东西，但看了一下这么鬼复杂，又这个请求那个请求，这个token那个token，哪用得着这么复杂~~（看不懂才对）~~，然后就放弃了。"}]}];R.type=g;R.children=[];aa.type=g;aa.children=[{type:a,tag:m,props:{id:ab},children:[{type:a,tag:n,props:{ariaHidden:o,href:"#%E4%BD%95%E4%B8%BA%E5%9F%9F",tabIndex:p},children:[{type:a,tag:q,props:{className:[r,s]},children:[]}]},{type:b,value:ab}]},{type:b,value:d},{type:a,tag:f,props:{},children:[{type:b,value:"这里的域指的并不是域名，而是协议、主机地址和端口的唯一组合，即协议，主机地址和端口其中一个不一样那就是另外一个域了。"}]},{type:b,value:d},{type:a,tag:m,props:{id:ac},children:[{type:a,tag:n,props:{ariaHidden:o,href:"#%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98%E4%B8%BA%E4%BD%95%E8%80%8C%E6%9D%A5",tabIndex:p},children:[{type:a,tag:q,props:{className:[r,s]},children:[]}]},{type:b,value:ac}]},{type:b,value:d},{type:a,tag:f,props:{},children:[{type:b,value:"浏览器为了安全，避免网页被嵌入恶意代码，限制来源于某个域的脚本只能向其来源的域发起ajax请求，并且脚本也无法获取别的域的cookie，DOM等资源，这个叫同源策略。例如我在"},{type:a,tag:"code",props:{},children:[{type:b,value:"http:\u002F\u002Fwww.alipay.com\u002F"}]},{type:b,value:"里嵌入了个检测你支付宝密码的脚本，发现你输入密码，就把你的密码发送到我的域名下，但由于我的域名跟阿里的域名不在同一个域里面，这样子偷偷发送密码的请求就会被浏览器拦截住。"}]},{type:b,value:d},{type:a,tag:f,props:{},children:[{type:b,value:"接下来以来源于a.com域（简称a域）的脚本向b.com（简称b域）发起请求作为情景来解释"}]}];ah.type=g;ah.children=[];am.type=g;am.children=[{type:a,tag:m,props:{id:"uriurl与http"},children:[{type:a,tag:n,props:{ariaHidden:o,href:"#uriurl%E4%B8%8Ehttp",tabIndex:p},children:[{type:a,tag:q,props:{className:[r,s]},children:[]}]},{type:b,value:"URI,URL与HTTP"}]},{type:b,value:d},{type:a,tag:f,props:{},children:[{type:b,value:"URI，统一资源标识符，个人理解是一种概念性的东西，即能唯一表示一个资源的都可以叫URI，例如给每个资源起一个唯一的编号。而URL则是URI的一种实现。URL也能唯一定位一个资源。而HTTP又是URL的一种实现。"}]},{type:b,value:d},{type:a,tag:f,props:{},children:[{type:b,value:"http是基于TCP\u002FIP协议的，应用层的，无连接无状态的协议。"}]}];ar.type=g;ar.children=[{type:a,tag:m,props:{id:as},children:[{type:a,tag:n,props:{ariaHidden:o,href:"#%E7%A3%81%E5%8A%9B%E9%93%BE%E6%8E%A5%E7%9A%84%E7%A5%9E%E5%A5%87",tabIndex:p},children:[{type:a,tag:q,props:{className:[r,s]},children:[]}]},{type:b,value:as}]},{type:b,value:d},{type:a,tag:f,props:{},children:[{type:b,value:"老司机都懂得擦擦键盘来传播磁力链接。一直很好奇为什么磁力链接这种完全去中心化的技术怎么就凭一串毫无规律的字符串，就在浩瀚的互联网里找到我们想要下载的数据呢。p2p不同于S\u002FC，假设我要下载京紫第一集，在S\u002FC模式下，我只需要知道b站有京紫，只要我找到b站就有京紫看，寻找b站只需要在浏览器输入bilibili.com便可以定位到b站了。如果我是通过bt下载京紫来看，可没有“京紫第一集.com”的网址让我去打开。网络里有N多个地址，这些地址后面不一定都有资源，就算有资源，也不一定有京紫呀，难不成我要各个地址都问一下？这岂不是大海捞针？"}]},{type:b,value:d},{type:a,tag:f,props:{},children:[{type:b,value:"说实在话，在网上看了那么多文章还是似懂非懂，但也再次记录一下我的理解吧。"}]}];return {data:[{siteConfig:{siteName:"无名の窝",siteHost:"https:\u002F\u002Fcellargalaxy.github.io",basePath:"\u002Fblog-code\u002F",navs:[{text:"文章",url:t},{text:"归档",url:"\u002Fblog-code\u002Farchive\u002F0\u002F"},{text:"画画",url:"\u002Fblog-code\u002Fhtml\u002Fhua.html"},{text:"开源",url:"\u002Fblog-code\u002Fhttps:\u002Fgithub.com\u002Fcellargalaxy\u002Fblog-vue"}],pageSize:u,urlReplace:{"^/file/blog/code":"https:\u002F\u002Foracleamd1.dynv6.net\u002Ffile\u002Ffile\u002Fblog\u002Fcode"},backgroundImage:{duration:v,fade:1000,images:[{url:"https:\u002F\u002Fi.loli.net\u002F2020\u002F01\u002F25\u002FcofTzDQXitjeVZ6.jpg",description:w,type:e},{url:"https:\u002F\u002Fi.loli.net\u002F2020\u002F01\u002F25\u002FsfaRJ2lVeM3NDbE.jpg",description:w,type:e},{url:"https:\u002F\u002Fi.loli.net\u002F2020\u002F01\u002F26\u002FKybiTdftam5Su7x.jpg",description:"青春猪头-双葉理央",type:e},{url:"https:\u002F\u002Fi.loli.net\u002F2020\u002F09\u002F08\u002FxdX73nfs24qgOYk.jpg",description:"京吹-明日香,久美子",type:e},{url:"https:\u002F\u002Fi.loli.net\u002F2020\u002F02\u002F14\u002FMAiruNcEFW2HYtg.jpg",description:"终将成为你-七海灯子,小糸侑",type:e},{url:"https:\u002F\u002Fi.loli.net\u002F2020\u002F02\u002F05\u002FEojdAxTDJsFpbPw.jpg",description:"玉子市场-北白川玉子",type:e},{url:"https:\u002F\u002Fi.loli.net\u002F2020\u002F01\u002F31\u002FAXxwJDRS9fmN2uU.jpg",description:"fate_hf-弓道馆",type:e},{url:"https:\u002F\u002Fi.loli.net\u002F2020\u002F02\u002F01\u002FaHhVObpJus6dnM4.jpg",description:"fate_hf-樱花树",type:e}]}},homeConfig:{brandInterval:v,brands:[{imageUrl:"https:\u002F\u002Fi.loli.net\u002F2020\u002F01\u002F21\u002FmMEAnwY5XPC2pFb.jpg",title:"日常",texts:["我们所度过的每个平凡的日常，也许就是连续不断发生的奇迹。","日々、私たちが過ごしている日常は、実は奇跡の連続なのかもしれない。"]},{imageUrl:"https:\u002F\u002Fi.loli.net\u002F2020\u002F04\u002F19\u002FH1MmXb9xPcYEhT2.jpg",title:"昨日之歌",texts:["时间梭梭箭如飞，人道漫漫步蹒跚","人間そんな変わるもんじゃないのに、月日ばっかどんどん過ぎて"]}],navs:[{text:"Github",url:"https:\u002F\u002Fgithub.com\u002Fcellargalaxy\u002F"}]},pageFootConfig:{lines:[[{text:"Copyright © 2017-? ."},{text:"备案？不存在的"},{text:"Powered by Nuxt.js & Github"}]]},buildTime:new Date(1684602599966),rootPath:t,crumbs:[{text:"协议",url:"\u002Fblog-code\u002Fpage\u002F协议\u002F1\u002F"}],pageSize:u,total:6,currentPage:1,files:[{slug:x,description:"前言\n貌似我许久以前去尝试去看过OAuth2.0的东西，但看了一下这么鬼复杂，又这个请求那个请求，这个token那个token，哪用得着这么复杂~~（看不懂才对）~~，然后就放弃了。",createdAt:y,updatedAt:y,toc:[],body:z,excerpt:z,dir:B,path:"\u002F协议\u002F20191111\u002FOAuth2.0协议",extension:h,title:x,url:"\u002Fblog-code\u002Fview\u002F协议\u002F20191111\u002FOAuth2.0协议\u002F",createAt:new Date(1573430400000),updateAt:new Date(1573430400000),attributes:[{name:i,value:C},{name:j,value:C},{name:k,value:B,url:"\u002Fblog-code\u002Fpage\u002F协议\u002F20191111\u002F1\u002F"}]},{slug:D,description:E,createdAt:F,updatedAt:F,toc:[{id:G,depth:c,text:G},{id:H,depth:c,text:H},{id:I,depth:c,text:I},{id:J,depth:c,text:J},{id:K,depth:c,text:K},{id:L,depth:c,text:L},{id:M,depth:c,text:M},{id:"arp",depth:c,text:"ARP"},{id:"icmp",depth:c,text:"ICMP"},{id:"udp",depth:c,text:"UDP"},{id:"tcp",depth:c,text:"TCP"},{id:N,depth:l,text:N},{id:"连续arq协议滑动窗口协议",depth:l,text:"连续ARQ协议\u002F滑动窗口协议"},{id:O,depth:l,text:O},{id:P,depth:l,text:P},{id:Q,depth:l,text:Q},{id:"tcp的三次握手和四次分手",depth:l,text:"TCP的三次握手和四次分手"}],body:R,excerpt:R,dir:S,path:"\u002F协议\u002F20180916\u002F计算机网络复习笔记",extension:h,title:D,url:"\u002Fblog-code\u002Fview\u002F协议\u002F20180916\u002F计算机网络复习笔记\u002F",createAt:new Date(1537056000000),updateAt:new Date(1537056000000),attributes:[{name:i,value:T},{name:j,value:T},{name:k,value:S,url:"\u002Fblog-code\u002Fpage\u002F协议\u002F20180916\u002F1\u002F"}]},{slug:U,description:"何为域\n这里的域指的并不是域名，而是协议、主机地址和端口的唯一组合，即协议，主机地址和端口其中一个不一样那就是另外一个域了。\n跨域问题为何而来\n浏览器为了安全，避免网页被嵌入恶意代码，限制来源于某个域的脚本只能向其来源的域发起ajax请求，并且脚本也无法获取别的域的cookie，DOM等资源，这个叫同源策略。例如我在http:\u002F\u002Fwww.alipay.com\u002F里嵌入了个检测你支付宝密码的脚本，发现你输入密码，就把你的密码发送到我的域名下，但由于我的域名跟阿里的域名不在同一个域里面，这样子偷偷发送密码的请求就会被浏览器拦截住。\n接下来以来源于a.com域（简称a域）的脚本向b.com（简称b域）发起请求作为情景来解释",createdAt:V,updatedAt:V,toc:[{id:W,depth:c,text:W},{id:X,depth:c,text:X},{id:Y,depth:c,text:Y},{id:Z,depth:c,text:Z},{id:_,depth:c,text:_},{id:$,depth:c,text:$}],body:aa,excerpt:aa,dir:ad,path:"\u002F协议\u002F20180802\u002FJSONP和CORS的跨域请求",extension:h,title:U,url:"\u002Fblog-code\u002Fview\u002F协议\u002F20180802\u002FJSONP和CORS的跨域请求\u002F",createAt:new Date(1533168000000),updateAt:new Date(1533168000000),attributes:[{name:i,value:ae},{name:j,value:ae},{name:k,value:ad,url:"\u002Fblog-code\u002Fpage\u002F协议\u002F20180802\u002F1\u002F"}]},{slug:af,description:E,createdAt:ag,updatedAt:ag,toc:[],body:ah,excerpt:ah,dir:ai,path:"\u002F协议\u002F20180318\u002FTCP三次握手与四次分手",extension:h,title:af,url:"\u002Fblog-code\u002Fview\u002F协议\u002F20180318\u002FTCP三次握手与四次分手\u002F",createAt:new Date(1521331200000),updateAt:new Date(1521331200000),attributes:[{name:i,value:aj},{name:j,value:aj},{name:k,value:ai,url:"\u002Fblog-code\u002Fpage\u002F协议\u002F20180318\u002F1\u002F"}]},{slug:ak,description:"URI,URL与HTTP\nURI，统一资源标识符，个人理解是一种概念性的东西，即能唯一表示一个资源的都可以叫URI，例如给每个资源起一个唯一的编号。而URL则是URI的一种实现。URL也能唯一定位一个资源。而HTTP又是URL的一种实现。\nhttp是基于TCP\u002FIP协议的，应用层的，无连接无状态的协议。",createdAt:al,updatedAt:al,toc:[{id:"get请求方法的请求报文",depth:c,text:"GET请求方法的请求报文"},{id:"post请求方法的请求报文",depth:c,text:"POST请求方法的请求报文"},{id:"http状态码",depth:c,text:"HTTP状态码"},{id:"mime-type",depth:c,text:"MIME type"}],body:am,excerpt:am,dir:an,path:"\u002F协议\u002F20180314\u002FHTTP协议",extension:h,title:ak,url:"\u002Fblog-code\u002Fview\u002F协议\u002F20180314\u002FHTTP协议\u002F",createAt:new Date(1520985600000),updateAt:new Date(1520985600000),attributes:[{name:i,value:ao},{name:j,value:ao},{name:k,value:an,url:"\u002Fblog-code\u002Fpage\u002F协议\u002F20180314\u002F1\u002F"}]},{slug:ap,description:"磁力链接的神奇\n老司机都懂得擦擦键盘来传播磁力链接。一直很好奇为什么磁力链接这种完全去中心化的技术怎么就凭一串毫无规律的字符串，就在浩瀚的互联网里找到我们想要下载的数据呢。p2p不同于S\u002FC，假设我要下载京紫第一集，在S\u002FC模式下，我只需要知道b站有京紫，只要我找到b站就有京紫看，寻找b站只需要在浏览器输入bilibili.com便可以定位到b站了。如果我是通过bt下载京紫来看，可没有“京紫第一集.com”的网址让我去打开。网络里有N多个地址，这些地址后面不一定都有资源，就算有资源，也不一定有京紫呀，难不成我要各个地址都问一下？这岂不是大海捞针？\n说实在话，在网上看了那么多文章还是似懂非懂，但也再次记录一下我的理解吧。",createdAt:aq,updatedAt:aq,toc:[],body:ar,excerpt:ar,dir:at,path:"\u002F协议\u002F20180126\u002F初探磁力链接的原理",extension:h,title:ap,url:"\u002Fblog-code\u002Fview\u002F协议\u002F20180126\u002F初探磁力链接的原理\u002F",createAt:new Date(1516924800000),updateAt:new Date(1516924800000),attributes:[{name:i,value:au},{name:j,value:au},{name:k,value:at,url:"\u002Fblog-code\u002Fpage\u002F协议\u002F20180126\u002F1\u002F"}]}]}],fetch:{},mutations:void 0}}("element","text",2,"\n","wide","p","root",".md","createAt","updateAt","sort",3,"h1","a","true",-1,"span","icon","icon-link","\u002Fblog-code\u002Fpage\u002F1\u002F",10,10000,"青春猪头-牧之原翔子-江之岛","OAuth2.0协议","2019-11-11T00:00:00.000Z",{},"前言","\u002F协议\u002F20191111","2019-11-11","计算机网络复习笔记","","2018-09-16T00:00:00.000Z","网络层次","网际协议ip","虚拟互联网络","ip地址分类","划分子网","ip数据报","ip层转发分组流程","等待停止协议","超时重传","流量控制","拥塞控制",{},"\u002F协议\u002F20180916","2018-09-16","JSONP和CORS的跨域请求","2018-08-02T00:00:00.000Z","简单请求的请求","简单请求的响应","预检请求的请求","预检请求的回应","实际请求的请求","实际请求的响应",{},"何为域","跨域问题为何而来","\u002F协议\u002F20180802","2018-08-02","TCP三次握手与四次分手","2018-03-18T00:00:00.000Z",{},"\u002F协议\u002F20180318","2018-03-18","HTTP协议","2018-03-14T00:00:00.000Z",{},"\u002F协议\u002F20180314","2018-03-14","初探磁力链接的原理","2018-01-26T00:00:00.000Z",{},"磁力链接的神奇","\u002F协议\u002F20180126","2018-01-26")));