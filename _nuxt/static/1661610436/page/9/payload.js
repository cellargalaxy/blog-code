__NUXT_JSONP__("/page/9", (function(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,_,$,aa,ab,ac,ad,ae,af,ag,ah,ai,aj,ak,al,am,an,ao,ap,aq,ar,as,at,au,av,aw,ax,ay,az,aA,aB,aC,aD,aE,aF){x.type=c;x.children=[];C.type=c;C.children=[{type:b,tag:D,props:{id:"java面向对象"},children:[{type:b,tag:n,props:{ariaHidden:E,href:"#java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1",tabIndex:F},children:[{type:b,tag:G,props:{className:[H,I]},children:[]}]},{type:a,value:"Java面向对象"}]},{type:a,value:i},{type:b,tag:m,props:{},children:[{type:a,value:"Java面向对象有三大特点：封装，继承，多态。"}]},{type:a,value:i},{type:b,tag:"ul",props:{},children:[{type:a,value:i},{type:b,tag:q,props:{},children:[{type:a,value:"封装是把数据和操作隐藏到对象里面，无法看到对象是什么实现的，对象只向外界暴露最简单的接口。封装通过private，default，protected和public来控制封装和访问。"}]},{type:a,value:i},{type:b,tag:q,props:{},children:[{type:a,value:"继承是子类复用父类的代码。使得子类具有父类的全部行为和特性，但也能修改父类的行为和特性或者拓展自己新的行为和特性。java的类是单继承，接口是多继承。"}]},{type:a,value:i},{type:b,tag:q,props:{},children:[{type:a,value:"多态使得不同的子类对同一个请求可是有不同的响应，并且调用者不需要知道其实现是哪个子类的版本。多态分为编译时多态（重载）和运行时多态（重写）。"}]},{type:a,value:i}]}];N.type=c;N.children=[];Q.type=c;Q.children=[{type:b,tag:m,props:{},children:[{type:a,value:"JDBC是通过"},{type:b,tag:l,props:{},children:[{type:a,value:"Class.forName(String)"}]},{type:a,value:"反射加载所需的驱动类。然后就可以通过jdk自带的"},{type:b,tag:l,props:{},children:[{type:a,value:"DriverManager"}]},{type:a,value:"的静态方法获取一个数据库连接："},{type:b,tag:l,props:{},children:[{type:a,value:"Connection"}]},{type:a,value:"。通过这个Connection我们就可以对数据库进行增删查改了。要对数据库进行增删查改还是离不开sql。需要使用sql，调用Connection的方法创建一个"},{type:b,tag:l,props:{},children:[{type:a,value:"Statement"}]},{type:a,value:"或者"},{type:b,tag:l,props:{},children:[{type:a,value:"PreparedStatement"}]},{type:a,value:"对象。创建Statement就利用一句完整的sql就好了，但是不防止注入。而PreparedStatement的sql在参数上用问号代替，作为占位符。之后再填充这些占位符，其占位符是用下标指定，下标从1开始，是防止注入的。创建好PreparedStatement执行。在这里可以设置事务。如果是select，执行后返回一个"},{type:b,tag:l,props:{},children:[{type:a,value:"ResultSet"}]},{type:a,value:"对象作为返回结果。可以通过这个结果获取列名，元组的数据等。如果是insert，delete或者update，会返回一个int，表示受此命令影响的行数。"}]}];U.type=c;U.children=[{type:b,tag:m,props:{},children:[{type:a,value:"简单明了入门Netty，还是看官方文档来的好："},{type:b,tag:n,props:{href:"https:\u002F\u002Fnetty.io\u002Fwiki\u002Fuser-guide-for-4.x.html",rel:[V,W,X],target:Y,title:Z},children:[{type:a,value:Z}]},{type:a,value:"。接下来是我看我这篇文档之后的加工，想看的深一点可以看"},{type:b,tag:n,props:{href:"https:\u002F\u002Fsylvanassun.github.io\u002F2017\u002F11\u002F30\u002F2017-11-30-netty_introduction\u002F",rel:[V,W,X],target:Y,title:_},children:[{type:a,value:_}]},{type:a,value:"。最好是有些NIO的概念和基础。依照官方文档进行改进，下面代码是要实现一个时间服务器。功能为客户端连接到服务端时，服务端主动发送一个long时间戳给客户端，客户端收到这个时间后打印出来。并且客户端向服务端发送自己的long时间戳后关闭连接，服务器打印收到客户端的时间后也关闭连接。"}]}];ad.type=c;ad.children=[];ai.type=c;ai.children=[{type:b,tag:D,props:{id:"method对象"},children:[{type:b,tag:n,props:{ariaHidden:E,href:"#method%E5%AF%B9%E8%B1%A1",tabIndex:F},children:[{type:b,tag:G,props:{className:[H,I]},children:[]}]},{type:a,value:"Method对象"}]},{type:a,value:i},{type:b,tag:m,props:{},children:[{type:a,value:"既然是java的反射，就躲不开class对象。class对象保存着对应的Method，Field，Constructor。接下来以Method为例~~（因为我只看了Method）~~。"}]},{type:a,value:i},{type:b,tag:m,props:{},children:[{type:a,value:"不知为何，可能是为了安全把，class并不会直接暴露Method，这个Method对象叫做root对象。而是当需要获取这个rootMethod时，再new一个Method代理这个rootMethod。因此每次获取的Method对象都是新的对象。"}]}];at.type=c;at.children=[];ay.type=c;ay.children=[];aD.type=c;aD.children=[];return {data:[{siteConfig:{siteName:"无名の窝",siteHost:"https:\u002F\u002Fcellargalaxy.github.io",basePath:"\u002Fblog-code\u002F",navs:[{text:"文章",url:r},{text:"归档",url:"\u002Fblog-code\u002Farchive\u002F0\u002F"},{text:"画画",url:"\u002Fblog-code\u002Fhtml\u002Fhua.html"},{text:"开源",url:"\u002Fblog-code\u002Fhttps:\u002Fgithub.com\u002Fcellargalaxy\u002Fblog-vue"}],pageSize:s,urlReplace:{"^/file/blog/code":"https:\u002F\u002Foracleamd1.dynv6.net\u002Ffile\u002Ffile\u002Fblog\u002Fcode"},backgroundImage:{duration:t,fade:1000,images:[{url:"https:\u002F\u002Fi.loli.net\u002F2020\u002F01\u002F25\u002FcofTzDQXitjeVZ6.jpg",description:u,type:h},{url:"https:\u002F\u002Fi.loli.net\u002F2020\u002F01\u002F25\u002FsfaRJ2lVeM3NDbE.jpg",description:u,type:h},{url:"https:\u002F\u002Fi.loli.net\u002F2020\u002F01\u002F26\u002FKybiTdftam5Su7x.jpg",description:"青春猪头-双葉理央",type:h},{url:"https:\u002F\u002Fi.loli.net\u002F2020\u002F09\u002F08\u002FxdX73nfs24qgOYk.jpg",description:"京吹-明日香,久美子",type:h},{url:"https:\u002F\u002Fi.loli.net\u002F2020\u002F02\u002F14\u002FMAiruNcEFW2HYtg.jpg",description:"终将成为你-七海灯子,小糸侑",type:h},{url:"https:\u002F\u002Fi.loli.net\u002F2020\u002F02\u002F05\u002FEojdAxTDJsFpbPw.jpg",description:"玉子市场-北白川玉子",type:h},{url:"https:\u002F\u002Fi.loli.net\u002F2020\u002F01\u002F31\u002FAXxwJDRS9fmN2uU.jpg",description:"fate_hf-弓道馆",type:h},{url:"https:\u002F\u002Fi.loli.net\u002F2020\u002F02\u002F01\u002FaHhVObpJus6dnM4.jpg",description:"fate_hf-樱花树",type:h}]}},homeConfig:{brandInterval:t,brands:[{imageUrl:"https:\u002F\u002Fi.loli.net\u002F2020\u002F01\u002F21\u002FmMEAnwY5XPC2pFb.jpg",title:"日常",texts:["我们所度过的每个平凡的日常，也许就是连续不断发生的奇迹。","日々、私たちが過ごしている日常は、実は奇跡の連続なのかもしれない。"]},{imageUrl:"https:\u002F\u002Fi.loli.net\u002F2020\u002F04\u002F19\u002FH1MmXb9xPcYEhT2.jpg",title:"昨日之歌",texts:["时间梭梭箭如飞，人道漫漫步蹒跚","人間そんな変わるもんじゃないのに、月日ばっかどんどん過ぎて"]}],navs:[{text:"Github",url:"https:\u002F\u002Fgithub.com\u002Fcellargalaxy\u002F"}]},pageFootConfig:{lines:[[{text:"Copyright © 2017-? ."},{text:"备案？不存在的"},{text:"Powered by Nuxt.js & Github"}]]},buildTime:new Date(1661610451586),rootPath:r,crumbs:[],pageSize:s,total:117,currentPage:9,files:[{slug:v,description:k,createdAt:w,updatedAt:w,toc:[],body:x,excerpt:x,dir:y,path:"\u002F折腾\u002F20180515\u002Fmongodb的Replica Set主从配置",extension:d,title:v,url:"\u002Fblog-code\u002Fview\u002F折腾\u002F20180515\u002Fmongodb的Replica Set主从配置\u002F",createAt:new Date(1526342400000),updateAt:new Date(1526342400000),attributes:[{name:e,value:z},{name:f,value:z},{name:g,value:y,url:"\u002Fblog-code\u002Fpage\u002F折腾\u002F20180515\u002F1\u002F"}]},{slug:A,description:"Java面向对象\nJava面向对象有三大特点：封装，继承，多态。\n\n封装是把数据和操作隐藏到对象里面，无法看到对象是什么实现的，对象只向外界暴露最简单的接口。封装通过private，default，protected和public来控制封装和访问。\n继承是子类复用父类的代码。使得子类具有父类的全部行为和特性，但也能修改父类的行为和特性或者拓展自己新的行为和特性。java的类是单继承，接口是多继承。\n多态使得不同的子类对同一个请求可是有不同的响应，并且调用者不需要知道其实现是哪个子类的版本。多态分为编译时多态（重载）和运行时多态（重写）。\n",createdAt:B,updatedAt:B,toc:[],body:C,excerpt:C,dir:J,path:"\u002Fjava\u002F20180514\u002FExec的源码乱看与杂七杂八",extension:d,title:A,url:"\u002Fblog-code\u002Fview\u002Fjava\u002F20180514\u002FExec的源码乱看与杂七杂八\u002F",createAt:new Date(1526256000000),updateAt:new Date(1526256000000),attributes:[{name:e,value:K},{name:f,value:K},{name:g,value:J,url:"\u002Fblog-code\u002Fpage\u002Fjava\u002F20180514\u002F1\u002F"}]},{slug:L,description:k,createdAt:o,updatedAt:o,toc:[{id:M,depth:j,text:M},{id:"innodb的锁",depth:j,text:"InnoDB的锁"}],body:N,excerpt:N,dir:O,path:"\u002F中间件\u002F20180510\u002Fmysql杂七杂八",extension:d,title:L,url:"\u002Fblog-code\u002Fview\u002F中间件\u002F20180510\u002Fmysql杂七杂八\u002F",createAt:new Date(1525910400000),updateAt:new Date(1525910400000),attributes:[{name:e,value:p},{name:f,value:p},{name:g,value:O,url:"\u002Fblog-code\u002Fpage\u002F中间件\u002F20180510\u002F1\u002F"}]},{slug:P,description:"JDBC是通过Class.forName(String)反射加载所需的驱动类。然后就可以通过jdk自带的DriverManager的静态方法获取一个数据库连接：Connection。通过这个Connection我们就可以对数据库进行增删查改了。要对数据库进行增删查改还是离不开sql。需要使用sql，调用Connection的方法创建一个Statement或者PreparedStatement对象。创建Statement就利用一句完整的sql就好了，但是不防止注入。而PreparedStatement的sql在参数上用问号代替，作为占位符。之后再填充这些占位符，其占位符是用下标指定，下标从1开始，是防止注入的。创建好PreparedStatement执行。在这里可以设置事务。如果是select，执行后返回一个ResultSet对象作为返回结果。可以通过这个结果获取列名，元组的数据等。如果是insert，delete或者update，会返回一个int，表示受此命令影响的行数。",createdAt:o,updatedAt:o,toc:[],body:Q,excerpt:Q,dir:R,path:"\u002Fjava\u002F20180510\u002FJDBC复习",extension:d,title:P,url:"\u002Fblog-code\u002Fview\u002Fjava\u002F20180510\u002FJDBC复习\u002F",createAt:new Date(1525910400000),updateAt:new Date(1525910400000),attributes:[{name:e,value:p},{name:f,value:p},{name:g,value:R,url:"\u002Fblog-code\u002Fpage\u002Fjava\u002F20180510\u002F1\u002F"}]},{slug:S,description:"简单明了入门Netty，还是看官方文档来的好：Netty.docs: User guide for 4.x。接下来是我看我这篇文档之后的加工，想看的深一点可以看Netty的那点事儿。最好是有些NIO的概念和基础。依照官方文档进行改进，下面代码是要实现一个时间服务器。功能为客户端连接到服务端时，服务端主动发送一个long时间戳给客户端，客户端收到这个时间后打印出来。并且客户端向服务端发送自己的long时间戳后关闭连接，服务器打印收到客户端的时间后也关闭连接。",createdAt:T,updatedAt:T,toc:[],body:U,excerpt:U,dir:$,path:"\u002Fjava\u002F20180509\u002FNetty学习",extension:d,title:S,url:"\u002Fblog-code\u002Fview\u002Fjava\u002F20180509\u002FNetty学习\u002F",createAt:new Date(1525824000000),updateAt:new Date(1525824000000),attributes:[{name:e,value:aa},{name:f,value:aa},{name:g,value:$,url:"\u002Fblog-code\u002Fpage\u002Fjava\u002F20180509\u002F1\u002F"}]},{slug:ab,description:k,createdAt:ac,updatedAt:ac,toc:[],body:ad,excerpt:ad,dir:ae,path:"\u002F数据结构\u002F20180508\u002F再看ConcurrentHashMap源码（1.7与1.8）",extension:d,title:ab,url:"\u002Fblog-code\u002Fview\u002F数据结构\u002F20180508\u002F再看ConcurrentHashMap源码（1.7与1.8）\u002F",createAt:new Date(1525737600000),updateAt:new Date(1525737600000),attributes:[{name:e,value:af},{name:f,value:af},{name:g,value:ae,url:"\u002Fblog-code\u002Fpage\u002F数据结构\u002F20180508\u002F1\u002F"}]},{slug:ag,description:"Method对象\n既然是java的反射，就躲不开class对象。class对象保存着对应的Method，Field，Constructor。接下来以Method为例~~（因为我只看了Method）~~。\n不知为何，可能是为了安全把，class并不会直接暴露Method，这个Method对象叫做root对象。而是当需要获取这个rootMethod时，再new一个Method代理这个rootMethod。因此每次获取的Method对象都是新的对象。",createdAt:ah,updatedAt:ah,toc:[],body:ai,excerpt:ai,dir:aj,path:"\u002Fjava\u002F20180430\u002Fjava反射源码",extension:d,title:ag,url:"\u002Fblog-code\u002Fview\u002Fjava\u002F20180430\u002Fjava反射源码\u002F",createAt:new Date(1525046400000),updateAt:new Date(1525046400000),attributes:[{name:e,value:ak},{name:f,value:ak},{name:g,value:aj,url:"\u002Fblog-code\u002Fpage\u002Fjava\u002F20180430\u002F1\u002F"}]},{slug:al,description:k,createdAt:am,updatedAt:am,toc:[{id:an,depth:j,text:an},{id:ao,depth:j,text:ao},{id:ap,depth:j,text:ap},{id:aq,depth:j,text:aq},{id:ar,depth:j,text:ar},{id:as,depth:j,text:as}],body:at,excerpt:at,dir:au,path:"\u002F其他\u002F20180421\u002F拖沓下来的各种笔试笔记",extension:d,title:al,url:"\u002Fblog-code\u002Fview\u002F其他\u002F20180421\u002F拖沓下来的各种笔试笔记\u002F",createAt:new Date(1524268800000),updateAt:new Date(1524268800000),attributes:[{name:e,value:av},{name:f,value:av},{name:g,value:au,url:"\u002Fblog-code\u002Fpage\u002F其他\u002F20180421\u002F1\u002F"}]},{slug:aw,description:k,createdAt:ax,updatedAt:ax,toc:[],body:ay,excerpt:ay,dir:az,path:"\u002Fjava\u002F20180418\u002FNIO学习笔记",extension:d,title:aw,url:"\u002Fblog-code\u002Fview\u002Fjava\u002F20180418\u002FNIO学习笔记\u002F",createAt:new Date(1524009600000),updateAt:new Date(1524009600000),attributes:[{name:e,value:aA},{name:f,value:aA},{name:g,value:az,url:"\u002Fblog-code\u002Fpage\u002Fjava\u002F20180418\u002F1\u002F"}]},{slug:aB,description:k,createdAt:aC,updatedAt:aC,toc:[],body:aD,excerpt:aD,dir:aE,path:"\u002F折腾\u002F20180412\u002Fvps重装系统的习惯性操作",extension:d,title:aB,url:"\u002Fblog-code\u002Fview\u002F折腾\u002F20180412\u002Fvps重装系统的习惯性操作\u002F",createAt:new Date(1523491200000),updateAt:new Date(1523491200000),attributes:[{name:e,value:aF},{name:f,value:aF},{name:g,value:aE,url:"\u002Fblog-code\u002Fpage\u002F折腾\u002F20180412\u002F1\u002F"}]}]}],fetch:{},mutations:void 0}}("text","element","root",".md","createAt","updateAt","sort","wide","\n",2,"","code","p","a","2018-05-10T00:00:00.000Z","2018-05-10","li","\u002Fblog-code\u002Fpage\u002F1\u002F",10,10000,"青春猪头-牧之原翔子-江之岛","mongodb的Replica Set主从配置","2018-05-15T00:00:00.000Z",{},"\u002F折腾\u002F20180515","2018-05-15","Exec的源码乱看与杂七杂八","2018-05-14T00:00:00.000Z",{},"h1","true",-1,"span","icon","icon-link","\u002Fjava\u002F20180514","2018-05-14","mysql杂七杂八","引擎的锁",{},"\u002F中间件\u002F20180510","JDBC复习",{},"\u002Fjava\u002F20180510","Netty学习","2018-05-09T00:00:00.000Z",{},"nofollow","noopener","noreferrer","_blank","Netty.docs: User guide for 4.x","Netty的那点事儿","\u002Fjava\u002F20180509","2018-05-09","再看ConcurrentHashMap源码（1.7与1.8）","2018-05-08T00:00:00.000Z",{},"\u002F数据结构\u002F20180508","2018-05-08","java反射源码","2018-04-30T00:00:00.000Z",{},"\u002Fjava\u002F20180430","2018-04-30","拖沓下来的各种笔试笔记","2018-04-21T00:00:00.000Z","接口","lambda表达式和函数式接口","容器接口","子接口","抽象容器类","实现类",{},"\u002F其他\u002F20180421","2018-04-21","NIO学习笔记","2018-04-18T00:00:00.000Z",{},"\u002Fjava\u002F20180418","2018-04-18","vps重装系统的习惯性操作","2018-04-12T00:00:00.000Z",{},"\u002F折腾\u002F20180412","2018-04-12")));