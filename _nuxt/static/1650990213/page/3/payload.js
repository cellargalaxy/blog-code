__NUXT_JSONP__("/page/3", (function(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,_,$,aa,ab,ac,ad,ae,af,ag,ah,ai,aj,ak,al,am,an,ao,ap,aq,ar,as,at,au,av,aw,ax,ay,az,aA,aB,aC,aD,aE,aF,aG,aH){r.type=d;r.children=[{type:c,tag:s,props:{id:t},children:[{type:c,tag:o,props:{ariaHidden:u,href:"#%E6%9C%8D%E5%8A%A1%E6%8E%A5%E5%85%A5",tabIndex:v},children:[{type:c,tag:w,props:{className:[x,y]},children:[]}]},{type:b,value:t}]},{type:b,value:j},{type:c,tag:i,props:{},children:[{type:b,value:"API网关最重要的功能就是提供服务的统一接入。\n通常是外部服务统一经过API网关请求到内部不同的服务。\n这样内部服务不会直接暴露在外部，保护了内部服务的安全。\n外部服务也只需要面向API网关进行对接即可，不用跟内部各种异构的服务打交道。"}]}];K.type=d;K.children=[{type:c,tag:s,props:{id:"java内存模型jmm"},children:[{type:c,tag:o,props:{ariaHidden:u,href:"#java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8Bjmm",tabIndex:v},children:[{type:c,tag:w,props:{className:[x,y]},children:[]}]},{type:b,value:"java内存模型(JMM)"}]},{type:b,value:j},{type:c,tag:i,props:{},children:[{type:b,value:"JMM模型下，每个线程都有自己的本地内存，线程对内存的操作也是先操作本地内存。\n之后才将本地内存的数据刷新到主内存里，让各个线程更新共享。"}]}];P.type=d;P.children=[];_.type=d;_.children=[];ac.type=d;ac.children=[];af.type=d;af.children=[{type:c,tag:i,props:{},children:[{type:b,value:"ES的数据结构：index -\u003E type -\u003E document -\u003E field。"}]},{type:b,value:j},{type:c,tag:i,props:{},children:[{type:b,value:"每一个索引会被分为多个shard，每个shard保存部分数据，分别放在不同节点上。\nshard有主shard允许读写，从shard允许读，从shard会与主shard同步数据。\nES集群会选举出一个主节点，负责维护索引元数据和管理主shard和从shard。"}]},{type:b,value:j},{type:c,tag:i,props:{},children:[{type:b,value:"ES写数据请求：客户端选择一个节点作为自己的协调节点，协调节点根据请求文档进行路由。\n把请求转发给主shard所在的节点，当从shard也同步完成了，协调节点才会给客户端响应。"}]},{type:b,value:j},{type:c,tag:i,props:{},children:[{type:b,value:"ES读数据请求：客户端选择一个节点作为自己的协调节点，协调节点根据请求文档进行路由。\n在主shard和全部从shard节点上轮询一个节点进行请求转发，然后把结果返回给客户端。"}]}];al.type=d;al.children=[];ar.type=d;ar.children=[{type:c,tag:i,props:{},children:[{type:b,value:ap}]}];aA.type=d;aA.children=[];aF.type=d;aF.children=[{type:c,tag:i,props:{},children:[{type:b,value:"本文主要是"},{type:c,tag:o,props:{href:"https:\u002F\u002Fmp.weixin.qq.com\u002Fs\u002FRkncXcZT4nDQgdLeUcFaxQ",rel:["nofollow","noopener","noreferrer"],target:"_blank"},children:[{type:b,value:"聊聊 Linux 中的五种 IO 模型"}]},{type:b,value:"的概括。"}]}];return {data:[{navbarConfig:{brandText:"无名の窝",brandUrl:"\u002Fblog-code\u002F",navs:[{text:"文章",url:"\u002Fblog-code\u002Fpage\u002F1\u002F"},{text:"归档",url:"\u002Fblog-code\u002Farchive\u002F0\u002F"},{text:"画画",url:"\u002Fblog-code\u002Fhtml\u002Fhua.html"},{text:"开源",url:"\u002Fblog-code\u002Fhttps:\u002Fgithub.com\u002Fcellargalaxy\u002Fblog-vue"}]},homeConfig:{brandInterval:10000,brands:[{imageUrl:"https:\u002F\u002Fi.loli.net\u002F2020\u002F01\u002F21\u002FmMEAnwY5XPC2pFb.jpg",title:"日常",texts:["我们所度过的每个平凡的日常，也许就是连续不断发生的奇迹。","日々、私たちが過ごしている日常は、実は奇跡の連続なのかもしれない。"]},{imageUrl:"https:\u002F\u002Fi.loli.net\u002F2020\u002F04\u002F19\u002FH1MmXb9xPcYEhT2.jpg",title:"昨日之歌",texts:["时间梭梭箭如飞，人道漫漫步蹒跚","人間そんな変わるもんじゃないのに、月日ばっかどんどん過ぎて"]}],navs:[{text:"Github",url:"https:\u002F\u002Fgithub.com\u002Fcellargalaxy\u002F"}]},pageFootConfig:{lines:[[{text:"Copyright © 2017-? ."},{text:"备案？不存在的"},{text:"Powered by Nuxt.js & Github"}]]},buildTime:new Date(1650990222695),pageSize:10,total:110,currentPage:l,files:[{slug:p,description:"服务接入\nAPI网关最重要的功能就是提供服务的统一接入。\n通常是外部服务统一经过API网关请求到内部不同的服务。\n这样内部服务不会直接暴露在外部，保护了内部服务的安全。\n外部服务也只需要面向API网关进行对接即可，不用跟内部各种异构的服务打交道。",createdAt:q,updatedAt:q,toc:[],body:r,excerpt:r,dir:z,path:"\u002F分布式\u002F20200703\u002FAPI网关总结",extension:e,title:p,url:"\u002Fblog-code\u002Fview\u002F分布式\u002F20200703\u002FAPI网关总结",createAt:new Date(1593734400000),updateAt:new Date(1593734400000),attributes:[{name:f,value:A},{name:g,value:A},{name:h,value:z,url:"\u002Fblog-code\u002Fpage\u002F分布式\u002F20200703\u002F1\u002F"}]},{slug:B,description:"java内存模型(JMM)\nJMM模型下，每个线程都有自己的本地内存，线程对内存的操作也是先操作本地内存。\n之后才将本地内存的数据刷新到主内存里，让各个线程更新共享。",createdAt:C,updatedAt:C,toc:[{id:D,depth:a,text:D},{id:E,depth:a,text:E},{id:F,depth:a,text:F},{id:G,depth:a,text:G},{id:H,depth:a,text:H},{id:I,depth:a,text:I},{id:J,depth:a,text:J}],body:K,excerpt:K,dir:L,path:"\u002Fjava\u002F20200617\u002FJava并发",extension:e,title:B,url:"\u002Fblog-code\u002Fview\u002Fjava\u002F20200617\u002FJava并发",createAt:new Date(1592352000000),updateAt:new Date(1592352000000),attributes:[{name:f,value:M},{name:g,value:M},{name:h,value:L,url:"\u002Fblog-code\u002Fpage\u002Fjava\u002F20200617\u002F1\u002F"}]},{slug:N,description:k,createdAt:O,updatedAt:O,toc:[],body:P,excerpt:P,dir:Q,path:"\u002F中间件\u002F20200609\u002FMySQL总结",extension:e,title:N,url:"\u002Fblog-code\u002Fview\u002F中间件\u002F20200609\u002FMySQL总结",createAt:new Date(1591660800000),updateAt:new Date(1591660800000),attributes:[{name:f,value:R},{name:g,value:R},{name:h,value:Q,url:"\u002Fblog-code\u002Fpage\u002F中间件\u002F20200609\u002F1\u002F"}]},{slug:S,description:k,createdAt:T,updatedAt:T,toc:[{id:U,depth:a,text:U},{id:V,depth:a,text:V},{id:W,depth:a,text:W},{id:X,depth:a,text:X},{id:"sorted-set",depth:a,text:"sorted set"},{id:"rdb",depth:a,text:"RDB"},{id:"aof",depth:a,text:"AOF"},{id:Y,depth:a,text:Y},{id:Z,depth:a,text:Z}],body:_,excerpt:_,dir:$,path:"\u002F中间件\u002F20200603\u002FRedis总结",extension:e,title:S,url:"\u002Fblog-code\u002Fview\u002F中间件\u002F20200603\u002FRedis总结",createAt:new Date(1591142400000),updateAt:new Date(1591142400000),attributes:[{name:f,value:aa},{name:g,value:aa},{name:h,value:$,url:"\u002Fblog-code\u002Fpage\u002F中间件\u002F20200603\u002F1\u002F"}]},{slug:ab,description:k,createdAt:m,updatedAt:m,toc:[],body:ac,excerpt:ac,dir:ad,path:"\u002F框架\u002F20200602\u002FTaf框架",extension:e,title:ab,url:"\u002Fblog-code\u002Fview\u002F框架\u002F20200602\u002FTaf框架",createAt:new Date(1591056000000),updateAt:new Date(1591056000000),attributes:[{name:f,value:n},{name:g,value:n},{name:h,value:ad,url:"\u002Fblog-code\u002Fpage\u002F框架\u002F20200602\u002F1\u002F"}]},{slug:ae,description:"ES的数据结构：index -\u003E type -\u003E document -\u003E field。\n每一个索引会被分为多个shard，每个shard保存部分数据，分别放在不同节点上。\nshard有主shard允许读写，从shard允许读，从shard会与主shard同步数据。\nES集群会选举出一个主节点，负责维护索引元数据和管理主shard和从shard。\nES写数据请求：客户端选择一个节点作为自己的协调节点，协调节点根据请求文档进行路由。\n把请求转发给主shard所在的节点，当从shard也同步完成了，协调节点才会给客户端响应。\nES读数据请求：客户端选择一个节点作为自己的协调节点，协调节点根据请求文档进行路由。\n在主shard和全部从shard节点上轮询一个节点进行请求转发，然后把结果返回给客户端。",createdAt:m,updatedAt:m,toc:[],body:af,excerpt:af,dir:ag,path:"\u002F中间件\u002F20200602\u002FElasticSearch总结",extension:e,title:ae,url:"\u002Fblog-code\u002Fview\u002F中间件\u002F20200602\u002FElasticSearch总结",createAt:new Date(1591056000000),updateAt:new Date(1591056000000),attributes:[{name:f,value:n},{name:g,value:n},{name:h,value:ag,url:"\u002Fblog-code\u002Fpage\u002F中间件\u002F20200602\u002F1\u002F"}]},{slug:ah,description:k,createdAt:ai,updatedAt:ai,toc:[{id:aj,depth:a,text:aj},{id:"kafka端",depth:a,text:"Kafka端"},{id:ak,depth:a,text:ak}],body:al,excerpt:al,dir:am,path:"\u002F中间件\u002F20200601\u002FMQ总结",extension:e,title:ah,url:"\u002Fblog-code\u002Fview\u002F中间件\u002F20200601\u002FMQ总结",createAt:new Date(1590969600000),updateAt:new Date(1590969600000),attributes:[{name:f,value:an},{name:g,value:an},{name:h,value:am,url:"\u002Fblog-code\u002Fpage\u002F中间件\u002F20200601\u002F1\u002F"}]},{slug:ao,description:ap,createdAt:aq,updatedAt:aq,toc:[],body:ar,excerpt:ar,dir:as,path:"\u002Fjava\u002F20200518\u002FJava引用类型",extension:e,title:ao,url:"\u002Fblog-code\u002Fview\u002Fjava\u002F20200518\u002FJava引用类型",createAt:new Date(1589760000000),updateAt:new Date(1589760000000),attributes:[{name:f,value:at},{name:g,value:at},{name:h,value:as,url:"\u002Fblog-code\u002Fpage\u002Fjava\u002F20200518\u002F1\u002F"}]},{slug:au,description:k,createdAt:av,updatedAt:av,toc:[{id:aw,depth:a,text:aw},{id:ax,depth:a,text:ax},{id:ay,depth:a,text:ay},{id:az,depth:a,text:az},{id:"serial与serial-old",depth:a,text:"Serial与Serial Old"},{id:"parnew",depth:a,text:"ParNew"},{id:"parallel-scavenge与parallel-old",depth:a,text:"Parallel Scavenge与Parallel Old"},{id:"cms收集器",depth:a,text:"CMS收集器"},{id:"g1收集器",depth:a,text:"G1收集器"},{id:"g1内存划分",depth:l,text:"G1内存划分"},{id:"remembered-set",depth:l,text:"Remembered Set"},{id:"g1回收步骤",depth:l,text:"G1回收步骤"}],body:aA,excerpt:aA,dir:aB,path:"\u002Fjava\u002F20200515\u002F垃圾收集算法与垃圾收集器",extension:e,title:au,url:"\u002Fblog-code\u002Fview\u002Fjava\u002F20200515\u002F垃圾收集算法与垃圾收集器",createAt:new Date(1589500800000),updateAt:new Date(1589500800000),attributes:[{name:f,value:aC},{name:g,value:aC},{name:h,value:aB,url:"\u002Fblog-code\u002Fpage\u002Fjava\u002F20200515\u002F1\u002F"}]},{slug:aD,description:"本文主要是聊聊 Linux 中的五种 IO 模型的概括。",createdAt:aE,updatedAt:aE,toc:[],body:aF,excerpt:aF,dir:aG,path:"\u002F操作系统\u002F20200513\u002FLinux的IO模型",extension:e,title:aD,url:"\u002Fblog-code\u002Fview\u002F操作系统\u002F20200513\u002FLinux的IO模型",createAt:new Date(1589328000000),updateAt:new Date(1589328000000),attributes:[{name:f,value:aH},{name:g,value:aH},{name:h,value:aG,url:"\u002Fblog-code\u002Fpage\u002F操作系统\u002F20200513\u002F1\u002F"}]}]}],fetch:{},mutations:void 0}}(2,"text","element","root",".md","createAt","updateAt","sort","p","\n","",3,"2020-06-02T00:00:00.000Z","2020-06-02","a","API网关总结","2020-07-03T00:00:00.000Z",{},"h1","服务接入","true",-1,"span","icon","icon-link","\u002F分布式\u002F20200703","2020-07-03","Java并发","2020-06-17T00:00:00.000Z","偏向锁","获取轻量级锁","释放轻量级锁","重量级锁","锁消除","锁优化","锁升级与锁降级",{},"\u002Fjava\u002F20200617","2020-06-17","MySQL总结","2020-06-09T00:00:00.000Z",{},"\u002F中间件\u002F20200609","2020-06-09","Redis总结","2020-06-03T00:00:00.000Z","string","list","hash","set","哨兵集群选举","哨兵集群的数据丢失",{},"\u002F中间件\u002F20200603","2020-06-03","Taf框架",{},"\u002F框架\u002F20200602","ElasticSearch总结",{},"\u002F中间件\u002F20200602","MQ总结","2020-06-01T00:00:00.000Z","生产端","消费端",{},"\u002F中间件\u002F20200601","2020-06-01","Java引用类型","java除了基本类型以外，其余的都是引用类型。\n而java的引用类型有四种：强引用，软引用，弱引用和虚引用。\n除了强引用外，其余的引用都是抽象类Reference的子类。","2020-05-18T00:00:00.000Z",{},"\u002Fjava\u002F20200518","2020-05-18","垃圾收集算法与垃圾收集器","2020-05-15T00:00:00.000Z","标记-清除算法","标记-整理算法","复制算法","概念",{},"\u002Fjava\u002F20200515","2020-05-15","Linux的IO模型","2020-05-13T00:00:00.000Z",{},"\u002F操作系统\u002F20200513","2020-05-13")));