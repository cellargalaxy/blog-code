__NUXT_JSONP__("/page/6", (function(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,_,$,aa,ab,ac,ad,ae,af,ag,ah,ai,aj,ak,al,am,an,ao,ap,aq,ar,as,at,au,av,aw,ax,ay,az,aA,aB,aC,aD,aE,aF,aG,aH,aI){r.type=b;r.children=[];F.type=b;F.children=[{type:g,tag:"h1",props:{id:G},children:[{type:g,tag:H,props:{ariaHidden:I,href:"#%E8%BF%9B%E7%A8%8B",tabIndex:J},children:[{type:g,tag:K,props:{className:[L,M]},children:[]}]},{type:h,value:G}]},{type:h,value:N},{type:g,tag:"h2",props:{id:m},children:[{type:g,tag:H,props:{ariaHidden:I,href:"#%E5%AD%A4%E5%84%BF%E8%BF%9B%E7%A8%8B%E4%B8%8E%E5%83%B5%E5%B0%B8%E8%BF%9B%E7%A8%8B",tabIndex:J},children:[{type:g,tag:K,props:{className:[L,M]},children:[]}]},{type:h,value:m}]},{type:h,value:N},{type:g,tag:o,props:{},children:[{type:h,value:"子进程是由父进程创建的，linux能确保子进程结束后，父进程能通过调用wait()或者waitpid()系统调用获取到子进程的信息。\n其实现方式是，当子进程结束后，虽然系统会是否子进程的大部分资源，如打开的文件，内存等，但是还是会保留少量资源，如pid，直到父进程调用获取子进程的信息才会释放。\n因此，如果子进程还没结束，父进程就结束了，那这些子进程则是孤儿进程，会被init进程（pid=1）收养，以调用释放孤儿进程的资源。\n但是如果子进程结束了，但他的父进程既不结束也不调用释放资源，那么这些子进程则是僵尸进程，会一直占用pid，直到系统无pid可用。"}]}];S.type=b;S.children=[{type:g,tag:o,props:{},children:[{type:h,value:"编辑距离可以用来判断两个字符串的相似性。量测方式是把一个字符串转变为另外一个字符串所需的操作次数。操作类型只有三种：增加，删除和替换。这样子，字符串的相似性则可以用"},{type:g,tag:"code",props:{},children:[{type:h,value:"1-编辑距离\u002FMAX(字符串1长度,字符串2长度)"}]},{type:h,value:"来度量。"}]}];X.type=b;X.children=[];aa.type=b;aa.children=[{type:g,tag:o,props:{},children:[{type:h,value:$}]}];ad.type=b;ad.children=[];ah.type=b;ah.children=[];aw.type=b;aw.children=[];aB.type=b;aB.children=[];aG.type=b;aG.children=[];return {data:[{navbarConfig:{brandText:"无名の窝",brandUrl:"\u002Fblog-code\u002F",navs:[{text:"文章",url:"\u002Fblog-code\u002Fpage\u002F1\u002F"},{text:"归档",url:"\u002Fblog-code\u002Farchive\u002F0\u002F"},{text:"画画",url:"\u002Fblog-code\u002Fhtml\u002Fhua.html"},{text:"开源",url:"\u002Fblog-code\u002Fhttps:\u002Fgithub.com\u002Fcellargalaxy\u002Fblog-vue"}]},homeConfig:{brandInterval:10000,brands:[{imageUrl:"https:\u002F\u002Fi.loli.net\u002F2020\u002F01\u002F21\u002FmMEAnwY5XPC2pFb.jpg",title:"日常",texts:["我们所度过的每个平凡的日常，也许就是连续不断发生的奇迹。","日々、私たちが過ごしている日常は、実は奇跡の連続なのかもしれない。"]},{imageUrl:"https:\u002F\u002Fi.loli.net\u002F2020\u002F04\u002F19\u002FH1MmXb9xPcYEhT2.jpg",title:"昨日之歌",texts:["时间梭梭箭如飞，人道漫漫步蹒跚","人間そんな変わるもんじゃないのに、月日ばっかどんどん過ぎて"]}],navs:[{text:"Github",url:"https:\u002F\u002Fgithub.com\u002Fcellargalaxy\u002F"}]},pageFootConfig:{lines:[[{text:"Copyright © 2017-? ."},{text:"备案？不存在的"},{text:"Powered by Nuxt.js & Github"}]]},buildTime:new Date(1650990223273),pageSize:10,total:110,currentPage:6,files:[{slug:p,description:i,createdAt:q,updatedAt:q,toc:[{id:"timer的使用",depth:a,text:"Timer的使用"},{id:"timer的源码",depth:a,text:"Timer的源码"},{id:"taskqueue",depth:a,text:"TaskQueue"},{id:"timerthread的源码",depth:a,text:"TimerThread的源码"},{id:"scheduledexecutorservice的使用",depth:a,text:"ScheduledExecutorService的使用"},{id:"scheduledexecutorservice的源码",depth:a,text:"ScheduledExecutorService的源码"}],body:r,excerpt:r,dir:s,path:"\u002Fjava\u002F20181215\u002FJava定时任务",extension:c,title:p,url:"\u002Fblog-code\u002Fview\u002Fjava\u002F20181215\u002FJava定时任务",createAt:new Date(1544832000000),updateAt:new Date(1544832000000),attributes:[{name:d,value:t},{name:e,value:t},{name:f,value:s,url:"\u002Fblog-code\u002Fpage\u002Fjava\u002F20181215\u002F1\u002F"}]},{slug:u,description:"进程\n孤儿进程与僵尸进程\n子进程是由父进程创建的，linux能确保子进程结束后，父进程能通过调用wait()或者waitpid()系统调用获取到子进程的信息。\n其实现方式是，当子进程结束后，虽然系统会是否子进程的大部分资源，如打开的文件，内存等，但是还是会保留少量资源，如pid，直到父进程调用获取子进程的信息才会释放。\n因此，如果子进程还没结束，父进程就结束了，那这些子进程则是孤儿进程，会被init进程（pid=1）收养，以调用释放孤儿进程的资源。\n但是如果子进程结束了，但他的父进程既不结束也不调用释放资源，那么这些子进程则是僵尸进程，会一直占用pid，直到系统无pid可用。",createdAt:v,updatedAt:v,toc:[{id:m,depth:a,text:m},{id:"什么是线程安全如何实现线程安全",depth:a,text:"什么是线程安全，如何实现线程安全"},{id:w,depth:a,text:w},{id:x,depth:a,text:x},{id:y,depth:a,text:y},{id:z,depth:a,text:z},{id:A,depth:a,text:A},{id:B,depth:a,text:B},{id:C,depth:a,text:C},{id:D,depth:a,text:D},{id:E,depth:a,text:E}],body:F,excerpt:F,dir:O,path:"\u002Fjava\u002F20181209\u002FJava多线程",extension:c,title:u,url:"\u002Fblog-code\u002Fview\u002Fjava\u002F20181209\u002FJava多线程",createAt:new Date(1544313600000),updateAt:new Date(1544313600000),attributes:[{name:d,value:P},{name:e,value:P},{name:f,value:O,url:"\u002Fblog-code\u002Fpage\u002Fjava\u002F20181209\u002F1\u002F"}]},{slug:Q,description:"编辑距离可以用来判断两个字符串的相似性。量测方式是把一个字符串转变为另外一个字符串所需的操作次数。操作类型只有三种：增加，删除和替换。这样子，字符串的相似性则可以用1-编辑距离\u002FMAX(字符串1长度,字符串2长度)来度量。",createdAt:R,updatedAt:R,toc:[],body:S,excerpt:S,dir:T,path:"\u002F算法\u002F20181114\u002F编辑距离",extension:c,title:Q,url:"\u002Fblog-code\u002Fview\u002F算法\u002F20181114\u002F编辑距离",createAt:new Date(1542153600000),updateAt:new Date(1542153600000),attributes:[{name:d,value:U},{name:e,value:U},{name:f,value:T,url:"\u002Fblog-code\u002Fpage\u002F算法\u002F20181114\u002F1\u002F"}]},{slug:V,description:i,createdAt:W,updatedAt:W,toc:[],body:X,excerpt:X,dir:Y,path:"\u002F算法\u002F20181108\u002Fword2vec学习小记",extension:c,title:V,url:"\u002Fblog-code\u002Fview\u002F算法\u002F20181108\u002Fword2vec学习小记",createAt:new Date(1541635200000),updateAt:new Date(1541635200000),attributes:[{name:d,value:Z},{name:e,value:Z},{name:f,value:Y,url:"\u002Fblog-code\u002Fpage\u002F算法\u002F20181108\u002F1\u002F"}]},{slug:_,description:$,createdAt:j,updatedAt:j,toc:[],body:aa,excerpt:aa,dir:n,path:"\u002F框架\u002F20181024\u002FQuartz集群原理及源码分析",extension:c,title:_,url:"\u002Fblog-code\u002Fview\u002F框架\u002F20181024\u002FQuartz集群原理及源码分析",createAt:new Date(1540339200000),updateAt:new Date(1540339200000),attributes:[{name:d,value:k},{name:e,value:k},{name:f,value:n,url:ab}]},{slug:ac,description:i,createdAt:j,updatedAt:j,toc:[{id:"job与jobdetail",depth:a,text:"Job与JobDetail"},{id:"trigger",depth:a,text:"Trigger"},{id:"scheduler",depth:a,text:"Scheduler"}],body:ad,excerpt:ad,dir:n,path:"\u002F框架\u002F20181024\u002FQuartz框架的使用",extension:c,title:ac,url:"\u002Fblog-code\u002Fview\u002F框架\u002F20181024\u002FQuartz框架的使用",createAt:new Date(1540339200000),updateAt:new Date(1540339200000),attributes:[{name:d,value:k},{name:e,value:k},{name:f,value:n,url:ab}]},{slug:ae,description:i,createdAt:j,updatedAt:j,toc:[{id:af,depth:a,text:af},{id:ag,depth:a,text:ag}],body:ah,excerpt:ah,dir:ai,path:"\u002F中间件\u002F20181024\u002FMysql的锁与引擎",extension:c,title:ae,url:"\u002Fblog-code\u002Fview\u002F中间件\u002F20181024\u002FMysql的锁与引擎",createAt:new Date(1540339200000),updateAt:new Date(1540339200000),attributes:[{name:d,value:k},{name:e,value:k},{name:f,value:ai,url:"\u002Fblog-code\u002Fpage\u002F中间件\u002F20181024\u002F1\u002F"}]},{slug:aj,description:i,createdAt:ak,updatedAt:ak,toc:[{id:al,depth:a,text:al},{id:am,depth:a,text:am},{id:an,depth:a,text:an},{id:ao,depth:a,text:ao},{id:ap,depth:a,text:ap},{id:aq,depth:a,text:aq},{id:ar,depth:a,text:ar},{id:"arp",depth:a,text:"ARP"},{id:"icmp",depth:a,text:"ICMP"},{id:"udp",depth:a,text:"UDP"},{id:"tcp",depth:a,text:"TCP"},{id:as,depth:l,text:as},{id:"连续arq协议滑动窗口协议",depth:l,text:"连续ARQ协议\u002F滑动窗口协议"},{id:at,depth:l,text:at},{id:au,depth:l,text:au},{id:av,depth:l,text:av},{id:"tcp的三次握手和四次分手",depth:l,text:"TCP的三次握手和四次分手"}],body:aw,excerpt:aw,dir:ax,path:"\u002F协议\u002F20180916\u002F计算机网络复习笔记",extension:c,title:aj,url:"\u002Fblog-code\u002Fview\u002F协议\u002F20180916\u002F计算机网络复习笔记",createAt:new Date(1537056000000),updateAt:new Date(1537056000000),attributes:[{name:d,value:ay},{name:e,value:ay},{name:f,value:ax,url:"\u002Fblog-code\u002Fpage\u002F协议\u002F20180916\u002F1\u002F"}]},{slug:az,description:i,createdAt:aA,updatedAt:aA,toc:[],body:aB,excerpt:aB,dir:aC,path:"\u002F框架\u002F20180831\u002Fjwt总结与jjwt的使用",extension:c,title:az,url:"\u002Fblog-code\u002Fview\u002F框架\u002F20180831\u002Fjwt总结与jjwt的使用",createAt:new Date(1535673600000),updateAt:new Date(1535673600000),attributes:[{name:d,value:aD},{name:e,value:aD},{name:f,value:aC,url:"\u002Fblog-code\u002Fpage\u002F框架\u002F20180831\u002F1\u002F"}]},{slug:aE,description:i,createdAt:aF,updatedAt:aF,toc:[],body:aG,excerpt:aG,dir:aH,path:"\u002F其他\u002F20180820\u002F做题笔记",extension:c,title:aE,url:"\u002Fblog-code\u002Fview\u002F其他\u002F20180820\u002F做题笔记",createAt:new Date(1534723200000),updateAt:new Date(1534723200000),attributes:[{name:d,value:aI},{name:e,value:aI},{name:f,value:aH,url:"\u002Fblog-code\u002Fpage\u002F其他\u002F20180820\u002F1\u002F"}]}]}],fetch:{},mutations:void 0}}(2,"root",".md","createAt","updateAt","sort","element","text","","2018-10-24T00:00:00.000Z","2018-10-24",3,"孤儿进程与僵尸进程","\u002F框架\u002F20181024","p","Java定时任务","2018-12-15T00:00:00.000Z",{},"\u002Fjava\u002F20181215","2018-12-15","Java多线程","2018-12-09T00:00:00.000Z","线程的生命周期","创建线程的方式","如何关闭线程","死锁","线程池作用","线程池核心参数","创建线程池的方式","配置线程池","其他方法",{},"进程","a","true",-1,"span","icon","icon-link","\n","\u002Fjava\u002F20181209","2018-12-09","编辑距离","2018-11-14T00:00:00.000Z",{},"\u002F算法\u002F20181114","2018-11-14","word2vec学习小记","2018-11-08T00:00:00.000Z",{},"\u002F算法\u002F20181108","2018-11-08","Quartz集群原理及源码分析","我们需要Quartz框架执行任务，就需要告诉Quartz所需的JobDetail和Trigger。在单机里，Quartz会把JobDetail和Trigger保存在内存里，如果重启，JobDetail和Trigger的数据都会全部丢失（虽然会在代码里重新添加）。显然，需要集群执行，把JobDetail和Trigger保存在内存里是没有办法在各个节点之间进行同步的，而Quartz利用数据库的锁来进行实现。",{},"\u002Fblog-code\u002Fpage\u002F框架\u002F20181024\u002F1\u002F","Quartz框架的使用",{},"Mysql的锁与引擎","共享锁","独占锁",{},"\u002F中间件\u002F20181024","计算机网络复习笔记","2018-09-16T00:00:00.000Z","网络层次","网际协议ip","虚拟互联网络","ip地址分类","划分子网","ip数据报","ip层转发分组流程","等待停止协议","超时重传","流量控制","拥塞控制",{},"\u002F协议\u002F20180916","2018-09-16","jwt总结与jjwt的使用","2018-08-31T00:00:00.000Z",{},"\u002F框架\u002F20180831","2018-08-31","做题笔记","2018-08-20T00:00:00.000Z",{},"\u002F其他\u002F20180820","2018-08-20")));