__NUXT_JSONP__("/page/7", (function(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,_,$,aa,ab,ac,ad,ae,af,ag,ah,ai,aj,ak,al,am,an,ao,ap,aq,ar,as,at,au,av,aw){x.type=d;x.children=[{type:b,tag:c,props:{},children:[{type:a,value:"之前一直只会使用"},{type:b,tag:j,props:{},children:[{type:a,value:"@RunWith(SpringRunner.class)"}]},{type:a,value:"和"},{type:b,tag:j,props:{},children:[{type:a,value:"@SpringBootTest"}]},{type:a,value:"注解来加载整个项目来注入依赖，就只会用个"},{type:b,tag:j,props:{},children:[{type:a,value:"assertEquals"}]},{type:a,value:"方法来进行测试（虽然现在也是）。但问题还是有的，且不论加载整个项目，把无关的依赖都加载进行，浪费时间。如果我要测试添加用户的接口，第一，一测试就把数据写进数据库了呀，即便是测试数据库，不要紧，那我测试第二遍，由于账户名相同，就写不进去数据库了，不能接受地报了错，其实啥问题都没有，如果要再测试就得改账户名，动了代码。也就是说这样的测试代码是连调用两次都不行的垃圾，这样子不是很奇怪吗。"}]},{type:a,value:e},{type:b,tag:c,props:{},children:[{type:a,value:"而Mockito能解决这些问题。先说说情景，我要对"},{type:b,tag:j,props:{},children:[{type:a,value:"UserService"}]},{type:a,value:"类测试添加账号和获取账号的方法，UserService调用了"},{type:b,tag:j,props:{},children:[{type:a,value:"UserDao"}]},{type:a,value:"的方法，为了避免我调用UserService的时候调用到真的，连接到数据库的UserDao，我需要给UserService替换一个UserDao的实现，而这个新的UserDao的实现的方法的返回我希望我能简单直观的控制，这样就叫做对UserService类mock了UserDao。"}]},{type:a,value:e},{type:b,tag:c,props:{},children:[{type:a,value:"在spring boot里使用很简单，下面是个简单例子，"},{type:b,tag:j,props:{},children:[{type:a,value:"UserPo"}]},{type:a,value:"类就是个普通的bean，放着账号密码，就不贴代码了。"}]}];B.type=d;B.children=[{type:b,tag:c,props:{},children:[{type:a,value:"让spring boot支持CORS非常简单，不用做任何配置，只需要在controller里使用"},{type:b,tag:j,props:{},children:[{type:a,value:"@CrossOrigin"}]},{type:a,value:"注解即可。"}]},{type:a,value:e},{type:b,tag:c,props:{},children:[{type:a,value:"@CrossOrigin注解可以使用在类或者方法上，其参数主要有origins和maxAge，用来指定允许跨域的域默认是*，和OPTIONS响应的有效时间，默认是1800。当类和方法都使用@CrossOrigin注解时，会自动合并两个注解的参数。"}]}];K.type=d;K.children=[{type:b,tag:o,props:{id:L},children:[{type:b,tag:p,props:{ariaHidden:q,href:"#%E4%BD%95%E4%B8%BA%E5%9F%9F",tabIndex:r},children:[{type:b,tag:s,props:{className:[t,u]},children:[]}]},{type:a,value:L}]},{type:a,value:e},{type:b,tag:c,props:{},children:[{type:a,value:"这里的域指的并不是域名，而是协议、主机地址和端口的唯一组合，即协议，主机地址和端口其中一个不一样那就是另外一个域了。"}]},{type:a,value:e},{type:b,tag:o,props:{id:M},children:[{type:b,tag:p,props:{ariaHidden:q,href:"#%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98%E4%B8%BA%E4%BD%95%E8%80%8C%E6%9D%A5",tabIndex:r},children:[{type:b,tag:s,props:{className:[t,u]},children:[]}]},{type:a,value:M}]},{type:a,value:e},{type:b,tag:c,props:{},children:[{type:a,value:"浏览器为了安全，避免网页被嵌入恶意代码，限制来源于某个域的脚本只能向其来源的域发起ajax请求，并且脚本也无法获取别的域的cookie，DOM等资源，这个叫同源策略。例如我在"},{type:b,tag:j,props:{},children:[{type:a,value:"http:\u002F\u002Fwww.alipay.com\u002F"}]},{type:a,value:"里嵌入了个检测你支付宝密码的脚本，发现你输入密码，就把你的密码发送到我的域名下，但由于我的域名跟阿里的域名不在同一个域里面，这样子偷偷发送密码的请求就会被浏览器拦截住。"}]},{type:a,value:e},{type:b,tag:c,props:{},children:[{type:a,value:"接下来以来源于a.com域（简称a域）的脚本向b.com（简称b域）发起请求作为情景来解释"}]}];Q.type=d;Q.children=[];V.type=d;V.children=[];_.type=d;_.children=[];ad.type=d;ad.children=[];ai.type=d;ai.children=[];ao.type=d;ao.children=[{type:b,tag:c,props:{},children:[{type:a,value:am}]}];at.type=d;at.children=[{type:b,tag:c,props:{},children:[{type:a,value:"之前我理解的通讯比较狭隘，以为要是传输数据。但是看了别人的，发现哪怕是信号的传递，同步，也叫通讯。"}]},{type:a,value:e},{type:b,tag:o,props:{id:au},children:[{type:b,tag:p,props:{ariaHidden:q,href:"#%E7%BA%BF%E7%A8%8B%E4%B8%8E%E8%BF%9B%E7%A8%8B%E4%B9%8B%E9%97%B4%E7%9A%84%E5%85%B3%E7%B3%BB",tabIndex:r},children:[{type:b,tag:s,props:{className:[t,u]},children:[]}]},{type:a,value:au}]},{type:a,value:e},{type:b,tag:c,props:{},children:[{type:a,value:"进程是系统进行资源分配和调度的独立单位，有自己独立的地址空间。是一个程序在有个数据集合上面的一次活动。而线程是进程的实体，是cpu调度和分派的基本单位。线程除了最基本的栈，程序计数器意外，不拥有专属资源。但可以与进程下的其他线程共享进程的全部资源。"}]},{type:a,value:e},{type:b,tag:c,props:{},children:[{type:a,value:"线程是进程的不同的执行路径。一个进程奔溃后，在保护模式下不会对其他进程造成影响。而一个线程死掉就等于整个进程死掉。因此，进程的健壮性比线程好，但是切换开销大。对于要同时进行又要共享变量，只能用线程。"}]}];return {data:[{navbarConfig:{brandText:"无名の窝",brandUrl:"\u002Fblog-code\u002F",navs:[{text:"文章",url:"\u002Fblog-code\u002Fpage\u002F1\u002F"},{text:"归档",url:"\u002Fblog-code\u002Farchive\u002F0\u002F"},{text:"画画",url:"\u002Fblog-code\u002Fhtml\u002Fhua.html"},{text:"开源",url:"\u002Fblog-code\u002Fhttps:\u002Fgithub.com\u002Fcellargalaxy\u002Fblog-vue"}]},homeConfig:{brandInterval:10000,brands:[{imageUrl:"https:\u002F\u002Fi.loli.net\u002F2020\u002F01\u002F21\u002FmMEAnwY5XPC2pFb.jpg",title:"日常",texts:["我们所度过的每个平凡的日常，也许就是连续不断发生的奇迹。","日々、私たちが過ごしている日常は、実は奇跡の連続なのかもしれない。"]},{imageUrl:"https:\u002F\u002Fi.loli.net\u002F2020\u002F04\u002F19\u002FH1MmXb9xPcYEhT2.jpg",title:"昨日之歌",texts:["时间梭梭箭如飞，人道漫漫步蹒跚","人間そんな変わるもんじゃないのに、月日ばっかどんどん過ぎて"]}],navs:[{text:"Github",url:"https:\u002F\u002Fgithub.com\u002Fcellargalaxy\u002F"}]},pageFootConfig:{lines:[[{text:"Copyright © 2017-? ."},{text:"备案？不存在的"},{text:"Powered by Nuxt.js & Github"}]]},buildTime:new Date(1650990223465),pageSize:10,total:110,currentPage:7,files:[{slug:v,description:"之前一直只会使用@RunWith(SpringRunner.class)和@SpringBootTest注解来加载整个项目来注入依赖，就只会用个assertEquals方法来进行测试（虽然现在也是）。但问题还是有的，且不论加载整个项目，把无关的依赖都加载进行，浪费时间。如果我要测试添加用户的接口，第一，一测试就把数据写进数据库了呀，即便是测试数据库，不要紧，那我测试第二遍，由于账户名相同，就写不进去数据库了，不能接受地报了错，其实啥问题都没有，如果要再测试就得改账户名，动了代码。也就是说这样的测试代码是连调用两次都不行的垃圾，这样子不是很奇怪吗。\n而Mockito能解决这些问题。先说说情景，我要对UserService类测试添加账号和获取账号的方法，UserService调用了UserDao的方法，为了避免我调用UserService的时候调用到真的，连接到数据库的UserDao，我需要给UserService替换一个UserDao的实现，而这个新的UserDao的实现的方法的返回我希望我能简单直观的控制，这样就叫做对UserService类mock了UserDao。\n在spring boot里使用很简单，下面是个简单例子，UserPo类就是个普通的bean，放着账号密码，就不贴代码了。",createdAt:w,updatedAt:w,toc:[],body:x,excerpt:x,dir:y,path:"\u002F框架\u002F20180809\u002FSpring Boot使用Mockito做单元测试",extension:f,title:v,url:"\u002Fblog-code\u002Fview\u002F框架\u002F20180809\u002FSpring Boot使用Mockito做单元测试",createAt:new Date(1533772800000),updateAt:new Date(1533772800000),attributes:[{name:g,value:z},{name:h,value:z},{name:i,value:y,url:"\u002Fblog-code\u002Fpage\u002F框架\u002F20180809\u002F1\u002F"}]},{slug:A,description:"让spring boot支持CORS非常简单，不用做任何配置，只需要在controller里使用@CrossOrigin注解即可。\n@CrossOrigin注解可以使用在类或者方法上，其参数主要有origins和maxAge，用来指定允许跨域的域默认是*，和OPTIONS响应的有效时间，默认是1800。当类和方法都使用@CrossOrigin注解时，会自动合并两个注解的参数。",createdAt:m,updatedAt:m,toc:[],body:B,excerpt:B,dir:C,path:"\u002F框架\u002F20180802\u002Fspring boot与Nginx支持CORS",extension:f,title:A,url:"\u002Fblog-code\u002Fview\u002F框架\u002F20180802\u002Fspring boot与Nginx支持CORS",createAt:new Date(1533168000000),updateAt:new Date(1533168000000),attributes:[{name:g,value:n},{name:h,value:n},{name:i,value:C,url:"\u002Fblog-code\u002Fpage\u002F框架\u002F20180802\u002F1\u002F"}]},{slug:D,description:"何为域\n这里的域指的并不是域名，而是协议、主机地址和端口的唯一组合，即协议，主机地址和端口其中一个不一样那就是另外一个域了。\n跨域问题为何而来\n浏览器为了安全，避免网页被嵌入恶意代码，限制来源于某个域的脚本只能向其来源的域发起ajax请求，并且脚本也无法获取别的域的cookie，DOM等资源，这个叫同源策略。例如我在http:\u002F\u002Fwww.alipay.com\u002F里嵌入了个检测你支付宝密码的脚本，发现你输入密码，就把你的密码发送到我的域名下，但由于我的域名跟阿里的域名不在同一个域里面，这样子偷偷发送密码的请求就会被浏览器拦截住。\n接下来以来源于a.com域（简称a域）的脚本向b.com（简称b域）发起请求作为情景来解释",createdAt:m,updatedAt:m,toc:[{id:E,depth:k,text:E},{id:F,depth:k,text:F},{id:G,depth:k,text:G},{id:H,depth:k,text:H},{id:I,depth:k,text:I},{id:J,depth:k,text:J}],body:K,excerpt:K,dir:N,path:"\u002F协议\u002F20180802\u002FJSONP和CORS的跨域请求",extension:f,title:D,url:"\u002Fblog-code\u002Fview\u002F协议\u002F20180802\u002FJSONP和CORS的跨域请求",createAt:new Date(1533168000000),updateAt:new Date(1533168000000),attributes:[{name:g,value:n},{name:h,value:n},{name:i,value:N,url:"\u002Fblog-code\u002Fpage\u002F协议\u002F20180802\u002F1\u002F"}]},{slug:O,description:l,createdAt:P,updatedAt:P,toc:[],body:Q,excerpt:Q,dir:R,path:"\u002F框架\u002F20180728\u002Fspring boot+Spring Security+jjwt",extension:f,title:O,url:"\u002Fblog-code\u002Fview\u002F框架\u002F20180728\u002Fspring boot+Spring Security+jjwt",createAt:new Date(1532736000000),updateAt:new Date(1532736000000),attributes:[{name:g,value:S},{name:h,value:S},{name:i,value:R,url:"\u002Fblog-code\u002Fpage\u002F框架\u002F20180728\u002F1\u002F"}]},{slug:T,description:l,createdAt:U,updatedAt:U,toc:[],body:V,excerpt:V,dir:W,path:"\u002F中间件\u002F20180718\u002F使用sql游标遍历结果集",extension:f,title:T,url:"\u002Fblog-code\u002Fview\u002F中间件\u002F20180718\u002F使用sql游标遍历结果集",createAt:new Date(1531872000000),updateAt:new Date(1531872000000),attributes:[{name:g,value:X},{name:h,value:X},{name:i,value:W,url:"\u002Fblog-code\u002Fpage\u002F中间件\u002F20180718\u002F1\u002F"}]},{slug:Y,description:l,createdAt:Z,updatedAt:Z,toc:[],body:_,excerpt:_,dir:$,path:"\u002F折腾\u002F20180714\u002FUbuntu安装配置Redis与置换策略",extension:f,title:Y,url:"\u002Fblog-code\u002Fview\u002F折腾\u002F20180714\u002FUbuntu安装配置Redis与置换策略",createAt:new Date(1531526400000),updateAt:new Date(1531526400000),attributes:[{name:g,value:aa},{name:h,value:aa},{name:i,value:$,url:"\u002Fblog-code\u002Fpage\u002F折腾\u002F20180714\u002F1\u002F"}]},{slug:ab,description:l,createdAt:ac,updatedAt:ac,toc:[],body:ad,excerpt:ad,dir:ae,path:"\u002F框架\u002F20180705\u002F作业调度系统-Quarzt的简单使用",extension:f,title:ab,url:"\u002Fblog-code\u002Fview\u002F框架\u002F20180705\u002F作业调度系统-Quarzt的简单使用",createAt:new Date(1530748800000),updateAt:new Date(1530748800000),attributes:[{name:g,value:af},{name:h,value:af},{name:i,value:ae,url:"\u002Fblog-code\u002Fpage\u002F框架\u002F20180705\u002F1\u002F"}]},{slug:ag,description:l,createdAt:ah,updatedAt:ah,toc:[],body:ai,excerpt:ai,dir:aj,path:"\u002F其他\u002F20180524\u002F做题笔记",extension:f,title:ag,url:"\u002Fblog-code\u002Fview\u002F其他\u002F20180524\u002F做题笔记",createAt:new Date(1527120000000),updateAt:new Date(1527120000000),attributes:[{name:g,value:ak},{name:h,value:ak},{name:i,value:aj,url:"\u002Fblog-code\u002Fpage\u002F其他\u002F20180524\u002F1\u002F"}]},{slug:al,description:am,createdAt:an,updatedAt:an,toc:[],body:ao,excerpt:ao,dir:ap,path:"\u002F框架\u002F20180519\u002FSpring Cloud是个啥",extension:f,title:al,url:"\u002Fblog-code\u002Fview\u002F框架\u002F20180519\u002FSpring Cloud是个啥",createAt:new Date(1526688000000),updateAt:new Date(1526688000000),attributes:[{name:g,value:aq},{name:h,value:aq},{name:i,value:ap,url:"\u002Fblog-code\u002Fpage\u002F框架\u002F20180519\u002F1\u002F"}]},{slug:ar,description:"之前我理解的通讯比较狭隘，以为要是传输数据。但是看了别人的，发现哪怕是信号的传递，同步，也叫通讯。\n线程与进程之间的关系\n进程是系统进行资源分配和调度的独立单位，有自己独立的地址空间。是一个程序在有个数据集合上面的一次活动。而线程是进程的实体，是cpu调度和分派的基本单位。线程除了最基本的栈，程序计数器意外，不拥有专属资源。但可以与进程下的其他线程共享进程的全部资源。\n线程是进程的不同的执行路径。一个进程奔溃后，在保护模式下不会对其他进程造成影响。而一个线程死掉就等于整个进程死掉。因此，进程的健壮性比线程好，但是切换开销大。对于要同时进行又要共享变量，只能用线程。",createdAt:as,updatedAt:as,toc:[],body:at,excerpt:at,dir:av,path:"\u002Fjava\u002F20180518\u002Fjava线程与进程通讯",extension:f,title:ar,url:"\u002Fblog-code\u002Fview\u002Fjava\u002F20180518\u002Fjava线程与进程通讯",createAt:new Date(1526601600000),updateAt:new Date(1526601600000),attributes:[{name:g,value:aw},{name:h,value:aw},{name:i,value:av,url:"\u002Fblog-code\u002Fpage\u002Fjava\u002F20180518\u002F1\u002F"}]}]}],fetch:{},mutations:void 0}}("text","element","p","root","\n",".md","createAt","updateAt","sort","code",2,"","2018-08-02T00:00:00.000Z","2018-08-02","h1","a","true",-1,"span","icon","icon-link","Spring Boot使用Mockito做单元测试","2018-08-09T00:00:00.000Z",{},"\u002F框架\u002F20180809","2018-08-09","spring boot与Nginx支持CORS",{},"\u002F框架\u002F20180802","JSONP和CORS的跨域请求","简单请求的请求","简单请求的响应","预检请求的请求","预检请求的回应","实际请求的请求","实际请求的响应",{},"何为域","跨域问题为何而来","\u002F协议\u002F20180802","spring boot+Spring Security+jjwt","2018-07-28T00:00:00.000Z",{},"\u002F框架\u002F20180728","2018-07-28","使用sql游标遍历结果集","2018-07-18T00:00:00.000Z",{},"\u002F中间件\u002F20180718","2018-07-18","Ubuntu安装配置Redis与置换策略","2018-07-14T00:00:00.000Z",{},"\u002F折腾\u002F20180714","2018-07-14","作业调度系统-Quarzt的简单使用","2018-07-05T00:00:00.000Z",{},"\u002F框架\u002F20180705","2018-07-05","做题笔记","2018-05-24T00:00:00.000Z",{},"\u002F其他\u002F20180524","2018-05-24","Spring Cloud是个啥","其实你问我Spring Cloud是个啥，我也还是说不清的。因为看了网上的文章，我还是看的有点懵逼的。毕竟，我还是项（人）目（生）经验太少，too young，想东西too simple了。不过，作为一名懒惰的程序员，就算sometimes naive，在设计的时候多多少少有一点倾向Spring Cloud所提倡的来实现了。","2018-05-19T00:00:00.000Z",{},"\u002F框架\u002F20180519","2018-05-19","java线程与进程通讯","2018-05-18T00:00:00.000Z",{},"线程与进程之间的关系","\u002Fjava\u002F20180518","2018-05-18")));