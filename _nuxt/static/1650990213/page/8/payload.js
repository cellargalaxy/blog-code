__NUXT_JSONP__("/page/8", (function(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,_,$,aa,ab,ac,ad,ae,af,ag,ah,ai,aj,ak,al,am,an,ao,ap,aq,ar,as,at){C.type=d;C.children=[{type:b,tag:o,props:{id:D},children:[{type:b,tag:j,props:{ariaHidden:p,href:"#%E6%B3%A8%E8%A7%A3%E6%98%AF%E4%BB%80%E4%B9%88",tabIndex:q},children:[{type:b,tag:r,props:{className:[s,t]},children:[]}]},{type:a,value:D}]},{type:a,value:c},{type:b,tag:i,props:{},children:[{type:a,value:"注解用的多了，但是其实注解是什么。打个比喻，注解就是一张标签纸，上面写着若干信息，用来标记解释被贴上这张标签纸的事物.而其事物的性质并没有发生改变，无论这张标签纸上的解释是否正确。因此，使用注解是非入侵代码的。"}]},{type:a,value:c},{type:b,tag:o,props:{id:E},children:[{type:b,tag:j,props:{ariaHidden:p,href:"#%E5%85%83%E6%B3%A8%E8%A7%A3",tabIndex:q},children:[{type:b,tag:r,props:{className:[s,t]},children:[]}]},{type:a,value:E}]},{type:a,value:c},{type:b,tag:i,props:{},children:[{type:a,value:"元注解也是注解，不过是特殊的，用来标注其他注解的注解，就像Object是全部类的父类一样。比喻的说，就是标签纸A上可以贴标签纸B，标签纸B可以贴标签纸C……，最后的标签纸N就是元注解。元注解有五个：@Retention、@Target、@Inherited、@Documented、@Repeatable。"}]}];J.type=d;J.children=[{type:b,tag:i,props:{},children:[{type:a,value:I}]}];M.type=d;M.children=[];O.type=d;O.children=[];R.type=d;R.children=[{type:b,tag:o,props:{id:"java面向对象"},children:[{type:b,tag:j,props:{ariaHidden:p,href:"#java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1",tabIndex:q},children:[{type:b,tag:r,props:{className:[s,t]},children:[]}]},{type:a,value:"Java面向对象"}]},{type:a,value:c},{type:b,tag:i,props:{},children:[{type:a,value:"Java面向对象有三大特点：封装，继承，多态。"}]},{type:a,value:c},{type:b,tag:"ul",props:{},children:[{type:a,value:c},{type:b,tag:z,props:{},children:[{type:a,value:"封装是把数据和操作隐藏到对象里面，无法看到对象是什么实现的，对象只向外界暴露最简单的接口。封装通过private，default，protected和public来控制封装和访问。"}]},{type:a,value:c},{type:b,tag:z,props:{},children:[{type:a,value:"继承是子类复用父类的代码。使得子类具有父类的全部行为和特性，但也能修改父类的行为和特性或者拓展自己新的行为和特性。java的类是单继承，接口是多继承。"}]},{type:a,value:c},{type:b,tag:z,props:{},children:[{type:a,value:"多态使得不同的子类对同一个请求可是有不同的响应，并且调用者不需要知道其实现是哪个子类的版本。多态分为编译时多态（重载）和运行时多态（重写）。"}]},{type:a,value:c}]}];W.type=d;W.children=[];Z.type=d;Z.children=[{type:b,tag:i,props:{},children:[{type:a,value:"JDBC是通过"},{type:b,tag:n,props:{},children:[{type:a,value:"Class.forName(String)"}]},{type:a,value:"反射加载所需的驱动类。然后就可以通过jdk自带的"},{type:b,tag:n,props:{},children:[{type:a,value:"DriverManager"}]},{type:a,value:"的静态方法获取一个数据库连接："},{type:b,tag:n,props:{},children:[{type:a,value:"Connection"}]},{type:a,value:"。通过这个Connection我们就可以对数据库进行增删查改了。要对数据库进行增删查改还是离不开sql。需要使用sql，调用Connection的方法创建一个"},{type:b,tag:n,props:{},children:[{type:a,value:"Statement"}]},{type:a,value:"或者"},{type:b,tag:n,props:{},children:[{type:a,value:"PreparedStatement"}]},{type:a,value:"对象。创建Statement就利用一句完整的sql就好了，但是不防止注入。而PreparedStatement的sql在参数上用问号代替，作为占位符。之后再填充这些占位符，其占位符是用下标指定，下标从1开始，是防止注入的。创建好PreparedStatement执行。在这里可以设置事务。如果是select，执行后返回一个"},{type:b,tag:n,props:{},children:[{type:a,value:"ResultSet"}]},{type:a,value:"对象作为返回结果。可以通过这个结果获取列名，元组的数据等。如果是insert，delete或者update，会返回一个int，表示受此命令影响的行数。"}]}];ab.type=d;ab.children=[{type:b,tag:i,props:{},children:[{type:a,value:"简单明了入门Netty，还是看官方文档来的好："},{type:b,tag:j,props:{href:"https:\u002F\u002Fnetty.io\u002Fwiki\u002Fuser-guide-for-4.x.html",rel:[ac,ad,ae],target:af,title:ag},children:[{type:a,value:ag}]},{type:a,value:"。接下来是我看我这篇文档之后的加工，想看的深一点可以看"},{type:b,tag:j,props:{href:"https:\u002F\u002Fsylvanassun.github.io\u002F2017\u002F11\u002F30\u002F2017-11-30-netty_introduction\u002F",rel:[ac,ad,ae],target:af,title:ah},children:[{type:a,value:ah}]},{type:a,value:"。最好是有些NIO的概念和基础。依照官方文档进行改进，下面代码是要实现一个时间服务器。功能为客户端连接到服务端时，服务端主动发送一个long时间戳给客户端，客户端收到这个时间后打印出来。并且客户端向服务端发送自己的long时间戳后关闭连接，服务器打印收到客户端的时间后也关闭连接。"}]}];am.type=d;am.children=[];ar.type=d;ar.children=[{type:b,tag:o,props:{id:"method对象"},children:[{type:b,tag:j,props:{ariaHidden:p,href:"#method%E5%AF%B9%E8%B1%A1",tabIndex:q},children:[{type:b,tag:r,props:{className:[s,t]},children:[]}]},{type:a,value:"Method对象"}]},{type:a,value:c},{type:b,tag:i,props:{},children:[{type:a,value:"既然是java的反射，就躲不开class对象。class对象保存着对应的Method，Field，Constructor。接下来以Method为例~~（因为我只看了Method）~~。"}]},{type:a,value:c},{type:b,tag:i,props:{},children:[{type:a,value:"不知为何，可能是为了安全把，class并不会直接暴露Method，这个Method对象叫做root对象。而是当需要获取这个rootMethod时，再new一个Method代理这个rootMethod。因此每次获取的Method对象都是新的对象。"}]}];return {data:[{navbarConfig:{brandText:"无名の窝",brandUrl:"\u002Fblog-code\u002F",navs:[{text:"文章",url:"\u002Fblog-code\u002Fpage\u002F1\u002F"},{text:"归档",url:"\u002Fblog-code\u002Farchive\u002F0\u002F"},{text:"画画",url:"\u002Fblog-code\u002Fhtml\u002Fhua.html"},{text:"开源",url:"\u002Fblog-code\u002Fhttps:\u002Fgithub.com\u002Fcellargalaxy\u002Fblog-vue"}]},homeConfig:{brandInterval:10000,brands:[{imageUrl:"https:\u002F\u002Fi.loli.net\u002F2020\u002F01\u002F21\u002FmMEAnwY5XPC2pFb.jpg",title:"日常",texts:["我们所度过的每个平凡的日常，也许就是连续不断发生的奇迹。","日々、私たちが過ごしている日常は、実は奇跡の連続なのかもしれない。"]},{imageUrl:"https:\u002F\u002Fi.loli.net\u002F2020\u002F04\u002F19\u002FH1MmXb9xPcYEhT2.jpg",title:"昨日之歌",texts:["时间梭梭箭如飞，人道漫漫步蹒跚","人間そんな変わるもんじゃないのに、月日ばっかどんどん過ぎて"]}],navs:[{text:"Github",url:"https:\u002F\u002Fgithub.com\u002Fcellargalaxy\u002F"}]},pageFootConfig:{lines:[[{text:"Copyright © 2017-? ."},{text:"备案？不存在的"},{text:"Powered by Nuxt.js & Github"}]]},buildTime:new Date(1650990223655),pageSize:10,total:110,currentPage:8,files:[{slug:A,description:"注解是什么\n注解用的多了，但是其实注解是什么。打个比喻，注解就是一张标签纸，上面写着若干信息，用来标记解释被贴上这张标签纸的事物.而其事物的性质并没有发生改变，无论这张标签纸上的解释是否正确。因此，使用注解是非入侵代码的。\n元注解\n元注解也是注解，不过是特殊的，用来标注其他注解的注解，就像Object是全部类的父类一样。比喻的说，就是标签纸A上可以贴标签纸B，标签纸B可以贴标签纸C……，最后的标签纸N就是元注解。元注解有五个：@Retention、@Target、@Inherited、@Documented、@Repeatable。",createdAt:B,updatedAt:B,toc:[],body:C,excerpt:C,dir:F,path:"\u002Fjava\u002F20180516\u002Fjava注解",extension:e,title:A,url:"\u002Fblog-code\u002Fview\u002Fjava\u002F20180516\u002Fjava注解",createAt:new Date(1526428800000),updateAt:new Date(1526428800000),attributes:[{name:f,value:G},{name:g,value:G},{name:h,value:F,url:"\u002Fblog-code\u002Fpage\u002Fjava\u002F20180516\u002F1\u002F"}]},{slug:H,description:I,createdAt:k,updatedAt:k,toc:[],body:J,excerpt:J,dir:l,path:"\u002F折腾\u002F20180515\u002Fmysql的主从数据库设置",extension:e,title:H,url:"\u002Fblog-code\u002Fview\u002F折腾\u002F20180515\u002Fmysql的主从数据库设置",createAt:new Date(1526342400000),updateAt:new Date(1526342400000),attributes:[{name:f,value:m},{name:g,value:m},{name:h,value:l,url:x}]},{slug:K,description:u,createdAt:k,updatedAt:k,toc:[{id:L,depth:y,text:L}],body:M,excerpt:M,dir:l,path:"\u002F折腾\u002F20180515\u002Fmysql和mariadb的安装卸载",extension:e,title:K,url:"\u002Fblog-code\u002Fview\u002F折腾\u002F20180515\u002Fmysql和mariadb的安装卸载",createAt:new Date(1526342400000),updateAt:new Date(1526342400000),attributes:[{name:f,value:m},{name:g,value:m},{name:h,value:l,url:x}]},{slug:N,description:u,createdAt:k,updatedAt:k,toc:[],body:O,excerpt:O,dir:l,path:"\u002F折腾\u002F20180515\u002Fmongodb的Replica Set主从配置",extension:e,title:N,url:"\u002Fblog-code\u002Fview\u002F折腾\u002F20180515\u002Fmongodb的Replica Set主从配置",createAt:new Date(1526342400000),updateAt:new Date(1526342400000),attributes:[{name:f,value:m},{name:g,value:m},{name:h,value:l,url:x}]},{slug:P,description:"Java面向对象\nJava面向对象有三大特点：封装，继承，多态。\n\n封装是把数据和操作隐藏到对象里面，无法看到对象是什么实现的，对象只向外界暴露最简单的接口。封装通过private，default，protected和public来控制封装和访问。\n继承是子类复用父类的代码。使得子类具有父类的全部行为和特性，但也能修改父类的行为和特性或者拓展自己新的行为和特性。java的类是单继承，接口是多继承。\n多态使得不同的子类对同一个请求可是有不同的响应，并且调用者不需要知道其实现是哪个子类的版本。多态分为编译时多态（重载）和运行时多态（重写）。\n",createdAt:Q,updatedAt:Q,toc:[],body:R,excerpt:R,dir:S,path:"\u002Fjava\u002F20180514\u002FExec的源码乱看与杂七杂八",extension:e,title:P,url:"\u002Fblog-code\u002Fview\u002Fjava\u002F20180514\u002FExec的源码乱看与杂七杂八",createAt:new Date(1526256000000),updateAt:new Date(1526256000000),attributes:[{name:f,value:T},{name:g,value:T},{name:h,value:S,url:"\u002Fblog-code\u002Fpage\u002Fjava\u002F20180514\u002F1\u002F"}]},{slug:U,description:u,createdAt:v,updatedAt:v,toc:[{id:V,depth:y,text:V},{id:"innodb的锁",depth:y,text:"InnoDB的锁"}],body:W,excerpt:W,dir:X,path:"\u002F中间件\u002F20180510\u002Fmysql杂七杂八",extension:e,title:U,url:"\u002Fblog-code\u002Fview\u002F中间件\u002F20180510\u002Fmysql杂七杂八",createAt:new Date(1525910400000),updateAt:new Date(1525910400000),attributes:[{name:f,value:w},{name:g,value:w},{name:h,value:X,url:"\u002Fblog-code\u002Fpage\u002F中间件\u002F20180510\u002F1\u002F"}]},{slug:Y,description:"JDBC是通过Class.forName(String)反射加载所需的驱动类。然后就可以通过jdk自带的DriverManager的静态方法获取一个数据库连接：Connection。通过这个Connection我们就可以对数据库进行增删查改了。要对数据库进行增删查改还是离不开sql。需要使用sql，调用Connection的方法创建一个Statement或者PreparedStatement对象。创建Statement就利用一句完整的sql就好了，但是不防止注入。而PreparedStatement的sql在参数上用问号代替，作为占位符。之后再填充这些占位符，其占位符是用下标指定，下标从1开始，是防止注入的。创建好PreparedStatement执行。在这里可以设置事务。如果是select，执行后返回一个ResultSet对象作为返回结果。可以通过这个结果获取列名，元组的数据等。如果是insert，delete或者update，会返回一个int，表示受此命令影响的行数。",createdAt:v,updatedAt:v,toc:[],body:Z,excerpt:Z,dir:_,path:"\u002Fjava\u002F20180510\u002FJDBC复习",extension:e,title:Y,url:"\u002Fblog-code\u002Fview\u002Fjava\u002F20180510\u002FJDBC复习",createAt:new Date(1525910400000),updateAt:new Date(1525910400000),attributes:[{name:f,value:w},{name:g,value:w},{name:h,value:_,url:"\u002Fblog-code\u002Fpage\u002Fjava\u002F20180510\u002F1\u002F"}]},{slug:$,description:"简单明了入门Netty，还是看官方文档来的好：Netty.docs: User guide for 4.x。接下来是我看我这篇文档之后的加工，想看的深一点可以看Netty的那点事儿。最好是有些NIO的概念和基础。依照官方文档进行改进，下面代码是要实现一个时间服务器。功能为客户端连接到服务端时，服务端主动发送一个long时间戳给客户端，客户端收到这个时间后打印出来。并且客户端向服务端发送自己的long时间戳后关闭连接，服务器打印收到客户端的时间后也关闭连接。",createdAt:aa,updatedAt:aa,toc:[],body:ab,excerpt:ab,dir:ai,path:"\u002Fjava\u002F20180509\u002FNetty学习",extension:e,title:$,url:"\u002Fblog-code\u002Fview\u002Fjava\u002F20180509\u002FNetty学习",createAt:new Date(1525824000000),updateAt:new Date(1525824000000),attributes:[{name:f,value:aj},{name:g,value:aj},{name:h,value:ai,url:"\u002Fblog-code\u002Fpage\u002Fjava\u002F20180509\u002F1\u002F"}]},{slug:ak,description:u,createdAt:al,updatedAt:al,toc:[],body:am,excerpt:am,dir:an,path:"\u002F数据结构\u002F20180508\u002F再看ConcurrentHashMap源码（1.7与1.8）",extension:e,title:ak,url:"\u002Fblog-code\u002Fview\u002F数据结构\u002F20180508\u002F再看ConcurrentHashMap源码（1.7与1.8）",createAt:new Date(1525737600000),updateAt:new Date(1525737600000),attributes:[{name:f,value:ao},{name:g,value:ao},{name:h,value:an,url:"\u002Fblog-code\u002Fpage\u002F数据结构\u002F20180508\u002F1\u002F"}]},{slug:ap,description:"Method对象\n既然是java的反射，就躲不开class对象。class对象保存着对应的Method，Field，Constructor。接下来以Method为例~~（因为我只看了Method）~~。\n不知为何，可能是为了安全把，class并不会直接暴露Method，这个Method对象叫做root对象。而是当需要获取这个rootMethod时，再new一个Method代理这个rootMethod。因此每次获取的Method对象都是新的对象。",createdAt:aq,updatedAt:aq,toc:[],body:ar,excerpt:ar,dir:as,path:"\u002Fjava\u002F20180430\u002Fjava反射源码",extension:e,title:ap,url:"\u002Fblog-code\u002Fview\u002Fjava\u002F20180430\u002Fjava反射源码",createAt:new Date(1525046400000),updateAt:new Date(1525046400000),attributes:[{name:f,value:at},{name:g,value:at},{name:h,value:as,url:"\u002Fblog-code\u002Fpage\u002Fjava\u002F20180430\u002F1\u002F"}]}]}],fetch:{},mutations:void 0}}("text","element","\n","root",".md","createAt","updateAt","sort","p","a","2018-05-15T00:00:00.000Z","\u002F折腾\u002F20180515","2018-05-15","code","h1","true",-1,"span","icon","icon-link","","2018-05-10T00:00:00.000Z","2018-05-10","\u002Fblog-code\u002Fpage\u002F折腾\u002F20180515\u002F1\u002F",2,"li","java注解","2018-05-16T00:00:00.000Z",{},"注解是什么","元注解","\u002Fjava\u002F20180516","2018-05-16","mysql的主从数据库设置","尝试了一下mysql主从数据库的同步，想不到还蛮简单的。网上说mysql做主从同步要数据库版本一样啊，系统都要一样啊等等一堆条件，但是我发现我本地ubuntu的从数据库mysql和vps的centos上面的主数据库mariadb都能成功同步。当然，如果是在生产环境下，这样子可以避免不必要的麻烦。还有主从数据库的数据一开始还是要一致的。",{},"mysql和mariadb的安装卸载","centos卸载mariadb",{},"mongodb的Replica Set主从配置",{},"Exec的源码乱看与杂七杂八","2018-05-14T00:00:00.000Z",{},"\u002Fjava\u002F20180514","2018-05-14","mysql杂七杂八","引擎的锁",{},"\u002F中间件\u002F20180510","JDBC复习",{},"\u002Fjava\u002F20180510","Netty学习","2018-05-09T00:00:00.000Z",{},"nofollow","noopener","noreferrer","_blank","Netty.docs: User guide for 4.x","Netty的那点事儿","\u002Fjava\u002F20180509","2018-05-09","再看ConcurrentHashMap源码（1.7与1.8）","2018-05-08T00:00:00.000Z",{},"\u002F数据结构\u002F20180508","2018-05-08","java反射源码","2018-04-30T00:00:00.000Z",{},"\u002Fjava\u002F20180430","2018-04-30")));