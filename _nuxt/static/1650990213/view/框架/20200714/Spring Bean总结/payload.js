__NUXT_JSONP__("/view/%E6%A1%86%E6%9E%B6/20200714/Spring%20Bean%E6%80%BB%E7%BB%93", (function(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,_,$,aa,ab){return {data:[{navbarConfig:{brandText:P,brandUrl:"\u002Fblog-code\u002F",navs:[{text:"文章",url:"\u002Fblog-code\u002Fpage\u002F1\u002F"},{text:"归档",url:"\u002Fblog-code\u002Farchive\u002F0\u002F"},{text:"画画",url:"\u002Fblog-code\u002Fhtml\u002Fhua.html"},{text:"开源",url:"\u002Fblog-code\u002Fhttps:\u002Fgithub.com\u002Fcellargalaxy\u002Fblog-vue"}]},homeConfig:{brandInterval:10000,brands:[{imageUrl:"https:\u002F\u002Fi.loli.net\u002F2020\u002F01\u002F21\u002FmMEAnwY5XPC2pFb.jpg",title:"日常",texts:["我们所度过的每个平凡的日常，也许就是连续不断发生的奇迹。","日々、私たちが過ごしている日常は、実は奇跡の連続なのかもしれない。"]},{imageUrl:"https:\u002F\u002Fi.loli.net\u002F2020\u002F04\u002F19\u002FH1MmXb9xPcYEhT2.jpg",title:"昨日之歌",texts:["时间梭梭箭如飞，人道漫漫步蹒跚","人間そんな変わるもんじゃないのに、月日ばっかどんどん過ぎて"]}],navs:[{text:"Github",url:"https:\u002F\u002Fgithub.com\u002Fcellargalaxy\u002F"}]},pageFootConfig:{lines:[[{text:"Copyright © 2017-? ."},{text:"备案？不存在的"},{text:"Powered by Nuxt.js & Github"}]]},buildTime:new Date(1650990221878),siteName:P,file:{slug:Q,description:x,createdAt:R,updatedAt:R,toc:[],body:{type:S,children:[{type:a,value:e},{type:b,tag:y,props:{id:"spring-bean-scope"},children:[{type:b,tag:l,props:{href:"#spring-bean-scope",ariaHidden:z,tabIndex:A},children:[{type:b,tag:c,props:{className:[B,C]},children:[]}]},{type:a,value:"Spring Bean Scope"}]},{type:a,value:e},{type:b,tag:j,props:{},children:[{type:a,value:"spring bean的作用域范围最常用的是单例和原型，使用"},{type:b,tag:D,props:{},children:[{type:a,value:"@Scope(\"prototype\")"}]},{type:a,value:"指定即可。"}]},{type:a,value:e},{type:b,tag:"ul",props:{},children:[{type:a,value:e},{type:b,tag:g,props:{},children:[{type:b,tag:T,props:{},children:[{type:a,value:"singleton(单例)"}]},{type:a,value:"：spring的scope默认是单例"}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:b,tag:T,props:{},children:[{type:a,value:"prototype(原型)"}]},{type:a,value:"：每一次对该bean的请求都会创建一个新的实例"}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"request：http请求每次都会创建一个新的实例"}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"session：http请求每个新的session都会创建一个新的实例"}]},{type:a,value:e}]},{type:a,value:e},{type:b,tag:y,props:{id:"spring-bean生命周期"},children:[{type:b,tag:l,props:{href:"#spring-bean%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F",ariaHidden:z,tabIndex:A},children:[{type:b,tag:c,props:{className:[B,C]},children:[]}]},{type:a,value:"Spring Bean生命周期"}]},{type:a,value:e},{type:b,tag:j,props:{},children:[{type:a,value:"spring只会帮我们去管理单例的bean的整个生命周期。\n对于原型的bean，spring在走完创建的流程，交给使用者后，bean的后续生命周期的流程就交由使用者进行管理了。"}]},{type:a,value:e},{type:b,tag:j,props:{},children:[{type:a,value:"所以下图的spring对单例的整个生命周期的管理。\n图中的"},{type:b,tag:D,props:{},children:[{type:a,value:"调用xx类的yy方法"}]},{type:a,value:"是指此bean实现了此接口才会调用。\n对于要自己管理对象的生命周期的话，除了第四步bean本来就在自己手上，其余的方法都是要自己调用的。\n所以常用的主要就是一下这几点。"}]},{type:a,value:e},{type:b,tag:U,props:{},children:[{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"spring负责调用构造函数创建对象"}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"spring负责注入依赖bean"}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"spring负责调用我们自定义的bean的初始化函数（如果有）"}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"spring负责注入bean，把bean交到使用者手上"}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"spring负责在容器关闭时调用我们自定义的bean的销毁函数（如果有）"}]},{type:a,value:e}]},{type:a,value:e},{type:b,tag:j,props:{},children:[{type:b,tag:V,props:{alt:x,"data-src":"http:\u002F\u002F123.207.79.108\u002Ffile\u002Ffile\u002Fblog\u002Fcode\u002F20200714\u002Fi.loli.net-2019-05-08-5cd1d7d0416f5.jpg.JPEG",loading:W},children:[]}]},{type:a,value:e},{type:b,tag:y,props:{id:"spring循环依赖"},children:[{type:b,tag:l,props:{href:"#spring%E5%BE%AA%E7%8E%AF%E4%BE%9D%E8%B5%96",ariaHidden:z,tabIndex:A},children:[{type:b,tag:c,props:{className:[B,C]},children:[]}]},{type:a,value:"Spring循环依赖"}]},{type:a,value:e},{type:b,tag:j,props:{},children:[{type:a,value:"spring的循环依赖问题是指几个bean直接相互引用，例如A引用B，B又引用A，或者直接是A引用自己。\nspring的依赖注入有三种入口：构造函数注入，成员变量注入和setter注入。\n而spring只能解决单例的成员变量或者setter注入问题。\n首先，无论bean的作用域是哪种，构造函数注入的循环应用都是无解的。\n而对于作用域是原型的，则无论哪种注入方式也都是无解的。\n因为例如A1引用B1，B1又引用A2，A2-\u003EB2，如此反复无穷无尽也。\n所以对于以上无解情形spring检测出来会抛异常，而有解的只有单例的成员变量和setter注入。\nspring循环依赖的解决办法是通过三个map做bean的缓存实现的。"}]},{type:a,value:e},{type:b,tag:"div",props:{className:["nuxt-content-highlight"]},children:[{type:b,tag:"pre",props:{className:["language-java","line-numbers"]},children:[{type:b,tag:D,props:{},children:[{type:b,tag:c,props:{className:[d,E,F]},children:[{type:a,value:"\u002F** 单例池：存放初始化好的bean，拿出来就能用 *\u002F"}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:G}]},{type:a,value:h},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:H}]},{type:a,value:h},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:I}]},{type:b,tag:c,props:{className:[d,o]},children:[{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:m}]},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:p}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:q}]},{type:a,value:h},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:w}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:n}]}]},{type:a,value:" singletonObjects "},{type:b,tag:c,props:{className:[d,r]},children:[{type:a,value:J}]},{type:a,value:h},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:K}]},{type:a,value:h},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:"ConcurrentHashMap"}]},{type:b,tag:c,props:{className:[d,o]},children:[{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:m}]},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:p}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:q}]},{type:a,value:h},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:w}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:n}]}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:L}]},{type:b,tag:c,props:{className:[d,M]},children:[{type:a,value:"256"}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:N}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:O}]},{type:a,value:X},{type:b,tag:c,props:{className:[d,E,F]},children:[{type:a,value:"\u002F** 存放用于创建[还没创建的]bean的工厂对象 *\u002F"}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:G}]},{type:a,value:h},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:H}]},{type:a,value:h},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:I}]},{type:b,tag:c,props:{className:[d,o]},children:[{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:m}]},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:p}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:q}]},{type:a,value:h},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:Y}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:m}]},{type:b,tag:c,props:{className:[d,r]},children:[{type:a,value:Z}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:n}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:n}]}]},{type:a,value:" singletonFactories "},{type:b,tag:c,props:{className:[d,r]},children:[{type:a,value:J}]},{type:a,value:h},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:K}]},{type:a,value:h},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:_}]},{type:b,tag:c,props:{className:[d,o]},children:[{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:m}]},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:p}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:q}]},{type:a,value:h},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:Y}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:m}]},{type:b,tag:c,props:{className:[d,r]},children:[{type:a,value:Z}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:n}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:n}]}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:L}]},{type:b,tag:c,props:{className:[d,M]},children:[{type:a,value:$}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:N}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:O}]},{type:a,value:X},{type:b,tag:c,props:{className:[d,E,F]},children:[{type:a,value:"\u002F** 早期引用：存放还没初始化完成的bean *\u002F"}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:G}]},{type:a,value:h},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:H}]},{type:a,value:h},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:I}]},{type:b,tag:c,props:{className:[d,o]},children:[{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:m}]},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:p}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:q}]},{type:a,value:h},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:w}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:n}]}]},{type:a,value:" earlySingletonObjects "},{type:b,tag:c,props:{className:[d,r]},children:[{type:a,value:J}]},{type:a,value:h},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:K}]},{type:a,value:h},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:_}]},{type:b,tag:c,props:{className:[d,o]},children:[{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:m}]},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:p}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:q}]},{type:a,value:h},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:w}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:n}]}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:L}]},{type:b,tag:c,props:{className:[d,M]},children:[{type:a,value:$}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:N}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:O}]},{type:a,value:e}]}]}]},{type:a,value:e},{type:b,tag:j,props:{},children:[{type:a,value:"例如下图的AB互相引用的例子"}]},{type:a,value:e},{type:b,tag:U,props:{},children:[{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"从singletonObjects里检查A是不是已经初始化完成，是的话则返回"}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"否则创建A，将A封装到A工厂里，放到工厂map"}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"初始化A，发现A依赖B"}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"从singletonObjects里检查B是不是已经初始化完成，是的话则返回"}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"否则创建B，将B封装到B工厂里，放到工厂map"}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"初始化B，发现B依赖A"}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"发现A在工厂map里，将A移到早期引用map里，工厂map移除A工厂"}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"B在早期引用注入A，B完成初始化"}]},{type:a,value:e},{type:b,tag:g,props:{},children:[{type:a,value:"A在单例池注入B，A完成初始化"}]},{type:a,value:e}]},{type:a,value:e},{type:b,tag:j,props:{},children:[{type:b,tag:V,props:{alt:x,"data-src":"http:\u002F\u002F123.207.79.108\u002Ffile\u002Ffile\u002Fblog\u002Fcode\u002F20200714\u002Fbijeuubd5z.gif",loading:W},children:[]}]},{type:a,value:e},{type:b,tag:j,props:{},children:[{type:a,value:"参考文章："}]},{type:a,value:e},{type:b,tag:j,props:{},children:[{type:b,tag:l,props:{href:"https:\u002F\u002Fblog.csdn.net\u002Fpange1991\u002Farticle\u002Fdetails\u002F81429393",rel:[s,t,u],target:v},children:[{type:a,value:"Spring bean scope 的几种类型"}]}]},{type:a,value:e},{type:b,tag:j,props:{},children:[{type:b,tag:l,props:{href:"https:\u002F\u002Fcrossoverjie.top\u002F2018\u002F03\u002F21\u002Fspring\u002Fspring-bean-lifecycle\u002F",rel:[s,t,u],target:v},children:[{type:a,value:"Spring Bean 生命周期"}]}]},{type:a,value:e},{type:b,tag:j,props:{},children:[{type:b,tag:l,props:{href:"https:\u002F\u002Fwww.javazhiyin.com\u002F37577.html",rel:[s,t,u],target:v},children:[{type:a,value:"深究Spring中Bean的生命周期"}]}]},{type:a,value:e},{type:b,tag:j,props:{},children:[{type:b,tag:l,props:{href:"http:\u002F\u002Fwww.tianxiaobo.com\u002F2018\u002F06\u002F08\u002FSpring-IOC-%E5%AE%B9%E5%99%A8%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-%E5%BE%AA%E7%8E%AF%E4%BE%9D%E8%B5%96%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95\u002F",rel:[s,t,u],target:v},children:[{type:a,value:"Spring IOC 容器源码分析 - 循环依赖的解决办法"}]}]},{type:a,value:e},{type:b,tag:j,props:{},children:[{type:b,tag:l,props:{href:"https:\u002F\u002Fcloud.tencent.com\u002Fdeveloper\u002Farticle\u002F1632576",rel:[s,t,u],target:v},children:[{type:a,value:"拜托，别再问我Spring循环依赖了，给你手写出来行不行？"}]}]}]},excerpt:{type:S,children:[]},dir:aa,path:"\u002F框架\u002F20200714\u002FSpring Bean总结",extension:".md",title:Q,url:"\u002Fblog-code\u002Fview\u002F框架\u002F20200714\u002FSpring Bean总结",createAt:new Date(1594684800000),updateAt:new Date(1594684800000),attributes:[{name:"createAt",value:ab},{name:"updateAt",value:ab},{name:"sort",value:aa,url:"\u002Fblog-code\u002Fpage\u002F框架\u002F20200714\u002F1\u002F"}]}}],fetch:{},mutations:void 0}}("text","element","span","token","\n","punctuation","li"," ","class-name","p","keyword","a","\u003C","\u003E","generics","String",",","operator","nofollow","noopener","noreferrer","_blank","Object","","h1","true",-1,"icon","icon-link","code","doc-comment","comment","private","final","Map","=","new","(","number",")",";","无名の窝","Spring Bean总结","2020-07-14T00:00:00.000Z","root","strong","ol","img","lazy","\n\n","ObjectFactory","?","HashMap","16","\u002F框架\u002F20200714","2020-07-14")));