__NUXT_JSONP__("/view/java/20181209/Java多线程", (function(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,_,$,aa,ab,ac,ad,ae,af,ag,ah,ai,aj,ak,al,am,an,ao,ap,aq,ar,as,at,au,av,aw,ax,ay,az,aA,aB,aC,aD,aE,aF,aG,aH,aI,aJ,aK,aL,aM,aN,aO){return {data:[{siteConfig:{siteName:ao,siteHost:"https:\u002F\u002Fcellargalaxy.github.io",basePath:"\u002Fblog-code\u002F",navs:[{text:"文章",url:"\u002Fblog-code\u002Fpage\u002F1\u002F"},{text:"归档",url:"\u002Fblog-code\u002Farchive\u002F0\u002F"},{text:"画画",url:"\u002Fblog-code\u002Fhtml\u002Fhua.html"},{text:"开源",url:"\u002Fblog-code\u002Fhttps:\u002Fgithub.com\u002Fcellargalaxy\u002Fblog-vue"}],pageSize:10,urlReplace:{"^/file/blog/code":"https:\u002F\u002Foracleamd1.dynv6.net\u002Ffile\u002Ffile\u002Fblog\u002Fcode"},backgroundImage:{duration:ap,fade:1000,images:[{url:"https:\u002F\u002Fi.loli.net\u002F2020\u002F01\u002F25\u002FcofTzDQXitjeVZ6.jpg",description:aq,type:B},{url:"https:\u002F\u002Fi.loli.net\u002F2020\u002F01\u002F25\u002FsfaRJ2lVeM3NDbE.jpg",description:aq,type:B},{url:"https:\u002F\u002Fi.loli.net\u002F2020\u002F01\u002F26\u002FKybiTdftam5Su7x.jpg",description:"青春猪头-双葉理央",type:B},{url:"https:\u002F\u002Fi.loli.net\u002F2020\u002F09\u002F08\u002FxdX73nfs24qgOYk.jpg",description:"京吹-明日香,久美子",type:B},{url:"https:\u002F\u002Fi.loli.net\u002F2020\u002F02\u002F14\u002FMAiruNcEFW2HYtg.jpg",description:"终将成为你-七海灯子,小糸侑",type:B},{url:"https:\u002F\u002Fi.loli.net\u002F2020\u002F02\u002F05\u002FEojdAxTDJsFpbPw.jpg",description:"玉子市场-北白川玉子",type:B},{url:"https:\u002F\u002Fi.loli.net\u002F2020\u002F01\u002F31\u002FAXxwJDRS9fmN2uU.jpg",description:"fate_hf-弓道馆",type:B},{url:"https:\u002F\u002Fi.loli.net\u002F2020\u002F02\u002F01\u002FaHhVObpJus6dnM4.jpg",description:"fate_hf-樱花树",type:B}]}},homeConfig:{brandInterval:ap,brands:[{imageUrl:"https:\u002F\u002Fi.loli.net\u002F2020\u002F01\u002F21\u002FmMEAnwY5XPC2pFb.jpg",title:"日常",texts:["我们所度过的每个平凡的日常，也许就是连续不断发生的奇迹。","日々、私たちが過ごしている日常は、実は奇跡の連続なのかもしれない。"]},{imageUrl:"https:\u002F\u002Fi.loli.net\u002F2020\u002F04\u002F19\u002FH1MmXb9xPcYEhT2.jpg",title:"昨日之歌",texts:["时间梭梭箭如飞，人道漫漫步蹒跚","人間そんな変わるもんじゃないのに、月日ばっかどんどん過ぎて"]}],navs:[{text:"Github",url:"https:\u002F\u002Fgithub.com\u002Fcellargalaxy\u002F"}]},pageFootConfig:{lines:[[{text:"Copyright © 2017-? ."},{text:"备案？不存在的"},{text:"Powered by Nuxt.js & Github"}]]},buildTime:new Date(1684677969199),siteName:ao,file:{slug:ar,description:"进程\n孤儿进程与僵尸进程\n子进程是由父进程创建的，linux能确保子进程结束后，父进程能通过调用wait()或者waitpid()系统调用获取到子进程的信息。\n其实现方式是，当子进程结束后，虽然系统会是否子进程的大部分资源，如打开的文件，内存等，但是还是会保留少量资源，如pid，直到父进程调用获取子进程的信息才会释放。\n因此，如果子进程还没结束，父进程就结束了，那这些子进程则是孤儿进程，会被init进程（pid=1）收养，以调用释放孤儿进程的资源。\n但是如果子进程结束了，但他的父进程既不结束也不调用释放资源，那么这些子进程则是僵尸进程，会一直占用pid，直到系统无pid可用。",createdAt:as,updatedAt:as,toc:[{id:D,depth:x,text:D},{id:at,depth:x,text:au},{id:G,depth:x,text:G},{id:H,depth:x,text:H},{id:I,depth:x,text:I},{id:J,depth:x,text:J},{id:K,depth:x,text:K},{id:L,depth:x,text:L},{id:M,depth:x,text:M},{id:N,depth:x,text:N},{id:O,depth:x,text:O}],body:{type:av,children:[{type:b,tag:P,props:{id:Q},children:[{type:b,tag:l,props:{href:aw,ariaHidden:n,tabIndex:q},children:[{type:b,tag:c,props:{className:[r,s]},children:[]}]},{type:a,value:Q}]},{type:a,value:e},{type:b,tag:v,props:{id:D},children:[{type:b,tag:l,props:{href:ax,ariaHidden:n,tabIndex:q},children:[{type:b,tag:c,props:{className:[r,s]},children:[]}]},{type:a,value:D}]},{type:a,value:e},{type:b,tag:o,props:{},children:[{type:a,value:ay}]},{type:a,value:e},{type:a,value:e},{type:b,tag:P,props:{id:az},children:[{type:b,tag:l,props:{href:"#%E7%BA%BF%E7%A8%8B",ariaHidden:n,tabIndex:q},children:[{type:b,tag:c,props:{className:[r,s]},children:[]}]},{type:a,value:az}]},{type:a,value:e},{type:b,tag:v,props:{id:at},children:[{type:b,tag:l,props:{href:"#%E4%BB%80%E4%B9%88%E6%98%AF%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8",ariaHidden:n,tabIndex:q},children:[{type:b,tag:c,props:{className:[r,s]},children:[]}]},{type:a,value:au}]},{type:a,value:e},{type:b,tag:o,props:{},children:[{type:a,value:"个人理解，确保多个线程操作同一个数据，不会出现错误的结果或者异常，则是线程安全。\n而实现线程安全的本质则是加锁。无论是synchronized，CAS，ConcurrentHasMap还是CountDownLatch来实现线程安全，其实都是锁。"}]},{type:a,value:e},{type:b,tag:v,props:{id:G},children:[{type:b,tag:l,props:{href:"#%E7%BA%BF%E7%A8%8B%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F",ariaHidden:n,tabIndex:q},children:[{type:b,tag:c,props:{className:[r,s]},children:[]}]},{type:a,value:G}]},{type:a,value:e},{type:b,tag:af,props:{},children:[{type:a,value:e},{type:b,tag:i,props:{},children:[{type:a,value:"新建(New)：new了一个线程对象"}]},{type:a,value:e},{type:b,tag:i,props:{},children:[{type:a,value:"就绪（Runnable）：调用了start方法，但线程还没获取到CPU时间"}]},{type:a,value:e},{type:b,tag:i,props:{},children:[{type:a,value:"运行（Running）：线程获取到CPU时间，正在执行run方法"}]},{type:a,value:e},{type:b,tag:i,props:{},children:[{type:a,value:"阻塞(Blocked)：由于各种原因被阻塞（synchronized，wait，sleep，join，IO，）"}]},{type:a,value:e},{type:b,tag:i,props:{},children:[{type:a,value:"死亡(Dead)：线程完成run方法或者报异常"}]},{type:a,value:e}]},{type:a,value:e},{type:b,tag:v,props:{id:H},children:[{type:b,tag:l,props:{href:"#%E5%88%9B%E5%BB%BA%E7%BA%BF%E7%A8%8B%E7%9A%84%E6%96%B9%E5%BC%8F",ariaHidden:n,tabIndex:q},children:[{type:b,tag:c,props:{className:[r,s]},children:[]}]},{type:a,value:H}]},{type:a,value:e},{type:b,tag:o,props:{},children:[{type:a,value:"线程创建的方法有五种（如果线程池的两种也算的话）："}]},{type:a,value:e},{type:b,tag:af,props:{},children:[{type:a,value:e},{type:b,tag:i,props:{},children:[{type:b,tag:A,props:{},children:[{type:a,value:"继承Thread类，重写run方法"}]}]},{type:a,value:e},{type:b,tag:i,props:{},children:[{type:b,tag:A,props:{},children:[{type:a,value:"new Thread(new Runnable())"}]}]},{type:a,value:e},{type:b,tag:i,props:{},children:[{type:b,tag:A,props:{},children:[{type:a,value:"new Thread(new FutureTask(new Callable\u003CT\u003E()))"}]}]},{type:a,value:e},{type:b,tag:i,props:{},children:[{type:b,tag:A,props:{},children:[{type:a,value:"void execute(new Runnable())"}]}]},{type:a,value:e},{type:b,tag:i,props:{},children:[{type:b,tag:A,props:{},children:[{type:a,value:"\u003CT\u003E Future\u003CT\u003E submit(new Callable\u003CT\u003E())"}]}]},{type:a,value:e}]},{type:a,value:e},{type:b,tag:v,props:{id:I},children:[{type:b,tag:l,props:{href:"#%E5%A6%82%E4%BD%95%E5%85%B3%E9%97%AD%E7%BA%BF%E7%A8%8B",ariaHidden:n,tabIndex:q},children:[{type:b,tag:c,props:{className:[r,s]},children:[]}]},{type:a,value:I}]},{type:a,value:e},{type:b,tag:o,props:{},children:[{type:a,value:"调用废弃的stop方法会立即抛出ThreadDeath异常，并释放全部的锁来停止线程。\n但是这个异常可能在任何地方抛出，如果抛出的时候正在做什么操作而被强行中断，则有可能导致安全问题。\n因此正确的方式应该是调用interrupt方法，我们需要在run方法的逻辑里自行判断当前线程是否被调用过interrupt方法，来自行决定是否要结束线程。\n其中获取是否被调用过interrupt方法的方法有："}]},{type:a,value:e},{type:b,tag:R,props:{className:[S]},children:[{type:b,tag:T,props:{className:[U,V]},children:[{type:b,tag:A,props:{},children:[{type:b,tag:c,props:{className:[d,t]},children:[{type:a,value:"\u002F\u002F返回是否被调用过interrupt方法，重置中断状态"}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:F}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:W}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:C}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,u]},children:[{type:a,value:"interrupted"}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:k}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:y}]},{type:a,value:p},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:aA}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,u]},children:[{type:a,value:X}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,C]},children:[{type:a,value:n}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:k}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:w}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:z}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,t]},children:[{type:a,value:"\u002F\u002F返回是否被调用过interrupt方法，不重置中断状态"}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:F}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:C}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,u]},children:[{type:a,value:X}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:k}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:y}]},{type:a,value:p},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:aA}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,u]},children:[{type:a,value:X}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,C]},children:[{type:a,value:"false"}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:k}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:w}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:z}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,t]},children:[{type:a,value:"\u002F\u002F返回是否被调用过interrupt方法，入参含义是是否重置中断状态"}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:ag}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:"native"}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:C}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,u]},children:[{type:a,value:X}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:C}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:"ClearInterrupted"}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:k}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:w}]},{type:a,value:"\n\n"},{type:b,tag:c,props:{className:[d,t]},children:[{type:a,value:"\u002F\u002F如果在sleep，wait等方法时调用interrupt方法，会抛InterruptedException"}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,t]},children:[{type:a,value:"\u002F\u002F但抛了InterruptedException之后，会重置中断状态，因为已经通过抛异常来通知了"}]},{type:a,value:e}]}]}]},{type:a,value:e},{type:b,tag:v,props:{id:J},children:[{type:b,tag:l,props:{href:"#%E6%AD%BB%E9%94%81",ariaHidden:n,tabIndex:q},children:[{type:b,tag:c,props:{className:[r,s]},children:[]}]},{type:a,value:J}]},{type:a,value:e},{type:b,tag:o,props:{},children:[{type:a,value:"死锁是例如两个线程都各自持有一个锁的同时尝试去获取对方的锁，并且获取对方的锁是无条件等待的，不获取到对方的锁就不释放自己的锁的情形。\n要解决死锁，【两个线程都各自持有一个锁的同时尝试去获取对方的锁】是很难避免。\n因此问题的根源在于【获取对方的锁是无条件等待的】，也就是如果获取锁的超时的或者是尝试性的，总会有一方因为等不下去，回滚业务，释放自己的锁，使得另外一方获取到全部的锁。\n因此可以用CAS或者Lock来替代synchronized。"}]},{type:a,value:e},{type:b,tag:R,props:{className:[S]},children:[{type:b,tag:T,props:{className:[U,V]},children:[{type:b,tag:A,props:{},children:[{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:F}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:"class"}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:"LockTest"}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:y}]},{type:a,value:p},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:ag}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:W}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:ah}]},{type:a,value:" lock1 "},{type:b,tag:c,props:{className:[d,Y]},children:[{type:a,value:aB}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,aC]},children:[{type:a,value:"\"lock1\""}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:w}]},{type:a,value:p},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:ag}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:W}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:ah}]},{type:a,value:" lock2 "},{type:b,tag:c,props:{className:[d,Y]},children:[{type:a,value:aB}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,aC]},children:[{type:a,value:"\"lock2\""}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:w}]},{type:a,value:"\n\n    "},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:F}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:W}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:Z}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,u]},children:[{type:a,value:"main"}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:ah}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:"["}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:"]"}]},{type:a,value:" args"},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:k}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:y}]},{type:a,value:_},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:aD}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:aE}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:k}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,Y]},children:[{type:a,value:aF}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:y}]},{type:a,value:$},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:aa}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:j}]},{type:a,value:aG},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:k}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:y}]},{type:a,value:ab},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:aa}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:j}]},{type:a,value:aH},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:k}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:y}]},{type:a,value:ab},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:z}]},{type:a,value:$},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:z}]},{type:a,value:_},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:z}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:k}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:aI}]},{type:b,tag:c,props:{className:[d,u]},children:[{type:a,value:aJ}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:k}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:w}]},{type:a,value:_},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:aD}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:aE}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:k}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,Y]},children:[{type:a,value:aF}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:y}]},{type:a,value:$},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:aa}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:j}]},{type:a,value:aH},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:k}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:y}]},{type:a,value:ab},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:aa}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:j}]},{type:a,value:aG},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:k}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:y}]},{type:a,value:ab},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:z}]},{type:a,value:$},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:z}]},{type:a,value:_},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:z}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:k}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:aI}]},{type:b,tag:c,props:{className:[d,u]},children:[{type:a,value:aJ}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:k}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:w}]},{type:a,value:p},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:z}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:z}]},{type:a,value:e}]}]}]},{type:a,value:e},{type:b,tag:P,props:{id:aK},children:[{type:b,tag:l,props:{href:"#%E7%BA%BF%E7%A8%8B%E6%B1%A0",ariaHidden:n,tabIndex:q},children:[{type:b,tag:c,props:{className:[r,s]},children:[]}]},{type:a,value:aK}]},{type:a,value:e},{type:b,tag:v,props:{id:K},children:[{type:b,tag:l,props:{href:"#%E7%BA%BF%E7%A8%8B%E6%B1%A0%E4%BD%9C%E7%94%A8",ariaHidden:n,tabIndex:q},children:[{type:b,tag:c,props:{className:[r,s]},children:[]}]},{type:a,value:K}]},{type:a,value:e},{type:b,tag:o,props:{},children:[{type:a,value:"线程的创建和销毁成本很大，并且线程也不能无限制创建。所以需要线程池来预创建线程来提高响应，也限制线程数量，复用线程。"}]},{type:a,value:e},{type:b,tag:v,props:{id:L},children:[{type:b,tag:l,props:{href:"#%E7%BA%BF%E7%A8%8B%E6%B1%A0%E6%A0%B8%E5%BF%83%E5%8F%82%E6%95%B0",ariaHidden:n,tabIndex:q},children:[{type:b,tag:c,props:{className:[r,s]},children:[]}]},{type:a,value:L}]},{type:a,value:e},{type:b,tag:o,props:{},children:[{type:a,value:"ThreadPoolExecutor的构造函数的入参，也是线程池的核心参数如下"}]},{type:a,value:e},{type:b,tag:R,props:{className:[S]},children:[{type:b,tag:T,props:{className:[U,V]},children:[{type:b,tag:A,props:{},children:[{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:F}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:"ThreadPoolExecutor"}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:j}]},{type:a,value:p},{type:b,tag:c,props:{className:[d,t]},children:[{type:a,value:"\u002F\u002F核心线程池数"}]},{type:a,value:p},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:aL}]},{type:a,value:" corePoolSize"},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:E}]},{type:a,value:p},{type:b,tag:c,props:{className:[d,t]},children:[{type:a,value:"\u002F\u002F最大线程池数"}]},{type:a,value:p},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:aL}]},{type:a,value:" maximumPoolSize"},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:E}]},{type:a,value:p},{type:b,tag:c,props:{className:[d,t]},children:[{type:a,value:"\u002F\u002F线程最大空闲时间与单位"}]},{type:a,value:p},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:"long"}]},{type:a,value:" keepAliveTime"},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:E}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:"TimeUnit"}]},{type:a,value:" unit"},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:E}]},{type:a,value:p},{type:b,tag:c,props:{className:[d,t]},children:[{type:a,value:"\u002F\u002F保存任务的阻塞队列"}]},{type:a,value:p},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:"BlockingQueue"}]},{type:b,tag:c,props:{className:[d,ac]},children:[{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:ad}]},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:aM}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:ae}]}]},{type:a,value:" workQueue"},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:E}]},{type:a,value:p},{type:b,tag:c,props:{className:[d,t]},children:[{type:a,value:"\u002F\u002F线程工厂"}]},{type:a,value:p},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:"ThreadFactory"}]},{type:a,value:" threadFactory"},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:E}]},{type:a,value:p},{type:b,tag:c,props:{className:[d,t]},children:[{type:a,value:"\u002F\u002F饱和策略"}]},{type:a,value:p},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:"RejectedExecutionHandler"}]},{type:a,value:" handler"},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:k}]},{type:a,value:e}]}]}]},{type:a,value:e},{type:b,tag:o,props:{},children:[{type:a,value:"线程池的工作流程如下："}]},{type:a,value:e},{type:b,tag:af,props:{},children:[{type:a,value:e},{type:b,tag:i,props:{},children:[{type:a,value:"一开始线程池是没有线程的"}]},{type:a,value:e},{type:b,tag:i,props:{},children:[{type:a,value:"当添加任务的时候，线程池会检查线程数是否达到核心线程数，如果没达到就创建新的线程来执行（全局锁）"}]},{type:a,value:e},{type:b,tag:i,props:{},children:[{type:a,value:"如果达到核心线程数，则把任务放进队列"}]},{type:a,value:e},{type:b,tag:i,props:{},children:[{type:a,value:"如果队列已经满了，则会检查线程数是否达到最大线程数，如果没达到就创建新的线程来执行（全局锁）"}]},{type:a,value:e},{type:b,tag:i,props:{},children:[{type:a,value:"如果线程数达到最大线程数，则会使用拒绝策略"}]},{type:a,value:e},{type:b,tag:i,props:{},children:[{type:a,value:"如果任务量下降，会把大于核心线程数的，线程空闲时间大于线程最大空闲时间的线程销毁，即最后会保留核心线程数数量的线程"}]},{type:a,value:e}]},{type:a,value:e},{type:b,tag:o,props:{},children:[{type:a,value:"阻塞队列有几种："}]},{type:a,value:e},{type:b,tag:ai,props:{},children:[{type:a,value:e},{type:b,tag:i,props:{},children:[{type:a,value:"ArrayBlockingQueue：数组，有界，先进先出"}]},{type:a,value:e},{type:b,tag:i,props:{},children:[{type:a,value:"LinkedBlockingQueue：链表，无界，先进先出（FixedThreadPool，SingleThreadExecutor）"}]},{type:a,value:e},{type:b,tag:i,props:{},children:[{type:a,value:"SynchronousQueue：不存储元素，插入必须移除，否则阻塞（CachedThreadPool）"}]},{type:a,value:e},{type:b,tag:i,props:{},children:[{type:a,value:"PriorityBlockingQueue：有优先级，无界"}]},{type:a,value:e}]},{type:a,value:e},{type:b,tag:o,props:{},children:[{type:a,value:"饱和策略有四种："}]},{type:a,value:e},{type:b,tag:ai,props:{},children:[{type:a,value:e},{type:b,tag:i,props:{},children:[{type:a,value:"CallerRunsPolicy：当线程池没有关闭，使用添加任务的线程来执行此任务"}]},{type:a,value:e},{type:b,tag:i,props:{},children:[{type:a,value:"DiscardPolicy：丢弃任务"}]},{type:a,value:e},{type:b,tag:i,props:{},children:[{type:a,value:"DiscardOldestPolicy：丢弃最旧的任务，在尝试添加此任务"}]},{type:a,value:e},{type:b,tag:i,props:{},children:[{type:a,value:"AbortPolicy：直接抛出RejectedExecutionException异常"}]},{type:a,value:e}]},{type:a,value:e},{type:b,tag:v,props:{id:M},children:[{type:b,tag:l,props:{href:"#%E5%88%9B%E5%BB%BA%E7%BA%BF%E7%A8%8B%E6%B1%A0%E7%9A%84%E6%96%B9%E5%BC%8F",ariaHidden:n,tabIndex:q},children:[{type:b,tag:c,props:{className:[r,s]},children:[]}]},{type:a,value:M}]},{type:a,value:e},{type:b,tag:o,props:{},children:[{type:a,value:"Executors类提供了好几个静态方法来创建不同类型的线程池，但是这些方法都只是返回新new的ThreadPoolExecutor对象，区别只是ThreadPoolExecutor构造函数的入参值不同"}]},{type:a,value:e},{type:b,tag:ai,props:{},children:[{type:a,value:e},{type:b,tag:i,props:{},children:[{type:a,value:"newFixedThreadPool(int nThreads)：线程数固定的，等待队列无界"}]},{type:a,value:e},{type:b,tag:i,props:{},children:[{type:a,value:"newSingleThreadExecutor()：单线程，等待队列无界"}]},{type:a,value:e},{type:b,tag:i,props:{},children:[{type:a,value:"newCachedThreadPool()：线程数自动的，等待队列为0"}]},{type:a,value:e},{type:b,tag:i,props:{},children:[{type:a,value:"newScheduledThreadPool(int corePoolSize)：支持定时以及周期性执行任务的，等待队列无界"}]},{type:a,value:e}]},{type:a,value:e},{type:b,tag:v,props:{id:N},children:[{type:b,tag:l,props:{href:"#%E9%85%8D%E7%BD%AE%E7%BA%BF%E7%A8%8B%E6%B1%A0",ariaHidden:n,tabIndex:q},children:[{type:b,tag:c,props:{className:[r,s]},children:[]}]},{type:a,value:N}]},{type:a,value:e},{type:b,tag:o,props:{},children:[{type:a,value:"CPU密集型：核心线程数=CPU核数+1\nIO密集型：核心线程数=CPU核数*2\n阻塞队列最好有界，以触发饱和策略来预警"}]},{type:a,value:e},{type:b,tag:v,props:{id:O},children:[{type:b,tag:l,props:{href:"#%E5%85%B6%E4%BB%96%E6%96%B9%E6%B3%95",ariaHidden:n,tabIndex:q},children:[{type:b,tag:c,props:{className:[r,s]},children:[]}]},{type:a,value:O}]},{type:a,value:e},{type:b,tag:R,props:{className:[S]},children:[{type:b,tag:T,props:{className:[U,V]},children:[{type:b,tag:A,props:{},children:[{type:b,tag:c,props:{className:[d,t]},children:[{type:a,value:"\u002F\u002F提交任务"}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:Z}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,u]},children:[{type:a,value:"execute"}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:aM}]},{type:a,value:" command"},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:k}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:w}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,ac]},children:[{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:ad}]},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:aj}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:ae}]}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:"Future"}]},{type:b,tag:c,props:{className:[d,ac]},children:[{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:ad}]},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:aj}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:ae}]}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,u]},children:[{type:a,value:"submit"}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:"Callable"}]},{type:b,tag:c,props:{className:[d,ac]},children:[{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:ad}]},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:aj}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:ae}]}]},{type:a,value:" task"},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:k}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:w}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,t]},children:[{type:a,value:"\u002F\u002F关闭线程池"}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:Z}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,u]},children:[{type:a,value:"shutdown"}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:k}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:w}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,t]},children:[{type:a,value:"\u002F\u002F关闭线程池，不再接受新的任务，直到现有任务都完成就完成关闭"}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:Z}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,u]},children:[{type:a,value:"shutdownNow"}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:k}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:w}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,t]},children:[{type:a,value:"\u002F\u002F关闭线程池，不再接受新的任务，现有任务的线程终止"}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:C}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,u]},children:[{type:a,value:"isShutdown"}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:k}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:w}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,t]},children:[{type:a,value:"\u002F\u002F线程池是否已经关闭"}]},{type:a,value:e}]}]}]},{type:a,value:e},{type:b,tag:o,props:{},children:[{type:a,value:"参考文章："}]},{type:a,value:e},{type:b,tag:o,props:{},children:[{type:b,tag:l,props:{href:"https:\u002F\u002Fwww.jianshu.com\u002Fp\u002F264d4e1b76af",rel:[ak,al,am],target:an},children:[{type:a,value:"Java线程中断的正确姿势"}]}]},{type:a,value:e},{type:b,tag:o,props:{},children:[{type:b,tag:l,props:{href:"https:\u002F\u002Fblog.csdn.net\u002Fu011240877\u002Farticle\u002Fdetails\u002F73440993",rel:[ak,al,am],target:an},children:[{type:a,value:"并发编程3：线程池的使用与执行流程"}]}]},{type:a,value:e},{type:b,tag:o,props:{},children:[{type:b,tag:l,props:{href:"https:\u002F\u002Fwww.jianshu.com\u002Fp\u002F87bff5cc8d8c",rel:[ak,al,am],target:an},children:[{type:a,value:"深入分析java线程池的实现原理"}]}]}]},excerpt:{type:av,children:[{type:b,tag:P,props:{id:Q},children:[{type:b,tag:l,props:{ariaHidden:n,href:aw,tabIndex:q},children:[{type:b,tag:c,props:{className:[r,s]},children:[]}]},{type:a,value:Q}]},{type:a,value:e},{type:b,tag:v,props:{id:D},children:[{type:b,tag:l,props:{ariaHidden:n,href:ax,tabIndex:q},children:[{type:b,tag:c,props:{className:[r,s]},children:[]}]},{type:a,value:D}]},{type:a,value:e},{type:b,tag:o,props:{},children:[{type:a,value:ay}]}]},dir:aN,path:"\u002Fjava\u002F20181209\u002FJava多线程",extension:".md",title:ar,url:"\u002Fblog-code\u002Fview\u002Fjava\u002F20181209\u002FJava多线程\u002F",createAt:new Date(1544313600000),updateAt:new Date(1544313600000),attributes:[{name:"createAt",value:aO},{name:"updateAt",value:aO},{name:"sort",value:aN,url:"\u002Fblog-code\u002Fpage\u002Fjava\u002F20181209\u002F1\u002F"}]}}],fetch:{},mutations:void 0}}("text","element","span","token","\n","punctuation"," ","keyword","li","(",")","a","class-name","true","p","\n    ",-1,"icon","icon-link","comment","function","h2",";",2,"{","}","code","wide","boolean","孤儿进程与僵尸进程",",","public","线程的生命周期","创建线程的方式","如何关闭线程","死锁","线程池作用","线程池核心参数","创建线程池的方式","配置线程池","其他方法","h1","进程","div","nuxt-content-highlight","pre","language-java","line-numbers","static","isInterrupted","operator","void","\n        ","\n            ","synchronized","\n                ","generics","\u003C","\u003E","ol","private","String","ul","T","nofollow","noopener","noreferrer","_blank","无名の窝",10000,"青春猪头-牧之原翔子-江之岛","Java多线程","2018-12-09T00:00:00.000Z","什么是线程安全如何实现线程安全","什么是线程安全，如何实现线程安全","root","#%E8%BF%9B%E7%A8%8B","#%E5%AD%A4%E5%84%BF%E8%BF%9B%E7%A8%8B%E4%B8%8E%E5%83%B5%E5%B0%B8%E8%BF%9B%E7%A8%8B","子进程是由父进程创建的，linux能确保子进程结束后，父进程能通过调用wait()或者waitpid()系统调用获取到子进程的信息。\n其实现方式是，当子进程结束后，虽然系统会是否子进程的大部分资源，如打开的文件，内存等，但是还是会保留少量资源，如pid，直到父进程调用获取子进程的信息才会释放。\n因此，如果子进程还没结束，父进程就结束了，那这些子进程则是孤儿进程，会被init进程（pid=1）收养，以调用释放孤儿进程的资源。\n但是如果子进程结束了，但他的父进程既不结束也不调用释放资源，那么这些子进程则是僵尸进程，会一直占用pid，直到系统无pid可用。","线程","return","=","string","new","Thread","-\u003E","lock1","lock2",".","start","线程池","int","Runnable","\u002Fjava\u002F20181209","2018-12-09")));