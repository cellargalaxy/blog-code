__NUXT_JSONP__("/view/$E5$85$B6$E4$BB$96/20180221/$E8$87$AA$E5$B7$B1$E7$9A$84web$E6$A1$86$E6$9E$B6$E7$9A$84$E9$9C$80$E6$B1$82$E5$92$8C$E8$AE$BE$E8$AE$A1", (function(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,A,B,C,D){return {data:[{siteConfig:{siteName:p,siteHost:"https:\u002F\u002Fcellargalaxy.github.io",basePath:"\u002Fblog-code\u002F",navs:[{text:"文章",url:"\u002Fblog-code\u002Fpage\u002F1\u002F"},{text:"归档",url:"\u002Fblog-code\u002Farchive\u002F0\u002F"},{text:"画画",url:"\u002Fblog-code\u002Fhtml\u002Fhua.html"},{text:"开源",url:"\u002Fblog-code\u002Fhttps:\u002Fgithub.com\u002Fcellargalaxy\u002Fblog-vue"}],pageSize:10,urlReplace:{"^/file/blog/code":"http:\u002F\u002F123.207.79.108\u002Ffile\u002Ffile\u002Fblog\u002Fcode"},backgroundImage:{duration:q,fade:1000,images:[{url:"https:\u002F\u002Fi.loli.net\u002F2020\u002F01\u002F25\u002FcofTzDQXitjeVZ6.jpg",description:r,type:f},{url:"https:\u002F\u002Fi.loli.net\u002F2020\u002F01\u002F25\u002FsfaRJ2lVeM3NDbE.jpg",description:r,type:f},{url:"https:\u002F\u002Fi.loli.net\u002F2020\u002F01\u002F26\u002FKybiTdftam5Su7x.jpg",description:"青春猪头-双葉理央",type:f},{url:"https:\u002F\u002Fi.loli.net\u002F2020\u002F09\u002F08\u002FxdX73nfs24qgOYk.jpg",description:"京吹-明日香,久美子",type:f},{url:"https:\u002F\u002Fi.loli.net\u002F2020\u002F02\u002F14\u002FMAiruNcEFW2HYtg.jpg",description:"终将成为你-七海灯子,小糸侑",type:f},{url:"https:\u002F\u002Fi.loli.net\u002F2020\u002F02\u002F05\u002FEojdAxTDJsFpbPw.jpg",description:"玉子市场-北白川玉子",type:f},{url:"https:\u002F\u002Fi.loli.net\u002F2020\u002F01\u002F31\u002FAXxwJDRS9fmN2uU.jpg",description:"fate_hf-弓道馆",type:f},{url:"https:\u002F\u002Fi.loli.net\u002F2020\u002F02\u002F01\u002FaHhVObpJus6dnM4.jpg",description:"fate_hf-樱花树",type:f}]}},homeConfig:{brandInterval:q,brands:[{imageUrl:"https:\u002F\u002Fi.loli.net\u002F2020\u002F01\u002F21\u002FmMEAnwY5XPC2pFb.jpg",title:"日常",texts:["我们所度过的每个平凡的日常，也许就是连续不断发生的奇迹。","日々、私たちが過ごしている日常は、実は奇跡の連続なのかもしれない。"]},{imageUrl:"https:\u002F\u002Fi.loli.net\u002F2020\u002F04\u002F19\u002FH1MmXb9xPcYEhT2.jpg",title:"昨日之歌",texts:["时间梭梭箭如飞，人道漫漫步蹒跚","人間そんな変わるもんじゃないのに、月日ばっかどんどん過ぎて"]}],navs:[{text:"Github",url:"https:\u002F\u002Fgithub.com\u002Fcellargalaxy\u002F"}]},pageFootConfig:{lines:[[{text:"Copyright © 2017-? ."},{text:"备案？不存在的"},{text:"Powered by Nuxt.js & Github"}]]},buildTime:new Date(1652539757896),siteName:p,file:{slug:s,description:o,createdAt:t,updatedAt:t,toc:[],body:{type:u,children:[{type:c,tag:d,props:{},children:[{type:a,value:o}]},{type:a,value:b},{type:a,value:b},{type:c,tag:i,props:{id:"mvc框架"},children:[{type:c,tag:h,props:{href:"#mvc%E6%A1%86%E6%9E%B6",ariaHidden:j,tabIndex:k},children:[{type:c,tag:l,props:{className:[m,n]},children:[]}]},{type:a,value:"MVC框架"}]},{type:a,value:b},{type:c,tag:d,props:{},children:[{type:a,value:"MVC框架的"},{type:c,tag:g,props:{},children:[{type:a,value:"m"}]},{type:a,value:v},{type:c,tag:g,props:{},children:[{type:a,value:"v"}]},{type:a,value:v},{type:c,tag:g,props:{},children:[{type:a,value:"c"}]},{type:a,value:"分别代表了"},{type:c,tag:g,props:{},children:[{type:a,value:"模型层"}]},{type:a,value:"，"},{type:c,tag:g,props:{},children:[{type:a,value:"视图层"}]},{type:a,value:"和"},{type:c,tag:g,props:{},children:[{type:a,value:"控制器"}]},{type:a,value:"。"}]},{type:a,value:b},{type:c,tag:d,props:{},children:[{type:a,value:"维基百科上讲的："}]},{type:a,value:b},{type:c,tag:w,props:{},children:[{type:a,value:b},{type:c,tag:e,props:{},children:[{type:a,value:b},{type:c,tag:d,props:{},children:[{type:a,value:"控制器（Controller）- 负责转发请求，对请求进行处理。"}]},{type:a,value:b}]},{type:a,value:b},{type:c,tag:e,props:{},children:[{type:a,value:b},{type:c,tag:d,props:{},children:[{type:a,value:"视图（View） - 界面设计人员进行图形界面设计。"}]},{type:a,value:b}]},{type:a,value:b},{type:c,tag:e,props:{},children:[{type:a,value:b},{type:c,tag:d,props:{},children:[{type:a,value:"模型（Model） - 程序员编写程序应有的功能（实现算法等等）、数据库专家进行数据管理和数据库设计(可以实现具体的功能)。"}]},{type:a,value:b}]},{type:a,value:b}]},{type:a,value:b},{type:c,tag:d,props:{},children:[{type:a,value:"极客学院的解释："}]},{type:a,value:b},{type:c,tag:w,props:{},children:[{type:a,value:b},{type:c,tag:e,props:{},children:[{type:a,value:b},{type:c,tag:d,props:{},children:[{type:a,value:"模型封装了应用程序数据，并且通常它们由 POJO 组成。"}]},{type:a,value:b}]},{type:a,value:b},{type:c,tag:e,props:{},children:[{type:a,value:b},{type:c,tag:d,props:{},children:[{type:a,value:"视图主要用于呈现模型数据，并且通常它生成客户端的浏览器可以解释的 HTML 输出。"}]},{type:a,value:b}]},{type:a,value:b},{type:c,tag:e,props:{},children:[{type:a,value:b},{type:c,tag:d,props:{},children:[{type:a,value:"控制器主要用于处理用户请求，并且构建合适的模型并将其传递到视图呈现。"}]},{type:a,value:b}]},{type:a,value:b}]},{type:a,value:b},{type:c,tag:d,props:{},children:[{type:a,value:"其实以前我对MVC不理解，视图层和控制器解释差不多，视图层对于html，控制器对应controler或者action。但是相比维基，极客学院对模型层的解释就有所残缺了，而我以前一直看到的都是极客学院样的说法。按极客学院的说法，模型层就只对应了数据库的操作类，那业务逻辑类丢了？按维基的说法模型层就包活了数据库操作类和业务逻辑类，算是解决我一直以来的疑惑。"}]},{type:a,value:b},{type:c,tag:d,props:{},children:[{type:a,value:"这三层通过数据连接在一起，用户通过视图层请求控制器，并可能携带一定数据，之后控制器把数据传递给模型层，模型层完成业务逻辑，或者修改了数据库数据之后，把需要的数据传递给视图层展示给客户。这样一个流程是ojbk的，不是我需要改的部分，但是这个按照mvc结构的业务流却是静态的，啥意思呢？我举个例子把，例如在springmvc中，模型层有两个接口M1和M2，控制器也有两个接受url请求的方法C1和C2，识图也有两个识图V1和V2，由于业务需要，C1调用M1还是M2是确定的，写死在代码里的。同样C1之后返回哪个视图给用户也是确定的，写死的。这样感觉就非常不灵活。如果某一天，我要在某个控制器里增加需要调用的业务接口，或者添加视图展示的数据，就要修改代码，测试再发布，鸡儿麻烦。这个其实如果把页面渲染用前端框架，后台做好比较细的接口，这样修改前端页面的代码就可是实现很灵活的修改。但是，这个需求是来自于我的博客，如果把页面用js来渲染，怕会对蜘蛛不友好，并且我看别人的博客都是静态的，所以这法子不接受。"}]},{type:a,value:b},{type:c,tag:i,props:{id:"我的mvc框架逻辑"},children:[{type:c,tag:h,props:{href:"#%E6%88%91%E7%9A%84mvc%E6%A1%86%E6%9E%B6%E9%80%BB%E8%BE%91",ariaHidden:j,tabIndex:k},children:[{type:c,tag:l,props:{className:[m,n]},children:[]}]},{type:a,value:"我的MVC框架逻辑"}]},{type:a,value:b},{type:c,tag:"div",props:{className:["nuxt-content-highlight"]},children:[{type:c,tag:"pre",props:{className:["language-text","line-numbers"]},children:[{type:c,tag:g,props:{},children:[{type:a,value:"html 视图（视图名字，动态数据）{\n    根据视图名字选择对于的html模板。\n    当然这个html也是一种数据，可以被修改。\n    html被修改，展示的数据也发生变化，就需要其输入的数据会动态变化。\n    return 把动态数据渲染到html模板里。\n}\n视图 控制器（动态数据）{\n    写死一个控制器名字，这个名字可以直接就用这个控制器对应的url。\n    通过这个控制器名字，获取其需要调用的业务接口。\n    视图动态数据=依次执行业务接口并返回数据（动态数据）\n    return 视图（控制器名字，视图动态数据）\n}\n"}]}]}]},{type:a,value:b},{type:c,tag:i,props:{id:"我的mvc框架的控制器"},children:[{type:c,tag:h,props:{href:"#%E6%88%91%E7%9A%84mvc%E6%A1%86%E6%9E%B6%E7%9A%84%E6%8E%A7%E5%88%B6%E5%99%A8",ariaHidden:j,tabIndex:k},children:[{type:c,tag:l,props:{className:[m,n]},children:[]}]},{type:a,value:"我的MVC框架的控制器"}]},{type:a,value:b},{type:c,tag:x,props:{},children:[{type:a,value:b},{type:c,tag:e,props:{},children:[{type:a,value:b},{type:c,tag:d,props:{},children:[{type:a,value:"控制器的动态数据传入。无论是什么，都可以通过字符串在request里获得，而字符串可以是动态的，因此可以把字符串和数据做成Map，传入控制器方法，在控制器里再在map里get。"}]},{type:a,value:b}]},{type:a,value:b},{type:c,tag:e,props:{},children:[{type:a,value:b},{type:c,tag:d,props:{},children:[{type:a,value:"通过控制器名字，获取其需要调用的业务接口。这里可以找个地方存储不同控制器名字对应那些业务方法，之后通过Map结构表示。而业务接口为了通用性还是用字符串表示吧，例如是业务类的方法名。还有，既然是存储控制器名字对应那些业务方法，那么控制器的业务方法是可以被修改的，作为一种数据。"}]},{type:a,value:b}]},{type:a,value:b},{type:c,tag:e,props:{},children:[{type:a,value:b},{type:c,tag:d,props:{},children:[{type:a,value:"获得方法名字之后，通过反射看看方法的参数，通过反射调用。当然还有个问题，我忘记了反射获取方法的参数具体是咋样，毕竟没办法就通过参数的类型来确定往业务方法里传入哪个对象。或者也可以把业务方法的传入都封装成map，不过就比较麻烦了。"}]},{type:a,value:b}]},{type:a,value:b},{type:c,tag:e,props:{},children:[{type:a,value:b},{type:c,tag:d,props:{},children:[{type:a,value:"业务方法返回的对象全部传入视图，至于这些对象用不用得上就是视图层的事情了。"}]},{type:a,value:b}]},{type:a,value:b}]},{type:a,value:b},{type:c,tag:i,props:{id:"我的mvc框架的视图"},children:[{type:c,tag:h,props:{href:"#%E6%88%91%E7%9A%84mvc%E6%A1%86%E6%9E%B6%E7%9A%84%E8%A7%86%E5%9B%BE",ariaHidden:j,tabIndex:k},children:[{type:c,tag:l,props:{className:[m,n]},children:[]}]},{type:a,value:"我的MVC框架的视图"}]},{type:a,value:b},{type:c,tag:x,props:{},children:[{type:a,value:b},{type:c,tag:e,props:{},children:[{type:a,value:b},{type:c,tag:d,props:{},children:[{type:a,value:"与控制器一样，视图的动态参数可以考虑也做成map。"}]},{type:a,value:b}]},{type:a,value:b},{type:c,tag:e,props:{},children:[{type:a,value:b},{type:c,tag:d,props:{},children:[{type:a,value:"也与控制器一样，通过视图名字获取html模板也要找地方存储，可以被修改，也是map结构。"}]},{type:a,value:b}]},{type:a,value:b},{type:c,tag:e,props:{},children:[{type:a,value:b},{type:c,tag:d,props:{},children:[{type:a,value:"需要找一个框架，用于把数据渲染到html里，而这个确实最头疼的。既然是可以修改html，我希望修改html能做到简单方便。html做静态页面就挺方便的，就算是用js渲染页面，数据写死几个用来测试，写好保存到html文件里，在浏览器打开或者刷新一下就能看。还可以像markdown编辑器一样，左边在写html，右边展示效果。如果视图渲染html效果能在浏览器里即刻展示就方便了（不希望有所谓的客户端，就用浏览器方便）。"}]},{type:a,value:b}]},{type:a,value:b},{type:c,tag:e,props:{},children:[{type:a,value:b},{type:c,tag:d,props:{},children:[{type:a,value:"所以第一方案，由于语法之类的问题，编辑时候写几个json来测试，用js来渲染，例如用个我唯一会的vue，视图后台也要用js来渲染咯？java，用js，来渲染html？我暂时没找到实现方案，之前好像看见有像一个java实现的浏览器样的渲染页面的，但是没试过，不知道效果咋样。"}]},{type:a,value:b}]},{type:a,value:b},{type:c,tag:e,props:{},children:[{type:a,value:b},{type:c,tag:d,props:{},children:[{type:a,value:"第二个方案是后台仍然用thymeleaf渲染，所以html渲染就不能交给浏览器了，可以在编辑页面用js设定时器，定时把编辑的html提交到后台渲染，返回前端展示效果。但是有个大问题，测试的数据怎么办？不知道thymeleaf渲染能不能用json，如果不能，要用java对象，那在浏览器里怎么写几个测试数据？"}]},{type:a,value:b}]},{type:a,value:b},{type:c,tag:e,props:{},children:[{type:a,value:b},{type:c,tag:d,props:{},children:[{type:a,value:"既然html都可以变编辑，那js文件，css文件可应该可以顺便被编辑。但是视图层就要判断这个是html需要被渲染，还是是静态文件不要渲染。"}]},{type:a,value:b}]},{type:a,value:b}]},{type:a,value:b},{type:c,tag:d,props:{},children:[{type:a,value:"感觉差不多了，bb了这么多。"}]},{type:a,value:b},{type:c,tag:d,props:{},children:[{type:a,value:"参考文献"}]},{type:a,value:b},{type:c,tag:d,props:{},children:[{type:c,tag:h,props:{href:"https:\u002F\u002Fzh.wikipedia.org\u002Fwiki\u002FMVC",rel:[y,z,A],target:B},children:[{type:a,value:"MVC-维基百科"}]}]},{type:a,value:b},{type:c,tag:d,props:{},children:[{type:c,tag:h,props:{href:"http:\u002F\u002Fwiki.jikexueyuan.com\u002Fproject\u002Fspring\u002Fweb-mvc-framework.html",rel:[y,z,A],target:B},children:[{type:a,value:"MVC 框架教程-极客学院"}]}]}]},excerpt:{type:u,children:[{type:c,tag:d,props:{},children:[{type:a,value:o}]}]},dir:C,path:"\u002F其他\u002F20180221\u002F自己的web框架的需求和设计",extension:".md",title:s,url:"\u002Fblog-code\u002Fview\u002F$E5$85$B6$E4$BB$96\u002F20180221\u002F$E8$87$AA$E5$B7$B1$E7$9A$84web$E6$A1$86$E6$9E$B6$E7$9A$84$E9$9C$80$E6$B1$82$E5$92$8C$E8$AE$BE$E8$AE$A1\u002F",createAt:new Date(1519171200000),updateAt:new Date(1519171200000),attributes:[{name:"createAt",value:D},{name:"updateAt",value:D},{name:"sort",value:C,url:"\u002Fblog-code\u002Fpage\u002F$E5$85$B6$E4$BB$96\u002F20180221\u002F1\u002F"}]}}],fetch:{},mutations:void 0}}("text","\n","element","p","li","wide","code","a","h1","true",-1,"span","icon","icon-link","其实之前师兄就叫我试试自己写个mvc框架，但是各种破事加上懒，就一直没有做。但是需求是第一生产力。刚开始用框架还觉得框架简单好使省事，但是用久了，一些为了开发方便固定下来的套路就渐渐觉得不那么灵活了。什么套路呢？先让我复习一下mvc。","无名の窝",10000,"青春猪头-牧之原翔子-江之岛","自己的web框架的需求和设计","2018-02-21T00:00:00.000Z","root"," ","ul","ol","nofollow","noopener","noreferrer","_blank","\u002F其他\u002F20180221","2018-02-21")));