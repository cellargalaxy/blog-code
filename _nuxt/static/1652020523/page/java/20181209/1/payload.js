__NUXT_JSONP__("/page/java/20181209/1", (function(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,A){q.type="root";q.children=[{type:b,tag:"h1",props:{id:r},children:[{type:b,tag:s,props:{ariaHidden:t,href:"#%E8%BF%9B%E7%A8%8B",tabIndex:u},children:[{type:b,tag:v,props:{className:[w,x]},children:[]}]},{type:c,value:r}]},{type:c,value:y},{type:b,tag:"h2",props:{id:d},children:[{type:b,tag:s,props:{ariaHidden:t,href:"#%E5%AD%A4%E5%84%BF%E8%BF%9B%E7%A8%8B%E4%B8%8E%E5%83%B5%E5%B0%B8%E8%BF%9B%E7%A8%8B",tabIndex:u},children:[{type:b,tag:v,props:{className:[w,x]},children:[]}]},{type:c,value:d}]},{type:c,value:y},{type:b,tag:"p",props:{},children:[{type:c,value:"子进程是由父进程创建的，linux能确保子进程结束后，父进程能通过调用wait()或者waitpid()系统调用获取到子进程的信息。\n其实现方式是，当子进程结束后，虽然系统会是否子进程的大部分资源，如打开的文件，内存等，但是还是会保留少量资源，如pid，直到父进程调用获取子进程的信息才会释放。\n因此，如果子进程还没结束，父进程就结束了，那这些子进程则是孤儿进程，会被init进程（pid=1）收养，以调用释放孤儿进程的资源。\n但是如果子进程结束了，但他的父进程既不结束也不调用释放资源，那么这些子进程则是僵尸进程，会一直占用pid，直到系统无pid可用。"}]}];return {data:[{navbarConfig:{brandText:"无名の窝",brandUrl:"\u002Fblog-code\u002F",navs:[{text:"文章",url:"\u002Fblog-code\u002Fpage\u002F1\u002F"},{text:"归档",url:"\u002Fblog-code\u002Farchive\u002F0\u002F"},{text:"画画",url:"\u002Fblog-code\u002Fhtml\u002Fhua.html"},{text:"开源",url:"\u002Fblog-code\u002Fhttps:\u002Fgithub.com\u002Fcellargalaxy\u002Fblog-vue"}]},homeConfig:{brandInterval:10000,brands:[{imageUrl:"https:\u002F\u002Fi.loli.net\u002F2020\u002F01\u002F21\u002FmMEAnwY5XPC2pFb.jpg",title:"日常",texts:["我们所度过的每个平凡的日常，也许就是连续不断发生的奇迹。","日々、私たちが過ごしている日常は、実は奇跡の連続なのかもしれない。"]},{imageUrl:"https:\u002F\u002Fi.loli.net\u002F2020\u002F04\u002F19\u002FH1MmXb9xPcYEhT2.jpg",title:"昨日之歌",texts:["时间梭梭箭如飞，人道漫漫步蹒跚","人間そんな変わるもんじゃないのに、月日ばっかどんどん過ぎて"]}],navs:[{text:"Github",url:"https:\u002F\u002Fgithub.com\u002Fcellargalaxy\u002F"}]},pageFootConfig:{lines:[[{text:"Copyright © 2017-? ."},{text:"备案？不存在的"},{text:"Powered by Nuxt.js & Github"}]]},buildTime:new Date(1652020536413),basePath:"\u002Fpage",folderPath:"java\u002F20181209",pageSize:10,total:e,currentPage:e,files:[{slug:f,description:"进程\n孤儿进程与僵尸进程\n子进程是由父进程创建的，linux能确保子进程结束后，父进程能通过调用wait()或者waitpid()系统调用获取到子进程的信息。\n其实现方式是，当子进程结束后，虽然系统会是否子进程的大部分资源，如打开的文件，内存等，但是还是会保留少量资源，如pid，直到父进程调用获取子进程的信息才会释放。\n因此，如果子进程还没结束，父进程就结束了，那这些子进程则是孤儿进程，会被init进程（pid=1）收养，以调用释放孤儿进程的资源。\n但是如果子进程结束了，但他的父进程既不结束也不调用释放资源，那么这些子进程则是僵尸进程，会一直占用pid，直到系统无pid可用。",createdAt:g,updatedAt:g,toc:[{id:d,depth:a,text:d},{id:"什么是线程安全如何实现线程安全",depth:a,text:"什么是线程安全，如何实现线程安全"},{id:h,depth:a,text:h},{id:i,depth:a,text:i},{id:j,depth:a,text:j},{id:k,depth:a,text:k},{id:l,depth:a,text:l},{id:m,depth:a,text:m},{id:n,depth:a,text:n},{id:o,depth:a,text:o},{id:p,depth:a,text:p}],body:q,excerpt:q,dir:z,path:"\u002Fjava\u002F20181209\u002FJava多线程",extension:".md",title:f,url:"\u002Fblog-code\u002Fview\u002Fjava\u002F20181209\u002FJava多线程",createAt:new Date(1544313600000),updateAt:new Date(1544313600000),attributes:[{name:"createAt",value:A},{name:"updateAt",value:A},{name:"sort",value:z,url:"\u002Fblog-code\u002Fpage\u002Fjava\u002F20181209\u002F1\u002F"}]}]}],fetch:{},mutations:void 0}}(2,"element","text","孤儿进程与僵尸进程",1,"Java多线程","2018-12-09T00:00:00.000Z","线程的生命周期","创建线程的方式","如何关闭线程","死锁","线程池作用","线程池核心参数","创建线程池的方式","配置线程池","其他方法",{},"进程","a","true",-1,"span","icon","icon-link","\n","\u002Fjava\u002F20181209","2018-12-09")));