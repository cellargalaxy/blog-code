__NUXT_JSONP__("/page/6", (function(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,_,$,aa,ab,ac,ad,ae,af,ag,ah,ai,aj,ak,al,am,an,ao,ap,aq,ar,as,at,au,av,aw,ax,ay,az,aA,aB,aC,aD,aE,aF,aG,aH,aI,aJ){t.type=e;t.children=[];y.type=e;y.children=[{type:c,tag:o,props:{},children:[{type:b,value:"最近终于终于啃完翟永超的《Spring Cloud微服务实战》。看完之后，对于这些牛逼的东西，我只能说我终于知道Spring Cloud是想干嘛了（叹气。jpg）。对此总结一下。"}]},{type:b,value:d},{type:c,tag:o,props:{},children:[{type:b,value:"实施Spring Cloud，即想通过把原本单独的大系统，拆分为多个的微服务，以达到系统解耦的目的。但为了依旧提供完整的服务，各个微服务仍然存在着业务依赖。而这些业务依赖则通过rpc等方式进行调用。因此微服务里存在着两个根本角色：服务提供者和服务消费者。当然，对于某一个微服务而言，他自己可以既是服务提供者也是服务消费者，因为他即为其他微服务提供服务，也使用其他微服务的服务。然而这么做问题会出现一大堆，Spring Cloud就是为了解决这些问题而开发或者封装其他工具诞生的。这里先罗列几个这些问题："}]},{type:b,value:d},{type:c,tag:"ol",props:{},children:[{type:b,value:d},{type:c,tag:k,props:{},children:[{type:b,value:"作为服务消费者，怎么知道服务提供者在哪"}]},{type:b,value:d},{type:c,tag:k,props:{},children:[{type:b,value:"作为服务消费者，怎样调用服务提供者的服务"}]},{type:b,value:d},{type:c,tag:k,props:{},children:[{type:b,value:"作为服务消费者，万一服务提供者挂了该怎么办。不可能晾着其他请求一直等这位服务提供者恢复吧！？"}]},{type:b,value:d},{type:c,tag:k,props:{},children:[{type:b,value:"拆分后，微服务数量众多，又各自为政。接口自行变更，管理混乱，怎么办？"}]},{type:b,value:d},{type:c,tag:k,props:{},children:[{type:b,value:"拆分后，微服务数量众多，又各自为政。微服务之间怎样互通消息？"}]},{type:b,value:d},{type:c,tag:k,props:{},children:[{type:b,value:"拆分后，微服务数量众多，又各自为政。如果要修改配置，岂不是要一改就要改好几十甚至上百台机？"}]},{type:b,value:d}]}];D.type=e;D.children=[];R.type=e;R.children=[{type:c,tag:"h1",props:{id:S},children:[{type:c,tag:T,props:{ariaHidden:U,href:"#%E8%BF%9B%E7%A8%8B",tabIndex:V},children:[{type:c,tag:W,props:{className:[X,Y]},children:[]}]},{type:b,value:S}]},{type:b,value:d},{type:c,tag:"h2",props:{id:p},children:[{type:c,tag:T,props:{ariaHidden:U,href:"#%E5%AD%A4%E5%84%BF%E8%BF%9B%E7%A8%8B%E4%B8%8E%E5%83%B5%E5%B0%B8%E8%BF%9B%E7%A8%8B",tabIndex:V},children:[{type:c,tag:W,props:{className:[X,Y]},children:[]}]},{type:b,value:p}]},{type:b,value:d},{type:c,tag:o,props:{},children:[{type:b,value:"子进程是由父进程创建的，linux能确保子进程结束后，父进程能通过调用wait()或者waitpid()系统调用获取到子进程的信息。\n其实现方式是，当子进程结束后，虽然系统会是否子进程的大部分资源，如打开的文件，内存等，但是还是会保留少量资源，如pid，直到父进程调用获取子进程的信息才会释放。\n因此，如果子进程还没结束，父进程就结束了，那这些子进程则是孤儿进程，会被init进程（pid=1）收养，以调用释放孤儿进程的资源。\n但是如果子进程结束了，但他的父进程既不结束也不调用释放资源，那么这些子进程则是僵尸进程，会一直占用pid，直到系统无pid可用。"}]}];ab.type=e;ab.children=[{type:c,tag:o,props:{},children:[{type:b,value:"编辑距离可以用来判断两个字符串的相似性。量测方式是把一个字符串转变为另外一个字符串所需的操作次数。操作类型只有三种：增加，删除和替换。这样子，字符串的相似性则可以用"},{type:c,tag:"code",props:{},children:[{type:b,value:"1-编辑距离\u002FMAX(字符串1长度,字符串2长度)"}]},{type:b,value:"来度量。"}]}];ag.type=e;ag.children=[];al.type=e;al.children=[{type:c,tag:o,props:{},children:[{type:b,value:ak}]}];ao.type=e;ao.children=[];as.type=e;as.children=[];aH.type=e;aH.children=[];return {data:[{navbarConfig:{brandText:"无名の窝",brandUrl:"\u002Fblog-code\u002F",navs:[{text:"文章",url:"\u002Fblog-code\u002Fpage\u002F1\u002F"},{text:"归档",url:"\u002Fblog-code\u002Farchive\u002F0\u002F"},{text:"画画",url:"\u002Fblog-code\u002Fhtml\u002Fhua.html"},{text:"开源",url:"\u002Fblog-code\u002Fhttps:\u002Fgithub.com\u002Fcellargalaxy\u002Fblog-vue"}]},homeConfig:{brandInterval:10000,brands:[{imageUrl:"https:\u002F\u002Fi.loli.net\u002F2020\u002F01\u002F21\u002FmMEAnwY5XPC2pFb.jpg",title:"日常",texts:["我们所度过的每个平凡的日常，也许就是连续不断发生的奇迹。","日々、私たちが過ごしている日常は、実は奇跡の連続なのかもしれない。"]},{imageUrl:"https:\u002F\u002Fi.loli.net\u002F2020\u002F04\u002F19\u002FH1MmXb9xPcYEhT2.jpg",title:"昨日之歌",texts:["时间梭梭箭如飞，人道漫漫步蹒跚","人間そんな変わるもんじゃないのに、月日ばっかどんどん過ぎて"]}],navs:[{text:"Github",url:"https:\u002F\u002Fgithub.com\u002Fcellargalaxy\u002F"}]},pageFootConfig:{lines:[[{text:"Copyright © 2017-? ."},{text:"备案？不存在的"},{text:"Powered by Nuxt.js & Github"}]]},buildTime:new Date(1652020534836),basePath:"\u002Fpage",folderPath:j,pageSize:10,total:112,currentPage:6,files:[{slug:r,description:j,createdAt:s,updatedAt:s,toc:[{id:"mysql的乐观锁",depth:a,text:"Mysql的乐观锁"},{id:"mysql的悲观锁",depth:a,text:"Mysql的悲观锁"}],body:t,excerpt:t,dir:u,path:"\u002F中间件\u002F20181222\u002FMysql，Redis与Zookeeper实现分布式锁",extension:f,title:r,url:"\u002Fblog-code\u002Fview\u002F中间件\u002F20181222\u002FMysql，Redis与Zookeeper实现分布式锁",createAt:new Date(1545436800000),updateAt:new Date(1545436800000),attributes:[{name:g,value:v},{name:h,value:v},{name:i,value:u,url:"\u002Fblog-code\u002Fpage\u002F中间件\u002F20181222\u002F1\u002F"}]},{slug:w,description:"最近终于终于啃完翟永超的《Spring Cloud微服务实战》。看完之后，对于这些牛逼的东西，我只能说我终于知道Spring Cloud是想干嘛了（叹气。jpg）。对此总结一下。\n实施Spring Cloud，即想通过把原本单独的大系统，拆分为多个的微服务，以达到系统解耦的目的。但为了依旧提供完整的服务，各个微服务仍然存在着业务依赖。而这些业务依赖则通过rpc等方式进行调用。因此微服务里存在着两个根本角色：服务提供者和服务消费者。当然，对于某一个微服务而言，他自己可以既是服务提供者也是服务消费者，因为他即为其他微服务提供服务，也使用其他微服务的服务。然而这么做问题会出现一大堆，Spring Cloud就是为了解决这些问题而开发或者封装其他工具诞生的。这里先罗列几个这些问题：\n\n作为服务消费者，怎么知道服务提供者在哪\n作为服务消费者，怎样调用服务提供者的服务\n作为服务消费者，万一服务提供者挂了该怎么办。不可能晾着其他请求一直等这位服务提供者恢复吧！？\n拆分后，微服务数量众多，又各自为政。接口自行变更，管理混乱，怎么办？\n拆分后，微服务数量众多，又各自为政。微服务之间怎样互通消息？\n拆分后，微服务数量众多，又各自为政。如果要修改配置，岂不是要一改就要改好几十甚至上百台机？\n",createdAt:x,updatedAt:x,toc:[],body:y,excerpt:y,dir:z,path:"\u002F框架\u002F20181216\u002FSpring Cloud",extension:f,title:w,url:"\u002Fblog-code\u002Fview\u002F框架\u002F20181216\u002FSpring Cloud",createAt:new Date(1544918400000),updateAt:new Date(1544918400000),attributes:[{name:g,value:A},{name:h,value:A},{name:i,value:z,url:"\u002Fblog-code\u002Fpage\u002F框架\u002F20181216\u002F1\u002F"}]},{slug:B,description:j,createdAt:C,updatedAt:C,toc:[{id:"timer的使用",depth:a,text:"Timer的使用"},{id:"timer的源码",depth:a,text:"Timer的源码"},{id:"taskqueue",depth:a,text:"TaskQueue"},{id:"timerthread的源码",depth:a,text:"TimerThread的源码"},{id:"scheduledexecutorservice的使用",depth:a,text:"ScheduledExecutorService的使用"},{id:"scheduledexecutorservice的源码",depth:a,text:"ScheduledExecutorService的源码"}],body:D,excerpt:D,dir:E,path:"\u002Fjava\u002F20181215\u002FJava定时任务",extension:f,title:B,url:"\u002Fblog-code\u002Fview\u002Fjava\u002F20181215\u002FJava定时任务",createAt:new Date(1544832000000),updateAt:new Date(1544832000000),attributes:[{name:g,value:F},{name:h,value:F},{name:i,value:E,url:"\u002Fblog-code\u002Fpage\u002Fjava\u002F20181215\u002F1\u002F"}]},{slug:G,description:"进程\n孤儿进程与僵尸进程\n子进程是由父进程创建的，linux能确保子进程结束后，父进程能通过调用wait()或者waitpid()系统调用获取到子进程的信息。\n其实现方式是，当子进程结束后，虽然系统会是否子进程的大部分资源，如打开的文件，内存等，但是还是会保留少量资源，如pid，直到父进程调用获取子进程的信息才会释放。\n因此，如果子进程还没结束，父进程就结束了，那这些子进程则是孤儿进程，会被init进程（pid=1）收养，以调用释放孤儿进程的资源。\n但是如果子进程结束了，但他的父进程既不结束也不调用释放资源，那么这些子进程则是僵尸进程，会一直占用pid，直到系统无pid可用。",createdAt:H,updatedAt:H,toc:[{id:p,depth:a,text:p},{id:"什么是线程安全如何实现线程安全",depth:a,text:"什么是线程安全，如何实现线程安全"},{id:I,depth:a,text:I},{id:J,depth:a,text:J},{id:K,depth:a,text:K},{id:L,depth:a,text:L},{id:M,depth:a,text:M},{id:N,depth:a,text:N},{id:O,depth:a,text:O},{id:P,depth:a,text:P},{id:Q,depth:a,text:Q}],body:R,excerpt:R,dir:Z,path:"\u002Fjava\u002F20181209\u002FJava多线程",extension:f,title:G,url:"\u002Fblog-code\u002Fview\u002Fjava\u002F20181209\u002FJava多线程",createAt:new Date(1544313600000),updateAt:new Date(1544313600000),attributes:[{name:g,value:_},{name:h,value:_},{name:i,value:Z,url:"\u002Fblog-code\u002Fpage\u002Fjava\u002F20181209\u002F1\u002F"}]},{slug:$,description:"编辑距离可以用来判断两个字符串的相似性。量测方式是把一个字符串转变为另外一个字符串所需的操作次数。操作类型只有三种：增加，删除和替换。这样子，字符串的相似性则可以用1-编辑距离\u002FMAX(字符串1长度,字符串2长度)来度量。",createdAt:aa,updatedAt:aa,toc:[],body:ab,excerpt:ab,dir:ac,path:"\u002F算法\u002F20181114\u002F编辑距离",extension:f,title:$,url:"\u002Fblog-code\u002Fview\u002F算法\u002F20181114\u002F编辑距离",createAt:new Date(1542153600000),updateAt:new Date(1542153600000),attributes:[{name:g,value:ad},{name:h,value:ad},{name:i,value:ac,url:"\u002Fblog-code\u002Fpage\u002F算法\u002F20181114\u002F1\u002F"}]},{slug:ae,description:j,createdAt:af,updatedAt:af,toc:[],body:ag,excerpt:ag,dir:ah,path:"\u002F算法\u002F20181108\u002Fword2vec学习小记",extension:f,title:ae,url:"\u002Fblog-code\u002Fview\u002F算法\u002F20181108\u002Fword2vec学习小记",createAt:new Date(1541635200000),updateAt:new Date(1541635200000),attributes:[{name:g,value:ai},{name:h,value:ai},{name:i,value:ah,url:"\u002Fblog-code\u002Fpage\u002F算法\u002F20181108\u002F1\u002F"}]},{slug:aj,description:ak,createdAt:l,updatedAt:l,toc:[],body:al,excerpt:al,dir:q,path:"\u002F框架\u002F20181024\u002FQuartz集群原理及源码分析",extension:f,title:aj,url:"\u002Fblog-code\u002Fview\u002F框架\u002F20181024\u002FQuartz集群原理及源码分析",createAt:new Date(1540339200000),updateAt:new Date(1540339200000),attributes:[{name:g,value:m},{name:h,value:m},{name:i,value:q,url:am}]},{slug:an,description:j,createdAt:l,updatedAt:l,toc:[{id:"job与jobdetail",depth:a,text:"Job与JobDetail"},{id:"trigger",depth:a,text:"Trigger"},{id:"scheduler",depth:a,text:"Scheduler"}],body:ao,excerpt:ao,dir:q,path:"\u002F框架\u002F20181024\u002FQuartz框架的使用",extension:f,title:an,url:"\u002Fblog-code\u002Fview\u002F框架\u002F20181024\u002FQuartz框架的使用",createAt:new Date(1540339200000),updateAt:new Date(1540339200000),attributes:[{name:g,value:m},{name:h,value:m},{name:i,value:q,url:am}]},{slug:ap,description:j,createdAt:l,updatedAt:l,toc:[{id:aq,depth:a,text:aq},{id:ar,depth:a,text:ar}],body:as,excerpt:as,dir:at,path:"\u002F中间件\u002F20181024\u002FMysql的锁与引擎",extension:f,title:ap,url:"\u002Fblog-code\u002Fview\u002F中间件\u002F20181024\u002FMysql的锁与引擎",createAt:new Date(1540339200000),updateAt:new Date(1540339200000),attributes:[{name:g,value:m},{name:h,value:m},{name:i,value:at,url:"\u002Fblog-code\u002Fpage\u002F中间件\u002F20181024\u002F1\u002F"}]},{slug:au,description:j,createdAt:av,updatedAt:av,toc:[{id:aw,depth:a,text:aw},{id:ax,depth:a,text:ax},{id:ay,depth:a,text:ay},{id:az,depth:a,text:az},{id:aA,depth:a,text:aA},{id:aB,depth:a,text:aB},{id:aC,depth:a,text:aC},{id:"arp",depth:a,text:"ARP"},{id:"icmp",depth:a,text:"ICMP"},{id:"udp",depth:a,text:"UDP"},{id:"tcp",depth:a,text:"TCP"},{id:aD,depth:n,text:aD},{id:"连续arq协议滑动窗口协议",depth:n,text:"连续ARQ协议\u002F滑动窗口协议"},{id:aE,depth:n,text:aE},{id:aF,depth:n,text:aF},{id:aG,depth:n,text:aG},{id:"tcp的三次握手和四次分手",depth:n,text:"TCP的三次握手和四次分手"}],body:aH,excerpt:aH,dir:aI,path:"\u002F协议\u002F20180916\u002F计算机网络复习笔记",extension:f,title:au,url:"\u002Fblog-code\u002Fview\u002F协议\u002F20180916\u002F计算机网络复习笔记",createAt:new Date(1537056000000),updateAt:new Date(1537056000000),attributes:[{name:g,value:aJ},{name:h,value:aJ},{name:i,value:aI,url:"\u002Fblog-code\u002Fpage\u002F协议\u002F20180916\u002F1\u002F"}]}]}],fetch:{},mutations:void 0}}(2,"text","element","\n","root",".md","createAt","updateAt","sort","","li","2018-10-24T00:00:00.000Z","2018-10-24",3,"p","孤儿进程与僵尸进程","\u002F框架\u002F20181024","Mysql，Redis与Zookeeper实现分布式锁","2018-12-22T00:00:00.000Z",{},"\u002F中间件\u002F20181222","2018-12-22","Spring Cloud","2018-12-16T00:00:00.000Z",{},"\u002F框架\u002F20181216","2018-12-16","Java定时任务","2018-12-15T00:00:00.000Z",{},"\u002Fjava\u002F20181215","2018-12-15","Java多线程","2018-12-09T00:00:00.000Z","线程的生命周期","创建线程的方式","如何关闭线程","死锁","线程池作用","线程池核心参数","创建线程池的方式","配置线程池","其他方法",{},"进程","a","true",-1,"span","icon","icon-link","\u002Fjava\u002F20181209","2018-12-09","编辑距离","2018-11-14T00:00:00.000Z",{},"\u002F算法\u002F20181114","2018-11-14","word2vec学习小记","2018-11-08T00:00:00.000Z",{},"\u002F算法\u002F20181108","2018-11-08","Quartz集群原理及源码分析","我们需要Quartz框架执行任务，就需要告诉Quartz所需的JobDetail和Trigger。在单机里，Quartz会把JobDetail和Trigger保存在内存里，如果重启，JobDetail和Trigger的数据都会全部丢失（虽然会在代码里重新添加）。显然，需要集群执行，把JobDetail和Trigger保存在内存里是没有办法在各个节点之间进行同步的，而Quartz利用数据库的锁来进行实现。",{},"\u002Fblog-code\u002Fpage\u002F框架\u002F20181024\u002F1\u002F","Quartz框架的使用",{},"Mysql的锁与引擎","共享锁","独占锁",{},"\u002F中间件\u002F20181024","计算机网络复习笔记","2018-09-16T00:00:00.000Z","网络层次","网际协议ip","虚拟互联网络","ip地址分类","划分子网","ip数据报","ip层转发分组流程","等待停止协议","超时重传","流量控制","拥塞控制",{},"\u002F协议\u002F20180916","2018-09-16")));