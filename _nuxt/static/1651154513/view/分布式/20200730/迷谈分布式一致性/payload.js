__NUXT_JSONP__("/view/%E5%88%86%E5%B8%83%E5%BC%8F/20200730/%E8%BF%B7%E8%B0%88%E5%88%86%E5%B8%83%E5%BC%8F%E4%B8%80%E8%87%B4%E6%80%A7", (function(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,A,B,C,D,E,F,G,H){return {data:[{navbarConfig:{brandText:v,brandUrl:"\u002Fblog-code\u002F",navs:[{text:"文章",url:"\u002Fblog-code\u002Fpage\u002F1\u002F"},{text:"归档",url:"\u002Fblog-code\u002Farchive\u002F0\u002F"},{text:"画画",url:"\u002Fblog-code\u002Fhtml\u002Fhua.html"},{text:"开源",url:"\u002Fblog-code\u002Fhttps:\u002Fgithub.com\u002Fcellargalaxy\u002Fblog-vue"}]},homeConfig:{brandInterval:10000,brands:[{imageUrl:"https:\u002F\u002Fi.loli.net\u002F2020\u002F01\u002F21\u002FmMEAnwY5XPC2pFb.jpg",title:"日常",texts:["我们所度过的每个平凡的日常，也许就是连续不断发生的奇迹。","日々、私たちが過ごしている日常は、実は奇跡の連続なのかもしれない。"]},{imageUrl:"https:\u002F\u002Fi.loli.net\u002F2020\u002F04\u002F19\u002FH1MmXb9xPcYEhT2.jpg",title:"昨日之歌",texts:["时间梭梭箭如飞，人道漫漫步蹒跚","人間そんな変わるもんじゃないのに、月日ばっかどんどん過ぎて"]}],navs:[{text:"Github",url:"https:\u002F\u002Fgithub.com\u002Fcellargalaxy\u002F"}]},pageFootConfig:{lines:[[{text:"Copyright © 2017-? ."},{text:"备案？不存在的"},{text:"Powered by Nuxt.js & Github"}]]},buildTime:new Date(1651154520561),siteName:v,file:{slug:w,description:t,createdAt:x,updatedAt:x,toc:[{id:r,depth:y,text:r},{id:s,depth:y,text:s}],body:{type:z,children:[{type:b,tag:e,props:{},children:[{type:a,value:t}]},{type:a,value:c},{type:a,value:c},{type:b,tag:p,props:{id:A},children:[{type:b,tag:f,props:{href:"#%E5%88%86%E5%B8%83%E4%B8%80%E8%87%B4%E6%80%A7%E7%B1%BB%E5%9E%8B",ariaHidden:g,tabIndex:h},children:[{type:b,tag:i,props:{className:[j,k]},children:[]}]},{type:a,value:A}]},{type:a,value:c},{type:b,tag:q,props:{},children:[{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"强一致性：写入什么数据读出来就是什么数据。任何时候读出来的数据都是最新的"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"弱一致性：不承诺能立即读到新值，也不承诺多久之后能读到新值，但会尽量确保在一个时间级别（例如秒级）能读到新值"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"最终一致性：是弱一致性的一种特例，保证在一定时间内能读到新值"}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:p,props:{id:"cap理论"},children:[{type:b,tag:f,props:{href:"#cap%E7%90%86%E8%AE%BA",ariaHidden:g,tabIndex:h},children:[{type:b,tag:i,props:{className:[j,k]},children:[]}]},{type:a,value:"CAP理论"}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"分布式系统只能最多同时满足可用性、一致性和分区容错性的其中两个。\n由于分布式系统的分区特性是无法避免的，所以实际上分布式系统只能在可用性和一致性之间做妥协。"}]},{type:a,value:c},{type:b,tag:q,props:{},children:[{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"一致性(Consistency)：数据在任何时候都是一致的（强一致性）"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"可用性(Availability)：服务一直处于可用状态，在有限时间内返回结果（强可用性）"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"分区容错性(Partition tolerance)：当系统出现网络分区故障时，仍能对外提供满足一致性和可用性的服务"}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:p,props:{id:"base理论"},children:[{type:b,tag:f,props:{href:"#base%E7%90%86%E8%AE%BA",ariaHidden:g,tabIndex:h},children:[{type:b,tag:i,props:{className:[j,k]},children:[]}]},{type:a,value:"BASE理论"}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"BASE理论的核心想法是，即使做不到强一致性，也至少要保证最终一致性，允许可用性只要求基本可用以加强一致性。"}]},{type:a,value:c},{type:b,tag:q,props:{},children:[{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"基本可用(Basically Available)：系统出现故障时允许丢失部分可用性，例如增加响应时间，服务降级等"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"软状态(Soft state)：允许系统数据存在中间状态，即系统的不同节点之间的数据同步存在延迟"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"最终一致性(Eventually consistent)：系统的所有节点经过一段时间的同步之后都会达到一致"}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:p,props:{id:B},children:[{type:b,tag:f,props:{href:"#%E4%B8%A4%E9%98%B6%E6%AE%B5%E6%8F%90%E4%BA%A4",ariaHidden:g,tabIndex:h},children:[{type:b,tag:i,props:{className:[j,k]},children:[]}]},{type:a,value:B}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"两阶段提交以及升级版的三阶段提交都是只是缓解了数据不一致的问题，并没有完全解决问题。\n看步骤感觉跟分布式事务的两阶段提交和TCC(Try Confirm Cancel)有点像，不知道是不是同一个东西。"}]},{type:a,value:c},{type:b,tag:u,props:{},children:[{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"将数据发送到全部节点，等待节点确认"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"如果全部节点都确认了，则向全部节点发送提交，否则返回失败"}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:p,props:{id:"paxos协议"},children:[{type:b,tag:f,props:{href:"#paxos%E5%8D%8F%E8%AE%AE",ariaHidden:g,tabIndex:h},children:[{type:b,tag:i,props:{className:[j,k]},children:[]}]},{type:a,value:"Paxos协议"}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"网上说好难理解，看过的那几篇文章都没展开介绍，所以就懒得写了。"}]},{type:a,value:c},{type:b,tag:p,props:{id:"raft协议"},children:[{type:b,tag:f,props:{href:"#raft%E5%8D%8F%E8%AE%AE",ariaHidden:g,tabIndex:h},children:[{type:b,tag:i,props:{className:[j,k]},children:[]}]},{type:a,value:"Raft协议"}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"Raft里，节点有三种状态，且同时只会处于其中一种状态："}]},{type:a,value:c},{type:b,tag:q,props:{},children:[{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"从节点：初始时节点都是从节点状态"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"候选节点：当从节点收不到主节点的心跳，从节点会变为候选节点"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"主节点：候选节点会让其他节点给自己投票，获取过半数票节点变为主节点。\n读操作全部节点处理，写操作主节点处理。\n"},{type:b,tag:f,props:{href:C,rel:[l,m,n],target:o},children:[{type:a,value:"写同步我看文章理解是类似二段提交"}]},{type:a,value:"（那这样子怎么就解决了呢？）"}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:p,props:{id:"zab协议"},children:[{type:b,tag:f,props:{href:"#zab%E5%8D%8F%E8%AE%AE",ariaHidden:g,tabIndex:h},children:[{type:b,tag:i,props:{className:[j,k]},children:[]}]},{type:a,value:"ZAB协议"}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"ZAB全称Zookeeper Atomic Broadcast（zookeeper原子广播），据说参考了Paxos，是zookeeper里的分布式一致性的实现。\n虽然我不晓得Paxos是啥样，但是有其中一篇文章说ZAB是简化版的两阶段提交，我看来确实有点像两阶段提交，还是说其实都像。\nzookeeper的节点除了主节点和从节点以外还有观察节点，但是观察节点不参与投票，所以Zab协议并没有观察节点的什么事。\nzookeeper的读操作可以由全部节点直接处理，而从节点和观察节点接受到写操作会转发给主节点处理。\nZAB协议包含两部分，分别是正常状态下的消息广播和异常状态下的崩溃恢复。"}]},{type:a,value:c},{type:b,tag:D,props:{id:r},children:[{type:b,tag:f,props:{href:"#%E6%B6%88%E6%81%AF%E5%B9%BF%E6%92%AD",ariaHidden:g,tabIndex:h},children:[{type:b,tag:i,props:{className:[j,k]},children:[]}]},{type:a,value:r}]},{type:a,value:c},{type:b,tag:u,props:{},children:[{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"主节点会将写请求提案(Proposal)，并且每个提案都有一个递增的zxid（高32位表示年代，低32位自增）"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"主节点对每个从节点都会有一个队列用来存放、异步投递提案，提高性能"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"从节点收到提案后会把提案数据进行持久化，然后给主节点发送确认"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"主节点收到过半数从节点的确认后，就会向全部从节点发送提交，并且同时也会提交自己的提案，然后给客户端返回成功"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"从节点收到主节点的提交后，会提交自己的提案"}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:E}]},{type:a,value:c},{type:b,tag:q,props:{},children:[{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"为什么过半数就可以提交：因为只要过半数，就能确保至少有一个从节点是保存着全部的数据或者提案的，它将有机会在奔溃恢复中被选举为新的主节点"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"在从节点确认提案和主节点提交提案这两步有点像两阶段提交，从节点都没收到提交，主节点给客户端返回成功但自己挂了的情况，依然不理解怎么解决"}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:D,props:{id:s},children:[{type:b,tag:f,props:{href:"#%E5%A5%94%E6%BA%83%E6%81%A2%E5%A4%8D",ariaHidden:g,tabIndex:h},children:[{type:b,tag:i,props:{className:[j,k]},children:[]}]},{type:a,value:s}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"当集群刚启动时，或者主节点失去与过半数从节点联系时，会进入奔溃恢复选举主节点"}]},{type:a,value:c},{type:b,tag:u,props:{},children:[{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"所有从节点一开始先投票给自己，把自己的投票结果发给其他节点"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"节点收到其他节点的投票结果，依据"},{type:b,tag:F,props:{},children:[{type:a,value:"epoch更大-\u003Ezxid更大-\u003Emyid更大"}]},{type:a,value:"，决定是否要修改投票，要改的话则把新的投票发给其他节点"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"有节点获票过半数，当选主节点，会使结果偏向"},{type:b,tag:F,props:{},children:[{type:a,value:"epoch最大 && zxid最大 && myid最大"}]}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"新的主节点会与其余从节点同步数据，直到同步完成才接受请求，对自己的年代加一"}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:E}]},{type:a,value:c},{type:b,tag:q,props:{},children:[{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"文章里都说：确保被主节点提交的提案必须最终被所有的从节点提交。\n但是按这套逻辑实现不了呀，确保被过半数从节点确认\u002F至少一个从节点提交的提案必须最终被所有的从节点提交倒是可以"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"文章里都说：确保丢弃被主节点提出的但是没有被提交的提案。没有看到有文章说明是怎么个丢弃法。"}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"参考文章："}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:b,tag:f,props:{href:"https:\u002F\u002Fwww.cnblogs.com\u002Fxrq730\u002Fp\u002F4944768.html",rel:[l,m,n],target:o},children:[{type:a,value:"从分布式一致性谈到CAP理论、BASE理论"}]}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:b,tag:f,props:{href:"http:\u002F\u002Fairekans.github.io\u002Fcloud-computing\u002F2016\u002F10\u002F26\u002Fintro-to-distributed-consensus",rel:[l,m,n],target:o},children:[{type:a,value:"浅谈分布式一致性"}]}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:b,tag:f,props:{href:C,rel:[l,m,n],target:o},children:[{type:a,value:"图解分布式一致性算法"}]}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:b,tag:f,props:{href:"http:\u002F\u002Fjavavipblog.com\u002F2020\u002F01\u002F20\u002Fzookeeper\u002FZookeeper%E6%95%B0%E6%8D%AE%E5%90%8C%E6%AD%A5%E6%B5%81%E7%A8%8B\u002F",rel:[l,m,n],target:o},children:[{type:a,value:"Zookeeper数据同步以及Leader选举"}]}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:b,tag:f,props:{href:"https:\u002F\u002Fwww.jianshu.com\u002Fp\u002F2bceacd60b8a",rel:[l,m,n],target:o},children:[{type:a,value:"Zookeeper——一致性协议:Zab协议"}]}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:b,tag:f,props:{href:"https:\u002F\u002Fjuejin.im\u002Fpost\u002F5b924b0de51d450e9a2de615",rel:[l,m,n],target:o},children:[{type:a,value:"看大牛如何分析Zookeeper ZAB 协议"}]}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:b,tag:f,props:{href:"https:\u002F\u002Fdbaplus.cn\u002Fnews-141-1875-1.html",rel:[l,m,n],target:o},children:[{type:a,value:"实例详解ZooKeeper ZAB协议、分布式锁与领导选举"}]}]}]},excerpt:{type:z,children:[{type:b,tag:e,props:{},children:[{type:a,value:t}]}]},dir:G,path:"\u002F分布式\u002F20200730\u002F迷谈分布式一致性",extension:".md",title:w,url:"\u002Fblog-code\u002Fview\u002F分布式\u002F20200730\u002F迷谈分布式一致性",createAt:new Date(1596067200000),updateAt:new Date(1596067200000),attributes:[{name:"createAt",value:H},{name:"updateAt",value:H},{name:"sort",value:G,url:"\u002Fblog-code\u002Fpage\u002F分布式\u002F20200730\u002F1\u002F"}]}}],fetch:{},mutations:void 0}}("text","element","\n","li","p","a","true",-1,"span","icon","icon-link","nofollow","noopener","noreferrer","_blank","h1","ul","消息广播","奔溃恢复","这篇文章的标题我也不知道是不是题文相关，依照分布式一致性和Zab协议这两个关键字搜索看了好多篇文章，但是依然很迷糊。\n有些文章甚至研究的是区块链里的分布式一致性算法（大佬，告辞）。\n所以叫迷谈，但尽量不胡谈，起码是参考过别的文章，不是瞎掰。","ol","无名の窝","迷谈分布式一致性","2020-07-30T00:00:00.000Z",2,"root","分布一致性类型","两阶段提交","https:\u002F\u002Fzhuanlan.51cto.com\u002Fart\u002F201910\u002F604122.htm","h2","上面有几个补充说明的问题：","code","\u002F分布式\u002F20200730","2020-07-30")));