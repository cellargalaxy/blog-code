__NUXT_JSONP__("/page/7", (function(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,_,$,aa,ab,ac,ad,ae,af,ag,ah,ai,aj,ak,al,am,an,ao,ap,aq,ar,as,at,au){q.type=c;q.children=[];v.type=c;v.children=[{type:b,tag:h,props:{},children:[{type:a,value:"之前一直只会使用"},{type:b,tag:i,props:{},children:[{type:a,value:"@RunWith(SpringRunner.class)"}]},{type:a,value:"和"},{type:b,tag:i,props:{},children:[{type:a,value:"@SpringBootTest"}]},{type:a,value:"注解来加载整个项目来注入依赖，就只会用个"},{type:b,tag:i,props:{},children:[{type:a,value:"assertEquals"}]},{type:a,value:"方法来进行测试（虽然现在也是）。但问题还是有的，且不论加载整个项目，把无关的依赖都加载进行，浪费时间。如果我要测试添加用户的接口，第一，一测试就把数据写进数据库了呀，即便是测试数据库，不要紧，那我测试第二遍，由于账户名相同，就写不进去数据库了，不能接受地报了错，其实啥问题都没有，如果要再测试就得改账户名，动了代码。也就是说这样的测试代码是连调用两次都不行的垃圾，这样子不是很奇怪吗。"}]},{type:a,value:j},{type:b,tag:h,props:{},children:[{type:a,value:"而Mockito能解决这些问题。先说说情景，我要对"},{type:b,tag:i,props:{},children:[{type:a,value:"UserService"}]},{type:a,value:"类测试添加账号和获取账号的方法，UserService调用了"},{type:b,tag:i,props:{},children:[{type:a,value:"UserDao"}]},{type:a,value:"的方法，为了避免我调用UserService的时候调用到真的，连接到数据库的UserDao，我需要给UserService替换一个UserDao的实现，而这个新的UserDao的实现的方法的返回我希望我能简单直观的控制，这样就叫做对UserService类mock了UserDao。"}]},{type:a,value:j},{type:b,tag:h,props:{},children:[{type:a,value:"在spring boot里使用很简单，下面是个简单例子，"},{type:b,tag:i,props:{},children:[{type:a,value:"UserPo"}]},{type:a,value:"类就是个普通的bean，放着账号密码，就不贴代码了。"}]}];z.type=c;z.children=[{type:b,tag:h,props:{},children:[{type:a,value:"让spring boot支持CORS非常简单，不用做任何配置，只需要在controller里使用"},{type:b,tag:i,props:{},children:[{type:a,value:"@CrossOrigin"}]},{type:a,value:"注解即可。"}]},{type:a,value:j},{type:b,tag:h,props:{},children:[{type:a,value:"@CrossOrigin注解可以使用在类或者方法上，其参数主要有origins和maxAge，用来指定允许跨域的域默认是*，和OPTIONS响应的有效时间，默认是1800。当类和方法都使用@CrossOrigin注解时，会自动合并两个注解的参数。"}]}];I.type=c;I.children=[{type:b,tag:J,props:{id:K},children:[{type:b,tag:L,props:{ariaHidden:M,href:"#%E4%BD%95%E4%B8%BA%E5%9F%9F",tabIndex:N},children:[{type:b,tag:O,props:{className:[P,Q]},children:[]}]},{type:a,value:K}]},{type:a,value:j},{type:b,tag:h,props:{},children:[{type:a,value:"这里的域指的并不是域名，而是协议、主机地址和端口的唯一组合，即协议，主机地址和端口其中一个不一样那就是另外一个域了。"}]},{type:a,value:j},{type:b,tag:J,props:{id:R},children:[{type:b,tag:L,props:{ariaHidden:M,href:"#%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98%E4%B8%BA%E4%BD%95%E8%80%8C%E6%9D%A5",tabIndex:N},children:[{type:b,tag:O,props:{className:[P,Q]},children:[]}]},{type:a,value:R}]},{type:a,value:j},{type:b,tag:h,props:{},children:[{type:a,value:"浏览器为了安全，避免网页被嵌入恶意代码，限制来源于某个域的脚本只能向其来源的域发起ajax请求，并且脚本也无法获取别的域的cookie，DOM等资源，这个叫同源策略。例如我在"},{type:b,tag:i,props:{},children:[{type:a,value:"http:\u002F\u002Fwww.alipay.com\u002F"}]},{type:a,value:"里嵌入了个检测你支付宝密码的脚本，发现你输入密码，就把你的密码发送到我的域名下，但由于我的域名跟阿里的域名不在同一个域里面，这样子偷偷发送密码的请求就会被浏览器拦截住。"}]},{type:a,value:j},{type:b,tag:h,props:{},children:[{type:a,value:"接下来以来源于a.com域（简称a域）的脚本向b.com（简称b域）发起请求作为情景来解释"}]}];V.type=c;V.children=[];_.type=c;_.children=[];ad.type=c;ad.children=[];ai.type=c;ai.children=[];am.type=c;am.children=[];as.type=c;as.children=[{type:b,tag:h,props:{},children:[{type:a,value:aq}]}];return {data:[{navbarConfig:{brandText:"无名の窝",brandUrl:"\u002Fblog-code\u002F",navs:[{text:"文章",url:"\u002Fblog-code\u002Fpage\u002F1\u002F"},{text:"归档",url:"\u002Fblog-code\u002Farchive\u002F0\u002F"},{text:"画画",url:"\u002Fblog-code\u002Fhtml\u002Fhua.html"},{text:"开源",url:"\u002Fblog-code\u002Fhttps:\u002Fgithub.com\u002Fcellargalaxy\u002Fblog-vue"}]},homeConfig:{brandInterval:10000,brands:[{imageUrl:"https:\u002F\u002Fi.loli.net\u002F2020\u002F01\u002F21\u002FmMEAnwY5XPC2pFb.jpg",title:"日常",texts:["我们所度过的每个平凡的日常，也许就是连续不断发生的奇迹。","日々、私たちが過ごしている日常は、実は奇跡の連続なのかもしれない。"]},{imageUrl:"https:\u002F\u002Fi.loli.net\u002F2020\u002F04\u002F19\u002FH1MmXb9xPcYEhT2.jpg",title:"昨日之歌",texts:["时间梭梭箭如飞，人道漫漫步蹒跚","人間そんな変わるもんじゃないのに、月日ばっかどんどん過ぎて"]}],navs:[{text:"Github",url:"https:\u002F\u002Fgithub.com\u002Fcellargalaxy\u002F"}]},pageFootConfig:{lines:[[{text:"Copyright © 2017-? ."},{text:"备案？不存在的"},{text:"Powered by Nuxt.js & Github"}]]},buildTime:new Date(1651154523731),pageSize:10,total:111,currentPage:7,files:[{slug:m,description:k,createdAt:p,updatedAt:p,toc:[],body:q,excerpt:q,dir:r,path:"\u002F其他\u002F20180820\u002F做题笔记",extension:d,title:m,url:"\u002Fblog-code\u002Fview\u002F其他\u002F20180820\u002F做题笔记",createAt:new Date(1534723200000),updateAt:new Date(1534723200000),attributes:[{name:e,value:s},{name:f,value:s},{name:g,value:r,url:"\u002Fblog-code\u002Fpage\u002F其他\u002F20180820\u002F1\u002F"}]},{slug:t,description:"之前一直只会使用@RunWith(SpringRunner.class)和@SpringBootTest注解来加载整个项目来注入依赖，就只会用个assertEquals方法来进行测试（虽然现在也是）。但问题还是有的，且不论加载整个项目，把无关的依赖都加载进行，浪费时间。如果我要测试添加用户的接口，第一，一测试就把数据写进数据库了呀，即便是测试数据库，不要紧，那我测试第二遍，由于账户名相同，就写不进去数据库了，不能接受地报了错，其实啥问题都没有，如果要再测试就得改账户名，动了代码。也就是说这样的测试代码是连调用两次都不行的垃圾，这样子不是很奇怪吗。\n而Mockito能解决这些问题。先说说情景，我要对UserService类测试添加账号和获取账号的方法，UserService调用了UserDao的方法，为了避免我调用UserService的时候调用到真的，连接到数据库的UserDao，我需要给UserService替换一个UserDao的实现，而这个新的UserDao的实现的方法的返回我希望我能简单直观的控制，这样就叫做对UserService类mock了UserDao。\n在spring boot里使用很简单，下面是个简单例子，UserPo类就是个普通的bean，放着账号密码，就不贴代码了。",createdAt:u,updatedAt:u,toc:[],body:v,excerpt:v,dir:w,path:"\u002F框架\u002F20180809\u002FSpring Boot使用Mockito做单元测试",extension:d,title:t,url:"\u002Fblog-code\u002Fview\u002F框架\u002F20180809\u002FSpring Boot使用Mockito做单元测试",createAt:new Date(1533772800000),updateAt:new Date(1533772800000),attributes:[{name:e,value:x},{name:f,value:x},{name:g,value:w,url:"\u002Fblog-code\u002Fpage\u002F框架\u002F20180809\u002F1\u002F"}]},{slug:y,description:"让spring boot支持CORS非常简单，不用做任何配置，只需要在controller里使用@CrossOrigin注解即可。\n@CrossOrigin注解可以使用在类或者方法上，其参数主要有origins和maxAge，用来指定允许跨域的域默认是*，和OPTIONS响应的有效时间，默认是1800。当类和方法都使用@CrossOrigin注解时，会自动合并两个注解的参数。",createdAt:n,updatedAt:n,toc:[],body:z,excerpt:z,dir:A,path:"\u002F框架\u002F20180802\u002Fspring boot与Nginx支持CORS",extension:d,title:y,url:"\u002Fblog-code\u002Fview\u002F框架\u002F20180802\u002Fspring boot与Nginx支持CORS",createAt:new Date(1533168000000),updateAt:new Date(1533168000000),attributes:[{name:e,value:o},{name:f,value:o},{name:g,value:A,url:"\u002Fblog-code\u002Fpage\u002F框架\u002F20180802\u002F1\u002F"}]},{slug:B,description:"何为域\n这里的域指的并不是域名，而是协议、主机地址和端口的唯一组合，即协议，主机地址和端口其中一个不一样那就是另外一个域了。\n跨域问题为何而来\n浏览器为了安全，避免网页被嵌入恶意代码，限制来源于某个域的脚本只能向其来源的域发起ajax请求，并且脚本也无法获取别的域的cookie，DOM等资源，这个叫同源策略。例如我在http:\u002F\u002Fwww.alipay.com\u002F里嵌入了个检测你支付宝密码的脚本，发现你输入密码，就把你的密码发送到我的域名下，但由于我的域名跟阿里的域名不在同一个域里面，这样子偷偷发送密码的请求就会被浏览器拦截住。\n接下来以来源于a.com域（简称a域）的脚本向b.com（简称b域）发起请求作为情景来解释",createdAt:n,updatedAt:n,toc:[{id:C,depth:l,text:C},{id:D,depth:l,text:D},{id:E,depth:l,text:E},{id:F,depth:l,text:F},{id:G,depth:l,text:G},{id:H,depth:l,text:H}],body:I,excerpt:I,dir:S,path:"\u002F协议\u002F20180802\u002FJSONP和CORS的跨域请求",extension:d,title:B,url:"\u002Fblog-code\u002Fview\u002F协议\u002F20180802\u002FJSONP和CORS的跨域请求",createAt:new Date(1533168000000),updateAt:new Date(1533168000000),attributes:[{name:e,value:o},{name:f,value:o},{name:g,value:S,url:"\u002Fblog-code\u002Fpage\u002F协议\u002F20180802\u002F1\u002F"}]},{slug:T,description:k,createdAt:U,updatedAt:U,toc:[],body:V,excerpt:V,dir:W,path:"\u002F框架\u002F20180728\u002Fspring boot+Spring Security+jjwt",extension:d,title:T,url:"\u002Fblog-code\u002Fview\u002F框架\u002F20180728\u002Fspring boot+Spring Security+jjwt",createAt:new Date(1532736000000),updateAt:new Date(1532736000000),attributes:[{name:e,value:X},{name:f,value:X},{name:g,value:W,url:"\u002Fblog-code\u002Fpage\u002F框架\u002F20180728\u002F1\u002F"}]},{slug:Y,description:k,createdAt:Z,updatedAt:Z,toc:[],body:_,excerpt:_,dir:$,path:"\u002F中间件\u002F20180718\u002F使用sql游标遍历结果集",extension:d,title:Y,url:"\u002Fblog-code\u002Fview\u002F中间件\u002F20180718\u002F使用sql游标遍历结果集",createAt:new Date(1531872000000),updateAt:new Date(1531872000000),attributes:[{name:e,value:aa},{name:f,value:aa},{name:g,value:$,url:"\u002Fblog-code\u002Fpage\u002F中间件\u002F20180718\u002F1\u002F"}]},{slug:ab,description:k,createdAt:ac,updatedAt:ac,toc:[],body:ad,excerpt:ad,dir:ae,path:"\u002F折腾\u002F20180714\u002FUbuntu安装配置Redis与置换策略",extension:d,title:ab,url:"\u002Fblog-code\u002Fview\u002F折腾\u002F20180714\u002FUbuntu安装配置Redis与置换策略",createAt:new Date(1531526400000),updateAt:new Date(1531526400000),attributes:[{name:e,value:af},{name:f,value:af},{name:g,value:ae,url:"\u002Fblog-code\u002Fpage\u002F折腾\u002F20180714\u002F1\u002F"}]},{slug:ag,description:k,createdAt:ah,updatedAt:ah,toc:[],body:ai,excerpt:ai,dir:aj,path:"\u002F框架\u002F20180705\u002F作业调度系统-Quarzt的简单使用",extension:d,title:ag,url:"\u002Fblog-code\u002Fview\u002F框架\u002F20180705\u002F作业调度系统-Quarzt的简单使用",createAt:new Date(1530748800000),updateAt:new Date(1530748800000),attributes:[{name:e,value:ak},{name:f,value:ak},{name:g,value:aj,url:"\u002Fblog-code\u002Fpage\u002F框架\u002F20180705\u002F1\u002F"}]},{slug:m,description:k,createdAt:al,updatedAt:al,toc:[],body:am,excerpt:am,dir:an,path:"\u002F其他\u002F20180524\u002F做题笔记",extension:d,title:m,url:"\u002Fblog-code\u002Fview\u002F其他\u002F20180524\u002F做题笔记",createAt:new Date(1527120000000),updateAt:new Date(1527120000000),attributes:[{name:e,value:ao},{name:f,value:ao},{name:g,value:an,url:"\u002Fblog-code\u002Fpage\u002F其他\u002F20180524\u002F1\u002F"}]},{slug:ap,description:aq,createdAt:ar,updatedAt:ar,toc:[],body:as,excerpt:as,dir:at,path:"\u002F框架\u002F20180519\u002FSpring Cloud是个啥",extension:d,title:ap,url:"\u002Fblog-code\u002Fview\u002F框架\u002F20180519\u002FSpring Cloud是个啥",createAt:new Date(1526688000000),updateAt:new Date(1526688000000),attributes:[{name:e,value:au},{name:f,value:au},{name:g,value:at,url:"\u002Fblog-code\u002Fpage\u002F框架\u002F20180519\u002F1\u002F"}]}]}],fetch:{},mutations:void 0}}("text","element","root",".md","createAt","updateAt","sort","p","code","\n","",2,"做题笔记","2018-08-02T00:00:00.000Z","2018-08-02","2018-08-20T00:00:00.000Z",{},"\u002F其他\u002F20180820","2018-08-20","Spring Boot使用Mockito做单元测试","2018-08-09T00:00:00.000Z",{},"\u002F框架\u002F20180809","2018-08-09","spring boot与Nginx支持CORS",{},"\u002F框架\u002F20180802","JSONP和CORS的跨域请求","简单请求的请求","简单请求的响应","预检请求的请求","预检请求的回应","实际请求的请求","实际请求的响应",{},"h1","何为域","a","true",-1,"span","icon","icon-link","跨域问题为何而来","\u002F协议\u002F20180802","spring boot+Spring Security+jjwt","2018-07-28T00:00:00.000Z",{},"\u002F框架\u002F20180728","2018-07-28","使用sql游标遍历结果集","2018-07-18T00:00:00.000Z",{},"\u002F中间件\u002F20180718","2018-07-18","Ubuntu安装配置Redis与置换策略","2018-07-14T00:00:00.000Z",{},"\u002F折腾\u002F20180714","2018-07-14","作业调度系统-Quarzt的简单使用","2018-07-05T00:00:00.000Z",{},"\u002F框架\u002F20180705","2018-07-05","2018-05-24T00:00:00.000Z",{},"\u002F其他\u002F20180524","2018-05-24","Spring Cloud是个啥","其实你问我Spring Cloud是个啥，我也还是说不清的。因为看了网上的文章，我还是看的有点懵逼的。毕竟，我还是项（人）目（生）经验太少，too young，想东西too simple了。不过，作为一名懒惰的程序员，就算sometimes naive，在设计的时候多多少少有一点倾向Spring Cloud所提倡的来实现了。","2018-05-19T00:00:00.000Z",{},"\u002F框架\u002F20180519","2018-05-19")));