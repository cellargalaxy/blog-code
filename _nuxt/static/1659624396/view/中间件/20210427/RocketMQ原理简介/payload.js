__NUXT_JSONP__("/view/%E4%B8%AD%E9%97%B4%E4%BB%B6/20210427/RocketMQ%E5%8E%9F%E7%90%86%E7%AE%80%E4%BB%8B", (function(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,A,B,C,D,E,F,G,H,I,J,K,L){return {data:[{siteConfig:{siteName:v,siteHost:"https:\u002F\u002Fcellargalaxy.github.io",basePath:"\u002Fblog-code\u002F",navs:[{text:"文章",url:"\u002Fblog-code\u002Fpage\u002F1\u002F"},{text:"归档",url:"\u002Fblog-code\u002Farchive\u002F0\u002F"},{text:"画画",url:"\u002Fblog-code\u002Fhtml\u002Fhua.html"},{text:"开源",url:"\u002Fblog-code\u002Fhttps:\u002Fgithub.com\u002Fcellargalaxy\u002Fblog-vue"}],pageSize:10,urlReplace:{"^/file/blog/code":"https:\u002F\u002Foracleamd1.dynv6.net\u002Ffile\u002Ffile\u002Fblog\u002Fcode"},backgroundImage:{duration:w,fade:1000,images:[{url:"https:\u002F\u002Fi.loli.net\u002F2020\u002F01\u002F25\u002FcofTzDQXitjeVZ6.jpg",description:x,type:m},{url:"https:\u002F\u002Fi.loli.net\u002F2020\u002F01\u002F25\u002FsfaRJ2lVeM3NDbE.jpg",description:x,type:m},{url:"https:\u002F\u002Fi.loli.net\u002F2020\u002F01\u002F26\u002FKybiTdftam5Su7x.jpg",description:"青春猪头-双葉理央",type:m},{url:"https:\u002F\u002Fi.loli.net\u002F2020\u002F09\u002F08\u002FxdX73nfs24qgOYk.jpg",description:"京吹-明日香,久美子",type:m},{url:"https:\u002F\u002Fi.loli.net\u002F2020\u002F02\u002F14\u002FMAiruNcEFW2HYtg.jpg",description:"终将成为你-七海灯子,小糸侑",type:m},{url:"https:\u002F\u002Fi.loli.net\u002F2020\u002F02\u002F05\u002FEojdAxTDJsFpbPw.jpg",description:"玉子市场-北白川玉子",type:m},{url:"https:\u002F\u002Fi.loli.net\u002F2020\u002F01\u002F31\u002FAXxwJDRS9fmN2uU.jpg",description:"fate_hf-弓道馆",type:m},{url:"https:\u002F\u002Fi.loli.net\u002F2020\u002F02\u002F01\u002FaHhVObpJus6dnM4.jpg",description:"fate_hf-樱花树",type:m}]}},homeConfig:{brandInterval:w,brands:[{imageUrl:"https:\u002F\u002Fi.loli.net\u002F2020\u002F01\u002F21\u002FmMEAnwY5XPC2pFb.jpg",title:"日常",texts:["我们所度过的每个平凡的日常，也许就是连续不断发生的奇迹。","日々、私たちが過ごしている日常は、実は奇跡の連続なのかもしれない。"]},{imageUrl:"https:\u002F\u002Fi.loli.net\u002F2020\u002F04\u002F19\u002FH1MmXb9xPcYEhT2.jpg",title:"昨日之歌",texts:["时间梭梭箭如飞，人道漫漫步蹒跚","人間そんな変わるもんじゃないのに、月日ばっかどんどん過ぎて"]}],navs:[{text:"Github",url:"https:\u002F\u002Fgithub.com\u002Fcellargalaxy\u002F"}]},pageFootConfig:{lines:[[{text:"Copyright © 2017-? ."},{text:"备案？不存在的"},{text:"Powered by Nuxt.js & Github"}]]},buildTime:new Date(1659624404859),siteName:v,file:{slug:y,description:s,createdAt:z,updatedAt:z,toc:[],body:{type:A,children:[{type:b,tag:d,props:{},children:[{type:a,value:s}]},{type:a,value:c},{type:a,value:c},{type:b,tag:g,props:{id:B},children:[{type:b,tag:f,props:{href:"#%E4%B8%BB%E9%A2%98%E6%A8%A1%E5%9E%8B",ariaHidden:h,tabIndex:i},children:[{type:b,tag:j,props:{className:[k,l]},children:[]}]},{type:a,value:B}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"主题模型或者称为发布订阅模型。\n一般由多个生产者组成一个生产组，多个消费者组成消费组。主题由多个队列组成，可以给同一主题下的消息添加标签，进行更细颗粒度的区分。\n一个主题维护多个队列，以提高主题的并发能力。生产者可以给多个队列生产消息。"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:b,tag:t,props:{alt:u,"data-src":"https:\u002F\u002Foracleamd1.dynv6.net\u002Ffile\u002Ffile\u002Fblog\u002Fcode\u002F20210427\u002Fcdn.jsdelivr.net-gh-piterjia-piterjia.github.io-images-posts-rocketmq-rocketmq-3.jpg.JPEG"},children:[]}]},{type:a,value:c},{type:b,tag:g,props:{id:C},children:[{type:b,tag:f,props:{href:"#%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%9E%8B",ariaHidden:h,tabIndex:i},children:[{type:b,tag:j,props:{className:[k,l]},children:[]}]},{type:a,value:C}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"RocketMQ架构由四部分组成"}]},{type:a,value:c},{type:b,tag:n,props:{},children:[{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"Producer：生产者"}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"Consumer：消费者"}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"Broker：RocketMQ服务的实例"}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"NameServer：用于Broker的服务发现"}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:b,tag:t,props:{alt:u,"data-src":"https:\u002F\u002Foracleamd1.dynv6.net\u002Ffile\u002Ffile\u002Fblog\u002Fcode\u002F20210427\u002Fimg2018.cnblogs.com-blog-1090617-201906-1090617-20190626173042073-147043337.jpg.JPEG"},children:[]}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:b,tag:t,props:{alt:u,"data-src":"https:\u002F\u002Foracleamd1.dynv6.net\u002Ffile\u002Ffile\u002Fblog\u002Fcode\u002F20210427\u002Fcdn.jsdelivr.net-gh-piterjia-piterjia.github.io-images-posts-rocketmq-rocketmq-9.jpg.JPEG"},children:[]}]},{type:a,value:c},{type:b,tag:g,props:{id:"nameserver与broker"},children:[{type:b,tag:f,props:{href:"#nameserver%E4%B8%8Ebroker",ariaHidden:h,tabIndex:i},children:[{type:b,tag:j,props:{className:[k,l]},children:[]}]},{type:a,value:"NameServer与Broker"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"多个Broker会组成主从集群，从节点从主节点同步数据，如果主节点挂了，从节点提供消费功能，但不能进行写入。"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"多个NameServer组成去中心化集群，NameServer之间不会进行数据同步。\n每个Broker会与所有NameServer维持一个长连接，每隔30s向所有NameServer发送心跳同步自身的主题等信息。\n客户端会向NameServer查询Broker的路由信息。所以如果主节点挂了，客户端最多要30s才会发现。"}]},{type:a,value:c},{type:b,tag:g,props:{id:D},children:[{type:b,tag:f,props:{href:"#%E7%94%9F%E4%BA%A7%E8%80%85",ariaHidden:h,tabIndex:i},children:[{type:b,tag:j,props:{className:[k,l]},children:[]}]},{type:a,value:D}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"生产者会轮训投递消息到每一个队列里。一般需要将队列均匀分布在不同的Broker里，均衡Broker的压力。"}]},{type:a,value:c},{type:b,tag:g,props:{id:E},children:[{type:b,tag:f,props:{href:"#%E6%B6%88%E8%B4%B9%E8%80%85",ariaHidden:h,tabIndex:i},children:[{type:b,tag:j,props:{className:[k,l]},children:[]}]},{type:a,value:E}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"消费者支持pull和push的方式消费方式。而消费模式有两种："}]},{type:a,value:c},{type:b,tag:n,props:{},children:[{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"广播模式：每条消息都会被消费组里的全部消费者进行消费"}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"集群模式：每条消息都只由消费组里的一个消费者进行消费"}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"在集群消费模式下，每个队列最多由一个消费者进行消费，而一个消费者可以消费多个队列。一般队列和消费者数量一致，如何消费者大于队列，就会有消费者空闲。\n队列会维护每个消费组的offset，消息被一个消费组消费之后不会删除，待下一个消费组则进行消费。"}]},{type:a,value:c},{type:b,tag:g,props:{id:F},children:[{type:b,tag:f,props:{href:"#%E9%A1%BA%E5%BA%8F%E6%B6%88%E8%B4%B9",ariaHidden:h,tabIndex:i},children:[{type:b,tag:j,props:{className:[k,l]},children:[]}]},{type:a,value:F}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"RocketMQ的主题之间的消息是无序的，而RocketMQ支持的顺序消费有两种："}]},{type:a,value:c},{type:b,tag:n,props:{},children:[{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"普通顺序：同个主题的同个队列的消息是有序的，但是同个主题的不同队列直接的消息是无序的\n"},{type:b,tag:n,props:{},children:[{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"生产者需要线性投递有序消息"}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"如果Broker挂了，Broker所在的队列就不可用，此时同个hash投递的消息就可能会投递到其他队列里，导致乱序"}]},{type:a,value:c}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"严格顺序：同个主题下的消息都是有序的\n"},{type:b,tag:n,props:{},children:[{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"如果有一台Broker挂了，则整个集群不可用"}]},{type:a,value:c}]},{type:a,value:c}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:g,props:{id:G},children:[{type:b,tag:f,props:{href:"#%E5%9B%9E%E6%BA%AF%E6%B6%88%E8%B4%B9",ariaHidden:h,tabIndex:i},children:[{type:b,tag:j,props:{className:[k,l]},children:[]}]},{type:a,value:G}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"RocketMQ支持对已经消费过的消息再次消费。RocketMQ支持按时间维度进行回溯，时间进度到毫秒。"}]},{type:a,value:c},{type:b,tag:g,props:{id:H},children:[{type:b,tag:f,props:{href:"#%E5%88%B7%E7%9B%98%E6%9C%BA%E5%88%B6",ariaHidden:h,tabIndex:i},children:[{type:b,tag:j,props:{className:[k,l]},children:[]}]},{type:a,value:H}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"RocketMQ有两种刷盘机制："}]},{type:a,value:c},{type:b,tag:n,props:{},children:[{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"同步刷盘：每有消息写入都进行刷盘，等待刷盘成功才算消息写入成功，适用于与钱有关的场景"}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"异步刷盘：开一个线程去异步进行刷盘，减低IO延迟提高吞吐量，适用于对消息保证要求不高的场景，如发送验证码"}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:g,props:{id:I},children:[{type:b,tag:f,props:{href:"#%E4%B8%BB%E4%BB%8E%E5%90%8C%E6%AD%A5",ariaHidden:h,tabIndex:i},children:[{type:b,tag:j,props:{className:[k,l]},children:[]}]},{type:a,value:I}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"RocketMQ有两种集群模式和复制模式："}]},{type:a,value:c},{type:b,tag:n,props:{},children:[{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"普通集群：会给每个Broker一个固定的角色，主节点负责响应客户端请求并存储消息。从节点同步主节点的消息，并响应部分客户端的读请求。如果主节点挂了，集群就只读了。"}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Dledger高可用集群：使用Raft选举算法选出主节点。当写入消息时，要求消息至少复制到过半数节点，才给客户端返回成功。"}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"同步复制：消息双写到主从节点才返回成功"}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"异步复制：消息写入主节点就返回成功，之后再一步同步到从节点"}]},{type:a,value:c}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:g,props:{id:J},children:[{type:b,tag:f,props:{href:"#%E5%AD%98%E5%82%A8%E6%9C%BA%E5%88%B6",ariaHidden:h,tabIndex:i},children:[{type:b,tag:j,props:{className:[k,l]},children:[]}]},{type:a,value:J}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"RocketMQ中有三种存储文件："}]},{type:a,value:c},{type:b,tag:n,props:{},children:[{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"CommitLog：不区主题和分队列，全部数据会保存在一起。单文件大小默认1G，文件名为起始消息的offset"}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"ConsumeQueue：消息消费队列，实际是CommitLog的索引。\n由于CommitLog包含全部主题的消息，但实际消费是以主题队列为维度的，所以要遍历CommitLog来查找消息效率很低。\nConsumeQueue文件夹结构是"},{type:b,tag:"code",props:{},children:[{type:a,value:"topic\u002Fqueue\u002Ffile"}]},{type:a,value:"，概念上对应主题的一个队里。\n保存了指定主题下队列的消息在CommitLog中的偏移量(8字节)，消息大小(4字节)和消息tag的hash(8字节)。\n单个文件有30W个条目组成，文件大小约5.72M。\n通过消息的偏移量计算出索引在索引文件的文件，直接读取索引。再通过索引中的文件偏移量读取消息。"}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"IndexFile：可以通过消息的Key或者时间区间查找消息"}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Kafka在同一个Broker上，会为不同主题各分配一个文件，但是RocketMQ却只分配一个文件。\n主要是为了提高分批写入文件的概率，提高IO性能。但所带来的读取消息使用索引来解决。"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"参考文章"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:b,tag:f,props:{href:"https:\u002F\u002Fpiterjia.github.io\u002F2020\u002F03\u002F23\u002Frocketmq-introduce\u002F",rel:[o,p,q],target:r},children:[{type:a,value:"RocketMQ 原理简介与入门"}]}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:b,tag:f,props:{href:"https:\u002F\u002Fyunho.io\u002Frocketmq\u002F11.html",rel:[o,p,q],target:r},children:[{type:a,value:"RocketMQ 原理篇之基本概念"}]}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:b,tag:f,props:{href:"https:\u002F\u002Fwww.javazhiyin.com\u002F44018.html",rel:[o,p,q],target:r},children:[{type:a,value:"后端程序员必备：RocketMQ相关流程图\u002F原理图"}]}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:b,tag:f,props:{href:"https:\u002F\u002Fwww.cnblogs.com\u002Fqdhxhz\u002Fp\u002F11094624.html",rel:[o,p,q],target:r},children:[{type:a,value:"RocketMQ(1)-架构原理"}]}]}]},excerpt:{type:A,children:[{type:b,tag:d,props:{},children:[{type:a,value:s}]}]},dir:K,path:"\u002F中间件\u002F20210427\u002FRocketMQ原理简介",extension:".md",title:y,url:"\u002Fblog-code\u002Fview\u002F中间件\u002F20210427\u002FRocketMQ原理简介\u002F",createAt:new Date(1619481600000),updateAt:new Date(1619481600000),attributes:[{name:"createAt",value:L},{name:"updateAt",value:L},{name:"sort",value:K,url:"\u002Fblog-code\u002Fpage\u002F中间件\u002F20210427\u002F1\u002F"}]}}],fetch:{},mutations:void 0}}("text","element","\n","p","li","a","h1","true",-1,"span","icon","icon-link","wide","ul","nofollow","noopener","noreferrer","_blank","RocketMQ是一个用java实现的队列模型消息中间件，由阿里开发，之后贡献给了Apache。","img","","无名の窝",10000,"青春猪头-牧之原翔子-江之岛","RocketMQ原理简介","2021-04-27T00:00:00.000Z","root","主题模型","架构模型","生产者","消费者","顺序消费","回溯消费","刷盘机制","主从同步","存储机制","\u002F中间件\u002F20210427","2021-04-27")));