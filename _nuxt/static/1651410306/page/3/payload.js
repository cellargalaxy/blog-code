__NUXT_JSONP__("/page/3", (function(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,_,$,aa,ab,ac,ad,ae,af,ag,ah,ai,aj,ak,al,am,an,ao,ap,aq,ar,as,at,au,av,aw,ax,ay,az,aA){s.type=d;s.children=[];w.type=d;w.children=[];z.type=d;z.children=[{type:c,tag:A,props:{id:B},children:[{type:c,tag:C,props:{ariaHidden:D,href:"#%E6%9C%8D%E5%8A%A1%E6%8E%A5%E5%85%A5",tabIndex:E},children:[{type:c,tag:F,props:{className:[G,H]},children:[]}]},{type:b,value:B}]},{type:b,value:k},{type:c,tag:i,props:{},children:[{type:b,value:"API网关最重要的功能就是提供服务的统一接入。\n通常是外部服务统一经过API网关请求到内部不同的服务。\n这样内部服务不会直接暴露在外部，保护了内部服务的安全。\n外部服务也只需要面向API网关进行对接即可，不用跟内部各种异构的服务打交道。"}]}];R.type=d;R.children=[{type:c,tag:A,props:{id:"java内存模型jmm"},children:[{type:c,tag:C,props:{ariaHidden:D,href:"#java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8Bjmm",tabIndex:E},children:[{type:c,tag:F,props:{className:[G,H]},children:[]}]},{type:b,value:"java内存模型(JMM)"}]},{type:b,value:k},{type:c,tag:i,props:{},children:[{type:b,value:"JMM模型下，每个线程都有自己的本地内存，线程对内存的操作也是先操作本地内存。\n之后才将本地内存的数据刷新到主内存里，让各个线程更新共享。"}]}];W.type=d;W.children=[];af.type=d;af.children=[];aj.type=d;aj.children=[];am.type=d;am.children=[{type:c,tag:i,props:{},children:[{type:b,value:"ES的数据结构：index -\u003E type -\u003E document -\u003E field。"}]},{type:b,value:k},{type:c,tag:i,props:{},children:[{type:b,value:"每一个索引会被分为多个shard，每个shard保存部分数据，分别放在不同节点上。\nshard有主shard允许读写，从shard允许读，从shard会与主shard同步数据。\nES集群会选举出一个主节点，负责维护索引元数据和管理主shard和从shard。"}]},{type:b,value:k},{type:c,tag:i,props:{},children:[{type:b,value:"ES写数据请求：客户端选择一个节点作为自己的协调节点，协调节点根据请求文档进行路由。\n把请求转发给主shard所在的节点，当从shard也同步完成了，协调节点才会给客户端响应。"}]},{type:b,value:k},{type:c,tag:i,props:{},children:[{type:b,value:"ES读数据请求：客户端选择一个节点作为自己的协调节点，协调节点根据请求文档进行路由。\n在主shard和全部从shard节点上轮询一个节点进行请求转发，然后把结果返回给客户端。"}]}];as.type=d;as.children=[];ay.type=d;ay.children=[{type:c,tag:i,props:{},children:[{type:b,value:aw}]}];return {data:[{navbarConfig:{brandText:"无名の窝",brandUrl:"\u002Fblog-code\u002F",navs:[{text:"文章",url:"\u002Fblog-code\u002Fpage\u002F1\u002F"},{text:"归档",url:"\u002Fblog-code\u002Farchive\u002F0\u002F"},{text:"画画",url:"\u002Fblog-code\u002Fhtml\u002Fhua.html"},{text:"开源",url:"\u002Fblog-code\u002Fhttps:\u002Fgithub.com\u002Fcellargalaxy\u002Fblog-vue"}]},homeConfig:{brandInterval:10000,brands:[{imageUrl:"https:\u002F\u002Fi.loli.net\u002F2020\u002F01\u002F21\u002FmMEAnwY5XPC2pFb.jpg",title:"日常",texts:["我们所度过的每个平凡的日常，也许就是连续不断发生的奇迹。","日々、私たちが過ごしている日常は、実は奇跡の連続なのかもしれない。"]},{imageUrl:"https:\u002F\u002Fi.loli.net\u002F2020\u002F04\u002F19\u002FH1MmXb9xPcYEhT2.jpg",title:"昨日之歌",texts:["时间梭梭箭如飞，人道漫漫步蹒跚","人間そんな変わるもんじゃないのに、月日ばっかどんどん過ぎて"]}],navs:[{text:"Github",url:"https:\u002F\u002Fgithub.com\u002Fcellargalaxy\u002F"}]},pageFootConfig:{lines:[[{text:"Copyright © 2017-? ."},{text:"备案？不存在的"},{text:"Powered by Nuxt.js & Github"}]]},buildTime:new Date(1651410315835),pageSize:10,total:112,currentPage:3,files:[{slug:q,description:j,createdAt:r,updatedAt:r,toc:[{id:"required",depth:a,text:"REQUIRED"},{id:"nested",depth:a,text:"NESTED"},{id:"requires_new",depth:a,text:"REQUIRES_NEW"},{id:"mandatory",depth:a,text:"MANDATORY"},{id:"supports",depth:a,text:"SUPPORTS"},{id:"not_supported",depth:a,text:"NOT_SUPPORTED"},{id:"never",depth:a,text:"NEVER"}],body:s,excerpt:s,dir:t,path:"\u002F框架\u002F20200707\u002FSpring事务总结",extension:e,title:q,url:"\u002Fblog-code\u002Fview\u002F框架\u002F20200707\u002FSpring事务总结",createAt:new Date(1594080000000),updateAt:new Date(1594080000000),attributes:[{name:f,value:u},{name:g,value:u},{name:h,value:t,url:"\u002Fblog-code\u002Fpage\u002F框架\u002F20200707\u002F1\u002F"}]},{slug:v,description:j,createdAt:l,updatedAt:l,toc:[],body:w,excerpt:w,dir:m,path:"\u002F分布式\u002F20200703\u002F分布式限流",extension:e,title:v,url:"\u002Fblog-code\u002Fview\u002F分布式\u002F20200703\u002F分布式限流",createAt:new Date(1593734400000),updateAt:new Date(1593734400000),attributes:[{name:f,value:n},{name:g,value:n},{name:h,value:m,url:x}]},{slug:y,description:"服务接入\nAPI网关最重要的功能就是提供服务的统一接入。\n通常是外部服务统一经过API网关请求到内部不同的服务。\n这样内部服务不会直接暴露在外部，保护了内部服务的安全。\n外部服务也只需要面向API网关进行对接即可，不用跟内部各种异构的服务打交道。",createdAt:l,updatedAt:l,toc:[],body:z,excerpt:z,dir:m,path:"\u002F分布式\u002F20200703\u002FAPI网关总结",extension:e,title:y,url:"\u002Fblog-code\u002Fview\u002F分布式\u002F20200703\u002FAPI网关总结",createAt:new Date(1593734400000),updateAt:new Date(1593734400000),attributes:[{name:f,value:n},{name:g,value:n},{name:h,value:m,url:x}]},{slug:I,description:"java内存模型(JMM)\nJMM模型下，每个线程都有自己的本地内存，线程对内存的操作也是先操作本地内存。\n之后才将本地内存的数据刷新到主内存里，让各个线程更新共享。",createdAt:J,updatedAt:J,toc:[{id:K,depth:a,text:K},{id:L,depth:a,text:L},{id:M,depth:a,text:M},{id:N,depth:a,text:N},{id:O,depth:a,text:O},{id:P,depth:a,text:P},{id:Q,depth:a,text:Q}],body:R,excerpt:R,dir:S,path:"\u002Fjava\u002F20200617\u002FJava并发",extension:e,title:I,url:"\u002Fblog-code\u002Fview\u002Fjava\u002F20200617\u002FJava并发",createAt:new Date(1592352000000),updateAt:new Date(1592352000000),attributes:[{name:f,value:T},{name:g,value:T},{name:h,value:S,url:"\u002Fblog-code\u002Fpage\u002Fjava\u002F20200617\u002F1\u002F"}]},{slug:U,description:j,createdAt:V,updatedAt:V,toc:[],body:W,excerpt:W,dir:X,path:"\u002F中间件\u002F20200609\u002FMySQL总结",extension:e,title:U,url:"\u002Fblog-code\u002Fview\u002F中间件\u002F20200609\u002FMySQL总结",createAt:new Date(1591660800000),updateAt:new Date(1591660800000),attributes:[{name:f,value:Y},{name:g,value:Y},{name:h,value:X,url:"\u002Fblog-code\u002Fpage\u002F中间件\u002F20200609\u002F1\u002F"}]},{slug:Z,description:j,createdAt:_,updatedAt:_,toc:[{id:$,depth:a,text:$},{id:aa,depth:a,text:aa},{id:ab,depth:a,text:ab},{id:ac,depth:a,text:ac},{id:"sorted-set",depth:a,text:"sorted set"},{id:"rdb",depth:a,text:"RDB"},{id:"aof",depth:a,text:"AOF"},{id:ad,depth:a,text:ad},{id:ae,depth:a,text:ae}],body:af,excerpt:af,dir:ag,path:"\u002F中间件\u002F20200603\u002FRedis总结",extension:e,title:Z,url:"\u002Fblog-code\u002Fview\u002F中间件\u002F20200603\u002FRedis总结",createAt:new Date(1591142400000),updateAt:new Date(1591142400000),attributes:[{name:f,value:ah},{name:g,value:ah},{name:h,value:ag,url:"\u002Fblog-code\u002Fpage\u002F中间件\u002F20200603\u002F1\u002F"}]},{slug:ai,description:j,createdAt:o,updatedAt:o,toc:[],body:aj,excerpt:aj,dir:ak,path:"\u002F框架\u002F20200602\u002FTaf框架",extension:e,title:ai,url:"\u002Fblog-code\u002Fview\u002F框架\u002F20200602\u002FTaf框架",createAt:new Date(1591056000000),updateAt:new Date(1591056000000),attributes:[{name:f,value:p},{name:g,value:p},{name:h,value:ak,url:"\u002Fblog-code\u002Fpage\u002F框架\u002F20200602\u002F1\u002F"}]},{slug:al,description:"ES的数据结构：index -\u003E type -\u003E document -\u003E field。\n每一个索引会被分为多个shard，每个shard保存部分数据，分别放在不同节点上。\nshard有主shard允许读写，从shard允许读，从shard会与主shard同步数据。\nES集群会选举出一个主节点，负责维护索引元数据和管理主shard和从shard。\nES写数据请求：客户端选择一个节点作为自己的协调节点，协调节点根据请求文档进行路由。\n把请求转发给主shard所在的节点，当从shard也同步完成了，协调节点才会给客户端响应。\nES读数据请求：客户端选择一个节点作为自己的协调节点，协调节点根据请求文档进行路由。\n在主shard和全部从shard节点上轮询一个节点进行请求转发，然后把结果返回给客户端。",createdAt:o,updatedAt:o,toc:[],body:am,excerpt:am,dir:an,path:"\u002F中间件\u002F20200602\u002FElasticSearch总结",extension:e,title:al,url:"\u002Fblog-code\u002Fview\u002F中间件\u002F20200602\u002FElasticSearch总结",createAt:new Date(1591056000000),updateAt:new Date(1591056000000),attributes:[{name:f,value:p},{name:g,value:p},{name:h,value:an,url:"\u002Fblog-code\u002Fpage\u002F中间件\u002F20200602\u002F1\u002F"}]},{slug:ao,description:j,createdAt:ap,updatedAt:ap,toc:[{id:aq,depth:a,text:aq},{id:"kafka端",depth:a,text:"Kafka端"},{id:ar,depth:a,text:ar}],body:as,excerpt:as,dir:at,path:"\u002F中间件\u002F20200601\u002FMQ总结",extension:e,title:ao,url:"\u002Fblog-code\u002Fview\u002F中间件\u002F20200601\u002FMQ总结",createAt:new Date(1590969600000),updateAt:new Date(1590969600000),attributes:[{name:f,value:au},{name:g,value:au},{name:h,value:at,url:"\u002Fblog-code\u002Fpage\u002F中间件\u002F20200601\u002F1\u002F"}]},{slug:av,description:aw,createdAt:ax,updatedAt:ax,toc:[],body:ay,excerpt:ay,dir:az,path:"\u002Fjava\u002F20200518\u002FJava引用类型",extension:e,title:av,url:"\u002Fblog-code\u002Fview\u002Fjava\u002F20200518\u002FJava引用类型",createAt:new Date(1589760000000),updateAt:new Date(1589760000000),attributes:[{name:f,value:aA},{name:g,value:aA},{name:h,value:az,url:"\u002Fblog-code\u002Fpage\u002Fjava\u002F20200518\u002F1\u002F"}]}]}],fetch:{},mutations:void 0}}(2,"text","element","root",".md","createAt","updateAt","sort","p","","\n","2020-07-03T00:00:00.000Z","\u002F分布式\u002F20200703","2020-07-03","2020-06-02T00:00:00.000Z","2020-06-02","Spring事务总结","2020-07-07T00:00:00.000Z",{},"\u002F框架\u002F20200707","2020-07-07","分布式限流",{},"\u002Fblog-code\u002Fpage\u002F分布式\u002F20200703\u002F1\u002F","API网关总结",{},"h1","服务接入","a","true",-1,"span","icon","icon-link","Java并发","2020-06-17T00:00:00.000Z","偏向锁","获取轻量级锁","释放轻量级锁","重量级锁","锁消除","锁优化","锁升级与锁降级",{},"\u002Fjava\u002F20200617","2020-06-17","MySQL总结","2020-06-09T00:00:00.000Z",{},"\u002F中间件\u002F20200609","2020-06-09","Redis总结","2020-06-03T00:00:00.000Z","string","list","hash","set","哨兵集群选举","哨兵集群的数据丢失",{},"\u002F中间件\u002F20200603","2020-06-03","Taf框架",{},"\u002F框架\u002F20200602","ElasticSearch总结",{},"\u002F中间件\u002F20200602","MQ总结","2020-06-01T00:00:00.000Z","生产端","消费端",{},"\u002F中间件\u002F20200601","2020-06-01","Java引用类型","java除了基本类型以外，其余的都是引用类型。\n而java的引用类型有四种：强引用，软引用，弱引用和虚引用。\n除了强引用外，其余的引用都是抽象类Reference的子类。","2020-05-18T00:00:00.000Z",{},"\u002Fjava\u002F20200518","2020-05-18")));