__NUXT_JSONP__("/view/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/20180213/%E7%BA%A2%E9%BB%91%E6%A0%91%E7%9A%84%E5%8E%9F%E7%90%86", (function(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,A,B,C,D,E,F,G,H,I,J,K,L,M,N,O){return {data:[{siteConfig:{siteName:y,siteHost:"https:\u002F\u002Fcellargalaxy.github.io",basePath:"\u002Fblog-code\u002F",navs:[{text:"文章",url:"\u002Fblog-code\u002Fpage\u002F1\u002F"},{text:"归档",url:"\u002Fblog-code\u002Farchive\u002F0\u002F"},{text:"画画",url:"\u002Fblog-code\u002Fhtml\u002Fhua.html"},{text:"开源",url:"\u002Fblog-code\u002Fhttps:\u002Fgithub.com\u002Fcellargalaxy\u002Fblog-vue"}],pageSize:10,urlReplace:{"^/file/blog/code":"https:\u002F\u002Foracleamd1.dynv6.net\u002Ffile\u002Ffile\u002Fblog\u002Fcode"},backgroundImage:{duration:z,fade:1000,images:[{url:"https:\u002F\u002Fi.loli.net\u002F2020\u002F01\u002F25\u002FcofTzDQXitjeVZ6.jpg",description:A,type:h},{url:"https:\u002F\u002Fi.loli.net\u002F2020\u002F01\u002F25\u002FsfaRJ2lVeM3NDbE.jpg",description:A,type:h},{url:"https:\u002F\u002Fi.loli.net\u002F2020\u002F01\u002F26\u002FKybiTdftam5Su7x.jpg",description:"青春猪头-双葉理央",type:h},{url:"https:\u002F\u002Fi.loli.net\u002F2020\u002F09\u002F08\u002FxdX73nfs24qgOYk.jpg",description:"京吹-明日香,久美子",type:h},{url:"https:\u002F\u002Fi.loli.net\u002F2020\u002F02\u002F14\u002FMAiruNcEFW2HYtg.jpg",description:"终将成为你-七海灯子,小糸侑",type:h},{url:"https:\u002F\u002Fi.loli.net\u002F2020\u002F02\u002F05\u002FEojdAxTDJsFpbPw.jpg",description:"玉子市场-北白川玉子",type:h},{url:"https:\u002F\u002Fi.loli.net\u002F2020\u002F01\u002F31\u002FAXxwJDRS9fmN2uU.jpg",description:"fate_hf-弓道馆",type:h},{url:"https:\u002F\u002Fi.loli.net\u002F2020\u002F02\u002F01\u002FaHhVObpJus6dnM4.jpg",description:"fate_hf-樱花树",type:h}]}},homeConfig:{brandInterval:z,brands:[{imageUrl:"https:\u002F\u002Fi.loli.net\u002F2020\u002F01\u002F21\u002FmMEAnwY5XPC2pFb.jpg",title:"日常",texts:["我们所度过的每个平凡的日常，也许就是连续不断发生的奇迹。","日々、私たちが過ごしている日常は、実は奇跡の連続なのかもしれない。"]},{imageUrl:"https:\u002F\u002Fi.loli.net\u002F2020\u002F04\u002F19\u002FH1MmXb9xPcYEhT2.jpg",title:"昨日之歌",texts:["时间梭梭箭如飞，人道漫漫步蹒跚","人間そんな変わるもんじゃないのに、月日ばっかどんどん過ぎて"]}],navs:[{text:"Github",url:"https:\u002F\u002Fgithub.com\u002Fcellargalaxy\u002F"}]},pageFootConfig:{lines:[[{text:"Copyright © 2017-? ."},{text:"备案？不存在的"},{text:"Powered by Nuxt.js & Github"}]]},buildTime:new Date(1653754781355),siteName:y,file:{slug:B,description:w,createdAt:C,updatedAt:C,toc:[],body:{type:D,children:[{type:b,tag:d,props:{},children:[{type:a,value:w}]},{type:a,value:c},{type:a,value:c},{type:b,tag:o,props:{id:E},children:[{type:b,tag:f,props:{href:"#%E4%BA%8C%E5%8F%89%E6%8E%92%E5%BA%8F%E6%A0%91",ariaHidden:p,tabIndex:q},children:[{type:b,tag:r,props:{className:[s,t]},children:[]}]},{type:a,value:E}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"二叉排序树大家应该比较熟悉了，就是一个二叉树，左孩子的值比父节点小，右孩子比父节点大。但是二叉排序树在插入和删除过程中容易导致树失去平衡，导致查找效率降低。而红黑树就是平衡二叉树的一种实现方法。"}]},{type:a,value:c},{type:b,tag:o,props:{id:v},children:[{type:b,tag:f,props:{href:"#%E7%BA%A2%E9%BB%91%E6%A0%91",ariaHidden:p,tabIndex:q},children:[{type:b,tag:r,props:{className:[s,t]},children:[]}]},{type:a,value:v}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"既然红黑树就是平衡二叉树的一种实现方法，那红黑树就是一颗二叉排序树，拥有二叉排序树的全部特性。除此以外，红黑树还有五条规则："}]},{type:a,value:c},{type:b,tag:g,props:{},children:[{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"每个节点要么是红色，要么是黑色"}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"根节点永远是黑色"}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"所有的叶节点都是是黑色的（注意这里说叶子节点其实是上图中的 NIL 节点）"}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"每个红色节点的两个子节点一定都是黑色（从每个叶子到根的所有路径上不能有两个连续的红色节点）"}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"从任一节点到其子树中每个叶子节点的路径都包含相同数量的黑色节点"}]},{type:a,value:c}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:b,tag:i,props:{alt:j,"data-src":"https:\u002F\u002Foracleamd1.dynv6.net\u002Ffile\u002Ffile\u002Fblog\u002Fcode\u002F20180213\u002Fupload.wikimedia.org-wikipedia-commons-thumb-6-66-Red-black_tree_example.svg-675px-Red-black_tree_example.svg.png.1.png"},children:[]}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"粗略的说，红黑树添加节点和删除节点都是分两部，第一步是先把数据插入\u002F删除数据，由于插入\u002F删除可能导致新的树不符合红黑树的规则，所以第二步是在以及插入\u002F删除的新树上通过旋转或者修改节点的颜色来把新树调整回符合规则。"}]},{type:a,value:c},{type:b,tag:o,props:{id:F},children:[{type:b,tag:f,props:{href:"#%E7%BA%A2%E9%BB%91%E6%A0%91%E7%9A%84%E6%97%8B%E8%BD%AC",ariaHidden:p,tabIndex:q},children:[{type:b,tag:r,props:{className:[s,t]},children:[]}]},{type:a,value:F}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"红黑树的旋转除了调整节点之间的父子关系以外，由于节点还有颜色，所以还需要加一步对颜色的修改。下面这两个动图演示的只是节点间的关系的改变，而颜色的修改方法是：左旋和右旋都是E和S两个节点对调，E和S之间的颜色也要对调，当然颜色一样就不需要了。下文关于红黑树的旋转都是包活颜色上的对调的。"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:b,tag:i,props:{alt:j,"data-src":"https:\u002F\u002Foracleamd1.dynv6.net\u002Ffile\u002Ffile\u002Fblog\u002Fcode\u002F20180213\u002Fimg.blog.csdn.net-20170110142027660.gif"},children:[]}]},{type:a,value:c},{type:b,tag:u,props:{},children:[{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"左旋"}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:b,tag:i,props:{alt:j,"data-src":"https:\u002F\u002Foracleamd1.dynv6.net\u002Ffile\u002Ffile\u002Fblog\u002Fcode\u002F20180213\u002Fimg.blog.csdn.net-20170110142410322.gif"},children:[]}]},{type:a,value:c},{type:b,tag:u,props:{},children:[{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"右旋"}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:o,props:{id:G},children:[{type:b,tag:f,props:{href:"#%E7%BA%A2%E9%BB%91%E6%A0%91%E7%9A%84%E6%8F%92%E5%85%A5",ariaHidden:p,tabIndex:q},children:[{type:b,tag:r,props:{className:[s,t]},children:[]}]},{type:a,value:G}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"第一步，如上所说，先把数据插入进树再说。既然红黑树是二叉排序树，那么插入位置的确定就是按二叉排序树的插入 方法，这里就不多说了。选择好插入位置之后，还有一个问题没解决，那就是这个新插入的节点是红色还是黑色？一般都是把新插入的节点颜色设置为红色的，这样会使得违反红黑树规则的情况简单一点。那么插入一个红色节点什么情况下会导致违反规则而需要调整树呢？"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"第二步，当新插入的红色节点的父节点也是红色就违反了规则了。同时由于父亲节点是红色，所以爷爷节点一定是黑色。对树的调整还需要考虑其叔叔节点的颜色，黑色的爷爷节点叔叔节点颜色并不确定，所以这里要做个分类讨论。"}]},{type:a,value:c},{type:b,tag:g,props:{},children:[{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"叔叔节点是红色"}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"节点N是新插入的，如果叔叔是红色，那么爷爷节点就肯定是黑色。这种情况需要把父亲和叔叔改为黑色，把爷爷改为红色。解决了两个红色相连的问题。但是爷爷变红色的，如果爷爷的父节点也是红色怎么办，所以这里需要进行递归，把爷爷节点当做是新插入的节点做调整，最后到根节点一定是黑色，所以一定会停下来。\n"},{type:b,tag:i,props:{alt:j,"data-src":"https:\u002F\u002Foracleamd1.dynv6.net\u002Ffile\u002Ffile\u002Fblog\u002Fcode\u002F20180213\u002Fupload.wikimedia.org-wikipedia-commons-c-c8-Red-black_tree_insert_case_3.png.1.png"},children:[]}]},{type:a,value:c},{type:b,tag:u,props:{},children:[{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"图1"}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:g,props:{start:x},children:[{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"叔叔节点是黑色"}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"把P和G进行旋转。\n"},{type:b,tag:i,props:{alt:j,"data-src":"https:\u002F\u002Foracleamd1.dynv6.net\u002Ffile\u002Ffile\u002Fblog\u002Fcode\u002F20180213\u002Fupload.wikimedia.org-wikipedia-commons-6-66-Red-black_tree_insert_case_5.png.1.png"},children:[]}]},{type:a,value:c},{type:b,tag:u,props:{},children:[{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"图2"}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:g,props:{start:3},children:[{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"还有一直情况，上面新插入的是左孩子，如果是右孩子的话，跟父节点旋转转换，就变成是左孩子的情况了。"}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:b,tag:i,props:{alt:j,"data-src":"https:\u002F\u002Foracleamd1.dynv6.net\u002Ffile\u002Ffile\u002Fblog\u002Fcode\u002F20180213\u002Fupload.wikimedia.org-wikipedia-commons-5-56-Red-black_tree_insert_case_4.png.1.png"},children:[]}]},{type:a,value:c},{type:b,tag:u,props:{},children:[{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"图3"}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:o,props:{id:H},children:[{type:b,tag:f,props:{href:"#%E7%BA%A2%E9%BB%91%E6%A0%91%E7%9A%84%E5%88%A0%E9%99%A4",ariaHidden:p,tabIndex:q},children:[{type:b,tag:r,props:{className:[s,t]},children:[]}]},{type:a,value:H}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"如上，第一步，先把数据从树里删除。（基础不牢啊，并没有接触过二叉排序树的怎么删除的，花了好多时间在这里理解，看了好几个博客，最后对比着连蒙带猜得到下面的说法）对于二叉排序树而言，删除某个节点可以转换为删除另一个最多只有一个孩子的节点，这个孩子节点还是叶子节点。这有啥用呢？干嘛的呢？思路这样的：例如图3，要删除G节点的数据，但是我不删除G节点，我找G节点的左子树里值最大的那个值赋值到G节点了，即N节点，即符合二叉排序树的规则，也把G本来的数据给移除了。那么问题就转换为删除N节点了。这样做有什么好处，为什么不直接删除G节点，还要这样换来换去？对于删除任意一个节点，这个节点可能没有孩子，可能有一个孩子，可能有两个孩子，0和1个孩子的情况，直接把null\u002F孩子替换指针就好。但是有两个孩子问题就难办了。但是，换为删除左子树里值最大的那个节点，这个节点最多只有一个孩子的节点，就避开了有两个孩子的问题了。然后，又要根据N的孩子数进行分类讨论了："}]},{type:a,value:c},{type:b,tag:g,props:{},children:[{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"N没有孩子"}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"直接删除N"}]},{type:a,value:c},{type:b,tag:g,props:{start:x},children:[{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"N有一个孩子"}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"很遗憾，这次又不是直接删除N，是把N的孩子的值赋到N里，把N的孩子删掉。至于为什么要这么做，后面会讲到。"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"第二步，删除节点后调整红黑关系。实际上，删除的是节点N或者节点N的孩子，所以节点N可能还存在或者已经是null了，下面为了叙述方便，把null和N节点还存在的情况都叫做节点N。null也没所谓，因为调整过程它只会被别人引用。调整过程需要考虑N的父亲节点，兄弟节点以及兄弟节点的孩子的颜色情况，情况比较复杂，继续分类讨论：先分类父亲节点和兄弟节点的颜色，按排列组合有四种情况，但是由于父亲节点和兄弟节点都是红色是不存在的，所以实际上只有三种。"}]},{type:a,value:c},{type:b,tag:g,props:{},children:[{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"父亲节点是黑色，兄弟节点是黑色"}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"下一步，以兄弟节点孩子SL和SR的颜色进行进一步的分类讨论\n1. SL和SR都是黑色的。把S颜色改为红色。由于P的左子树和右子树都少了一个黑色，所以经过P的相比于其他就少了一个黑色，破坏了红黑树规则，P的情况就像一开始N一样，经过N的都少了一个黑色，所以用递归的方法对P进行同样的处理。\n"},{type:b,tag:i,props:{alt:j,"data-src":"https:\u002F\u002Foracleamd1.dynv6.net\u002Ffile\u002Ffile\u002Fblog\u002Fcode\u002F20180213\u002Fdongxicheng.org-wp-content-uploads-2019-04-red_black_tree_deletion_5.jpg.1.jpg"},children:[]}]},{type:a,value:c},{type:b,tag:"div",props:{className:["nuxt-content-highlight"]},children:[{type:b,tag:"pre",props:{className:["language-text","line-numbers"]},children:[{type:b,tag:"code",props:{},children:[{type:a,value:"2. SL是红色，SR是黑色。把SL与S进行旋转，把这种情况转变成第三种情况\n![](\u002Ffile\u002Fblog\u002Fcode\u002F20180213\u002Fdongxicheng.org-wp-content-uploads-2019-04-red_black_tree_deletion_3.jpg.1.jpg)\n\n3. SL是任意颜色，SR是红色。把P和S进行旋转，再把SR颜色改为黑色即可。\n![](\u002Ffile\u002Fblog\u002Fcode\u002F20180213\u002Fdongxicheng.org-wp-content-uploads-2019-04-red_black_tree_deletion_4.jpg.1.jpg)\n"}]}]}]},{type:a,value:c},{type:b,tag:g,props:{start:x},children:[{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"父亲节点是黑色，兄弟节点是红色"}]},{type:a,value:c},{type:b,tag:g,props:{},children:[{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"SL和SR都是黑色（只有这种可能了，情况比较简单）把P和S进行旋转（我的理解这样即可，但是网上说还要按什么什么情况来继续操作）"}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:b,tag:i,props:{alt:j,"data-src":"https:\u002F\u002Foracleamd1.dynv6.net\u002Ffile\u002Ffile\u002Fblog\u002Fcode\u002F20180213\u002Fdongxicheng.org-wp-content-uploads-2019-04-red_black_tree_deletion_1.jpg.1.jpg"},children:[]}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"父亲节点是红色，兄弟节点是黑色"}]},{type:a,value:c}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"父亲节点是红色，兄弟节点是黑色跟父亲节点是黑色，兄弟节点是黑色相似。"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"红黑树好迷，又复杂，不是很想实现。"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"参考文献"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:b,tag:f,props:{href:"https:\u002F\u002Fzhuanlan.zhihu.com\u002Fp\u002F31805309",rel:[k,l,m],target:n,title:I},children:[{type:a,value:I}]}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:b,tag:f,props:{href:"https:\u002F\u002Fjuejin.im\u002Fentry\u002F58371f13a22b9d006882902d",rel:[k,l,m],target:n,title:J},children:[{type:a,value:J}]}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:b,tag:f,props:{href:"http:\u002F\u002Fdongxicheng.org\u002Fstructure\u002Fred-black-tree\u002F",rel:[k,l,m],target:n,title:K},children:[{type:a,value:K}]}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:b,tag:f,props:{href:"https:\u002F\u002Fzh.wikipedia.org\u002Fwiki\u002F%E7%BA%A2%E9%BB%91%E6%A0%91",rel:[k,l,m],target:n,title:v},children:[{type:a,value:v}]}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:b,tag:f,props:{href:"https:\u002F\u002Fwww.cs.usfca.edu\u002F~galles\u002Fvisualization\u002FRedBlack.html",rel:[k,l,m],target:n,title:L},children:[{type:a,value:L}]}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:b,tag:f,props:{href:"http:\u002F\u002Fsandbox.runjs.cn\u002Fshow\u002F2nngvn8w",rel:[k,l,m],target:n,title:M},children:[{type:a,value:M}]}]}]},excerpt:{type:D,children:[{type:b,tag:d,props:{},children:[{type:a,value:w}]}]},dir:N,path:"\u002F数据结构\u002F20180213\u002F红黑树的原理",extension:".md",title:B,url:"\u002Fblog-code\u002Fview\u002F数据结构\u002F20180213\u002F红黑树的原理\u002F",createAt:new Date(1518480000000),updateAt:new Date(1518480000000),attributes:[{name:"createAt",value:O},{name:"updateAt",value:O},{name:"sort",value:N,url:"\u002Fblog-code\u002Fpage\u002F数据结构\u002F20180213\u002F1\u002F"}]}}],fetch:{},mutations:void 0}}("text","element","\n","p","li","a","ol","wide","img","","nofollow","noopener","noreferrer","_blank","h1","true",-1,"span","icon","icon-link","blockquote","红黑树","这红黑树真是有毒，看了我好几天才大致搞清楚它在干嘛，原理什么的还迷迷糊糊。",2,"无名の窝",10000,"青春猪头-牧之原翔子-江之岛","红黑树的原理","2018-02-13T00:00:00.000Z","root","二叉排序树","红黑树的旋转","红黑树的插入","红黑树的删除","漫画：什么是红黑树？","面试旧敌之红黑树（直白介绍深入理解）","数据结构之红黑树","Red\u002FBlack Tree","在线生成红黑树","\u002F数据结构\u002F20180213","2018-02-13")));