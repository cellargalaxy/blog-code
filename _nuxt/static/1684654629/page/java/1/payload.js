__NUXT_JSONP__("/page/java/1", (function(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,_,$,aa,ab,ac,ad,ae,af,ag,ah,ai,aj,ak,al,am,an,ao,ap,aq,ar,as,at,au,av,aw,ax,ay,az,aA,aB,aC,aD,aE,aF,aG,aH,aI,aJ,aK,aL,aM,aN,aO,aP,aQ,aR,aS,aT,aU,aV,aW,aX,aY,aZ,a_,a$){J.type=f;J.children=[{type:b,tag:r,props:{id:"java内存模型jmm"},children:[{type:b,tag:k,props:{ariaHidden:m,href:"#java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8Bjmm",tabIndex:n},children:[{type:b,tag:o,props:{className:[p,q]},children:[]}]},{type:a,value:"java内存模型(JMM)"}]},{type:a,value:d},{type:b,tag:e,props:{},children:[{type:a,value:"JMM模型下，每个线程都有自己的本地内存，线程对内存的操作也是先操作本地内存。\n之后才将本地内存的数据刷新到主内存里，让各个线程更新共享。"}]}];P.type=f;P.children=[{type:b,tag:e,props:{},children:[{type:a,value:N}]}];Z.type=f;Z.children=[];ac.type=f;ac.children=[];aq.type=f;aq.children=[{type:b,tag:r,props:{id:ar},children:[{type:b,tag:k,props:{ariaHidden:m,href:"#%E8%BF%9B%E7%A8%8B",tabIndex:n},children:[{type:b,tag:o,props:{className:[p,q]},children:[]}]},{type:a,value:ar}]},{type:a,value:d},{type:b,tag:"h2",props:{id:t},children:[{type:b,tag:k,props:{ariaHidden:m,href:"#%E5%AD%A4%E5%84%BF%E8%BF%9B%E7%A8%8B%E4%B8%8E%E5%83%B5%E5%B0%B8%E8%BF%9B%E7%A8%8B",tabIndex:n},children:[{type:b,tag:o,props:{className:[p,q]},children:[]}]},{type:a,value:t}]},{type:a,value:d},{type:b,tag:e,props:{},children:[{type:a,value:"子进程是由父进程创建的，linux能确保子进程结束后，父进程能通过调用wait()或者waitpid()系统调用获取到子进程的信息。\n其实现方式是，当子进程结束后，虽然系统会是否子进程的大部分资源，如打开的文件，内存等，但是还是会保留少量资源，如pid，直到父进程调用获取子进程的信息才会释放。\n因此，如果子进程还没结束，父进程就结束了，那这些子进程则是孤儿进程，会被init进程（pid=1）收养，以调用释放孤儿进程的资源。\n但是如果子进程结束了，但他的父进程既不结束也不调用释放资源，那么这些子进程则是僵尸进程，会一直占用pid，直到系统无pid可用。"}]}];aw.type=f;aw.children=[{type:b,tag:e,props:{},children:[{type:a,value:"之前我理解的通讯比较狭隘，以为要是传输数据。但是看了别人的，发现哪怕是信号的传递，同步，也叫通讯。"}]},{type:a,value:d},{type:b,tag:r,props:{id:ax},children:[{type:b,tag:k,props:{ariaHidden:m,href:"#%E7%BA%BF%E7%A8%8B%E4%B8%8E%E8%BF%9B%E7%A8%8B%E4%B9%8B%E9%97%B4%E7%9A%84%E5%85%B3%E7%B3%BB",tabIndex:n},children:[{type:b,tag:o,props:{className:[p,q]},children:[]}]},{type:a,value:ax}]},{type:a,value:d},{type:b,tag:e,props:{},children:[{type:a,value:"进程是系统进行资源分配和调度的独立单位，有自己独立的地址空间。是一个程序在有个数据集合上面的一次活动。而线程是进程的实体，是cpu调度和分派的基本单位。线程除了最基本的栈，程序计数器意外，不拥有专属资源。但可以与进程下的其他线程共享进程的全部资源。"}]},{type:a,value:d},{type:b,tag:e,props:{},children:[{type:a,value:"线程是进程的不同的执行路径。一个进程奔溃后，在保护模式下不会对其他进程造成影响。而一个线程死掉就等于整个进程死掉。因此，进程的健壮性比线程好，但是切换开销大。对于要同时进行又要共享变量，只能用线程。"}]}];aC.type=f;aC.children=[{type:b,tag:r,props:{id:aD},children:[{type:b,tag:k,props:{ariaHidden:m,href:"#%E6%B3%A8%E8%A7%A3%E6%98%AF%E4%BB%80%E4%B9%88",tabIndex:n},children:[{type:b,tag:o,props:{className:[p,q]},children:[]}]},{type:a,value:aD}]},{type:a,value:d},{type:b,tag:e,props:{},children:[{type:a,value:"注解用的多了，但是其实注解是什么。打个比喻，注解就是一张标签纸，上面写着若干信息，用来标记解释被贴上这张标签纸的事物.而其事物的性质并没有发生改变，无论这张标签纸上的解释是否正确。因此，使用注解是非入侵代码的。"}]},{type:a,value:d},{type:b,tag:r,props:{id:aE},children:[{type:b,tag:k,props:{ariaHidden:m,href:"#%E5%85%83%E6%B3%A8%E8%A7%A3",tabIndex:n},children:[{type:b,tag:o,props:{className:[p,q]},children:[]}]},{type:a,value:aE}]},{type:a,value:d},{type:b,tag:e,props:{},children:[{type:a,value:"元注解也是注解，不过是特殊的，用来标注其他注解的注解，就像Object是全部类的父类一样。比喻的说，就是标签纸A上可以贴标签纸B，标签纸B可以贴标签纸C……，最后的标签纸N就是元注解。元注解有五个：@Retention、@Target、@Inherited、@Documented、@Repeatable。"}]}];aJ.type=f;aJ.children=[{type:b,tag:r,props:{id:"java面向对象"},children:[{type:b,tag:k,props:{ariaHidden:m,href:"#java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1",tabIndex:n},children:[{type:b,tag:o,props:{className:[p,q]},children:[]}]},{type:a,value:"Java面向对象"}]},{type:a,value:d},{type:b,tag:e,props:{},children:[{type:a,value:"Java面向对象有三大特点：封装，继承，多态。"}]},{type:a,value:d},{type:b,tag:"ul",props:{},children:[{type:a,value:d},{type:b,tag:v,props:{},children:[{type:a,value:"封装是把数据和操作隐藏到对象里面，无法看到对象是什么实现的，对象只向外界暴露最简单的接口。封装通过private，default，protected和public来控制封装和访问。"}]},{type:a,value:d},{type:b,tag:v,props:{},children:[{type:a,value:"继承是子类复用父类的代码。使得子类具有父类的全部行为和特性，但也能修改父类的行为和特性或者拓展自己新的行为和特性。java的类是单继承，接口是多继承。"}]},{type:a,value:d},{type:b,tag:v,props:{},children:[{type:a,value:"多态使得不同的子类对同一个请求可是有不同的响应，并且调用者不需要知道其实现是哪个子类的版本。多态分为编译时多态（重载）和运行时多态（重写）。"}]},{type:a,value:d}]}];aO.type=f;aO.children=[{type:b,tag:e,props:{},children:[{type:a,value:"JDBC是通过"},{type:b,tag:s,props:{},children:[{type:a,value:"Class.forName(String)"}]},{type:a,value:"反射加载所需的驱动类。然后就可以通过jdk自带的"},{type:b,tag:s,props:{},children:[{type:a,value:"DriverManager"}]},{type:a,value:"的静态方法获取一个数据库连接："},{type:b,tag:s,props:{},children:[{type:a,value:"Connection"}]},{type:a,value:"。通过这个Connection我们就可以对数据库进行增删查改了。要对数据库进行增删查改还是离不开sql。需要使用sql，调用Connection的方法创建一个"},{type:b,tag:s,props:{},children:[{type:a,value:"Statement"}]},{type:a,value:"或者"},{type:b,tag:s,props:{},children:[{type:a,value:"PreparedStatement"}]},{type:a,value:"对象。创建Statement就利用一句完整的sql就好了，但是不防止注入。而PreparedStatement的sql在参数上用问号代替，作为占位符。之后再填充这些占位符，其占位符是用下标指定，下标从1开始，是防止注入的。创建好PreparedStatement执行。在这里可以设置事务。如果是select，执行后返回一个"},{type:b,tag:s,props:{},children:[{type:a,value:"ResultSet"}]},{type:a,value:"对象作为返回结果。可以通过这个结果获取列名，元组的数据等。如果是insert，delete或者update，会返回一个int，表示受此命令影响的行数。"}]}];aT.type=f;aT.children=[{type:b,tag:e,props:{},children:[{type:a,value:"简单明了入门Netty，还是看官方文档来的好："},{type:b,tag:k,props:{href:"https:\u002F\u002Fnetty.io\u002Fwiki\u002Fuser-guide-for-4.x.html",rel:[aU,aV,aW],target:aX,title:aY},children:[{type:a,value:aY}]},{type:a,value:"。接下来是我看我这篇文档之后的加工，想看的深一点可以看"},{type:b,tag:k,props:{href:"https:\u002F\u002Fsylvanassun.github.io\u002F2017\u002F11\u002F30\u002F2017-11-30-netty_introduction\u002F",rel:[aU,aV,aW],target:aX,title:aZ},children:[{type:a,value:aZ}]},{type:a,value:"。最好是有些NIO的概念和基础。依照官方文档进行改进，下面代码是要实现一个时间服务器。功能为客户端连接到服务端时，服务端主动发送一个long时间戳给客户端，客户端收到这个时间后打印出来。并且客户端向服务端发送自己的long时间戳后关闭连接，服务器打印收到客户端的时间后也关闭连接。"}]}];return {data:[{siteConfig:{siteName:"无名の窝",siteHost:"https:\u002F\u002Fcellargalaxy.github.io",basePath:"\u002Fblog-code\u002F",navs:[{text:"文章",url:w},{text:"归档",url:"\u002Fblog-code\u002Farchive\u002F0\u002F"},{text:"画画",url:"\u002Fblog-code\u002Fhtml\u002Fhua.html"},{text:"开源",url:"\u002Fblog-code\u002Fhttps:\u002Fgithub.com\u002Fcellargalaxy\u002Fblog-vue"}],pageSize:x,urlReplace:{"^/file/blog/code":"https:\u002F\u002Foracleamd1.dynv6.net\u002Ffile\u002Ffile\u002Fblog\u002Fcode"},backgroundImage:{duration:y,fade:1000,images:[{url:"https:\u002F\u002Fi.loli.net\u002F2020\u002F01\u002F25\u002FcofTzDQXitjeVZ6.jpg",description:z,type:l},{url:"https:\u002F\u002Fi.loli.net\u002F2020\u002F01\u002F25\u002FsfaRJ2lVeM3NDbE.jpg",description:z,type:l},{url:"https:\u002F\u002Fi.loli.net\u002F2020\u002F01\u002F26\u002FKybiTdftam5Su7x.jpg",description:"青春猪头-双葉理央",type:l},{url:"https:\u002F\u002Fi.loli.net\u002F2020\u002F09\u002F08\u002FxdX73nfs24qgOYk.jpg",description:"京吹-明日香,久美子",type:l},{url:"https:\u002F\u002Fi.loli.net\u002F2020\u002F02\u002F14\u002FMAiruNcEFW2HYtg.jpg",description:"终将成为你-七海灯子,小糸侑",type:l},{url:"https:\u002F\u002Fi.loli.net\u002F2020\u002F02\u002F05\u002FEojdAxTDJsFpbPw.jpg",description:"玉子市场-北白川玉子",type:l},{url:"https:\u002F\u002Fi.loli.net\u002F2020\u002F01\u002F31\u002FAXxwJDRS9fmN2uU.jpg",description:"fate_hf-弓道馆",type:l},{url:"https:\u002F\u002Fi.loli.net\u002F2020\u002F02\u002F01\u002FaHhVObpJus6dnM4.jpg",description:"fate_hf-樱花树",type:l}]}},homeConfig:{brandInterval:y,brands:[{imageUrl:"https:\u002F\u002Fi.loli.net\u002F2020\u002F01\u002F21\u002FmMEAnwY5XPC2pFb.jpg",title:"日常",texts:["我们所度过的每个平凡的日常，也许就是连续不断发生的奇迹。","日々、私たちが過ごしている日常は、実は奇跡の連続なのかもしれない。"]},{imageUrl:"https:\u002F\u002Fi.loli.net\u002F2020\u002F04\u002F19\u002FH1MmXb9xPcYEhT2.jpg",title:"昨日之歌",texts:["时间梭梭箭如飞，人道漫漫步蹒跚","人間そんな変わるもんじゃないのに、月日ばっかどんどん過ぎて"]}],navs:[{text:"Github",url:"https:\u002F\u002Fgithub.com\u002Fcellargalaxy\u002F"}]},pageFootConfig:{lines:[[{text:"Copyright © 2017-? ."},{text:"备案？不存在的"},{text:"Powered by Nuxt.js & Github"}]]},buildTime:new Date(1684654707827),rootPath:w,crumbs:[{text:"java",url:"\u002Fblog-code\u002Fpage\u002Fjava\u002F1\u002F"}],pageSize:x,total:18,currentPage:1,files:[{slug:A,description:"java内存模型(JMM)\nJMM模型下，每个线程都有自己的本地内存，线程对内存的操作也是先操作本地内存。\n之后才将本地内存的数据刷新到主内存里，让各个线程更新共享。",createdAt:B,updatedAt:B,toc:[{id:C,depth:c,text:C},{id:D,depth:c,text:D},{id:E,depth:c,text:E},{id:F,depth:c,text:F},{id:G,depth:c,text:G},{id:H,depth:c,text:H},{id:I,depth:c,text:I}],body:J,excerpt:J,dir:K,path:"\u002Fjava\u002F20200617\u002FJava并发",extension:g,title:A,url:"\u002Fblog-code\u002Fview\u002Fjava\u002F20200617\u002FJava并发\u002F",createAt:new Date(1592352000000),updateAt:new Date(1592352000000),attributes:[{name:h,value:L},{name:i,value:L},{name:j,value:K,url:"\u002Fblog-code\u002Fpage\u002Fjava\u002F20200617\u002F1\u002F"}]},{slug:M,description:N,createdAt:O,updatedAt:O,toc:[],body:P,excerpt:P,dir:Q,path:"\u002Fjava\u002F20200518\u002FJava引用类型",extension:g,title:M,url:"\u002Fblog-code\u002Fview\u002Fjava\u002F20200518\u002FJava引用类型\u002F",createAt:new Date(1589760000000),updateAt:new Date(1589760000000),attributes:[{name:h,value:R},{name:i,value:R},{name:j,value:Q,url:"\u002Fblog-code\u002Fpage\u002Fjava\u002F20200518\u002F1\u002F"}]},{slug:S,description:T,createdAt:U,updatedAt:U,toc:[{id:V,depth:c,text:V},{id:W,depth:c,text:W},{id:X,depth:c,text:X},{id:Y,depth:c,text:Y},{id:"serial与serial-old",depth:c,text:"Serial与Serial Old"},{id:"parnew",depth:c,text:"ParNew"},{id:"parallel-scavenge与parallel-old",depth:c,text:"Parallel Scavenge与Parallel Old"},{id:"cms收集器",depth:c,text:"CMS收集器"},{id:"g1收集器",depth:c,text:"G1收集器"},{id:"g1内存划分",depth:u,text:"G1内存划分"},{id:"remembered-set",depth:u,text:"Remembered Set"},{id:"g1回收步骤",depth:u,text:"G1回收步骤"}],body:Z,excerpt:Z,dir:_,path:"\u002Fjava\u002F20200515\u002F垃圾收集算法与垃圾收集器",extension:g,title:S,url:"\u002Fblog-code\u002Fview\u002Fjava\u002F20200515\u002F垃圾收集算法与垃圾收集器\u002F",createAt:new Date(1589500800000),updateAt:new Date(1589500800000),attributes:[{name:h,value:$},{name:i,value:$},{name:j,value:_,url:"\u002Fblog-code\u002Fpage\u002Fjava\u002F20200515\u002F1\u002F"}]},{slug:aa,description:T,createdAt:ab,updatedAt:ab,toc:[{id:"timer的使用",depth:c,text:"Timer的使用"},{id:"timer的源码",depth:c,text:"Timer的源码"},{id:"taskqueue",depth:c,text:"TaskQueue"},{id:"timerthread的源码",depth:c,text:"TimerThread的源码"},{id:"scheduledexecutorservice的使用",depth:c,text:"ScheduledExecutorService的使用"},{id:"scheduledexecutorservice的源码",depth:c,text:"ScheduledExecutorService的源码"}],body:ac,excerpt:ac,dir:ad,path:"\u002Fjava\u002F20181215\u002FJava定时任务",extension:g,title:aa,url:"\u002Fblog-code\u002Fview\u002Fjava\u002F20181215\u002FJava定时任务\u002F",createAt:new Date(1544832000000),updateAt:new Date(1544832000000),attributes:[{name:h,value:ae},{name:i,value:ae},{name:j,value:ad,url:"\u002Fblog-code\u002Fpage\u002Fjava\u002F20181215\u002F1\u002F"}]},{slug:af,description:"进程\n孤儿进程与僵尸进程\n子进程是由父进程创建的，linux能确保子进程结束后，父进程能通过调用wait()或者waitpid()系统调用获取到子进程的信息。\n其实现方式是，当子进程结束后，虽然系统会是否子进程的大部分资源，如打开的文件，内存等，但是还是会保留少量资源，如pid，直到父进程调用获取子进程的信息才会释放。\n因此，如果子进程还没结束，父进程就结束了，那这些子进程则是孤儿进程，会被init进程（pid=1）收养，以调用释放孤儿进程的资源。\n但是如果子进程结束了，但他的父进程既不结束也不调用释放资源，那么这些子进程则是僵尸进程，会一直占用pid，直到系统无pid可用。",createdAt:ag,updatedAt:ag,toc:[{id:t,depth:c,text:t},{id:"什么是线程安全如何实现线程安全",depth:c,text:"什么是线程安全，如何实现线程安全"},{id:ah,depth:c,text:ah},{id:ai,depth:c,text:ai},{id:aj,depth:c,text:aj},{id:ak,depth:c,text:ak},{id:al,depth:c,text:al},{id:am,depth:c,text:am},{id:an,depth:c,text:an},{id:ao,depth:c,text:ao},{id:ap,depth:c,text:ap}],body:aq,excerpt:aq,dir:as,path:"\u002Fjava\u002F20181209\u002FJava多线程",extension:g,title:af,url:"\u002Fblog-code\u002Fview\u002Fjava\u002F20181209\u002FJava多线程\u002F",createAt:new Date(1544313600000),updateAt:new Date(1544313600000),attributes:[{name:h,value:at},{name:i,value:at},{name:j,value:as,url:"\u002Fblog-code\u002Fpage\u002Fjava\u002F20181209\u002F1\u002F"}]},{slug:au,description:"之前我理解的通讯比较狭隘，以为要是传输数据。但是看了别人的，发现哪怕是信号的传递，同步，也叫通讯。\n线程与进程之间的关系\n进程是系统进行资源分配和调度的独立单位，有自己独立的地址空间。是一个程序在有个数据集合上面的一次活动。而线程是进程的实体，是cpu调度和分派的基本单位。线程除了最基本的栈，程序计数器意外，不拥有专属资源。但可以与进程下的其他线程共享进程的全部资源。\n线程是进程的不同的执行路径。一个进程奔溃后，在保护模式下不会对其他进程造成影响。而一个线程死掉就等于整个进程死掉。因此，进程的健壮性比线程好，但是切换开销大。对于要同时进行又要共享变量，只能用线程。",createdAt:av,updatedAt:av,toc:[],body:aw,excerpt:aw,dir:ay,path:"\u002Fjava\u002F20180518\u002Fjava线程与进程通讯",extension:g,title:au,url:"\u002Fblog-code\u002Fview\u002Fjava\u002F20180518\u002Fjava线程与进程通讯\u002F",createAt:new Date(1526601600000),updateAt:new Date(1526601600000),attributes:[{name:h,value:az},{name:i,value:az},{name:j,value:ay,url:"\u002Fblog-code\u002Fpage\u002Fjava\u002F20180518\u002F1\u002F"}]},{slug:aA,description:"注解是什么\n注解用的多了，但是其实注解是什么。打个比喻，注解就是一张标签纸，上面写着若干信息，用来标记解释被贴上这张标签纸的事物.而其事物的性质并没有发生改变，无论这张标签纸上的解释是否正确。因此，使用注解是非入侵代码的。\n元注解\n元注解也是注解，不过是特殊的，用来标注其他注解的注解，就像Object是全部类的父类一样。比喻的说，就是标签纸A上可以贴标签纸B，标签纸B可以贴标签纸C……，最后的标签纸N就是元注解。元注解有五个：@Retention、@Target、@Inherited、@Documented、@Repeatable。",createdAt:aB,updatedAt:aB,toc:[],body:aC,excerpt:aC,dir:aF,path:"\u002Fjava\u002F20180516\u002Fjava注解",extension:g,title:aA,url:"\u002Fblog-code\u002Fview\u002Fjava\u002F20180516\u002Fjava注解\u002F",createAt:new Date(1526428800000),updateAt:new Date(1526428800000),attributes:[{name:h,value:aG},{name:i,value:aG},{name:j,value:aF,url:"\u002Fblog-code\u002Fpage\u002Fjava\u002F20180516\u002F1\u002F"}]},{slug:aH,description:"Java面向对象\nJava面向对象有三大特点：封装，继承，多态。\n\n封装是把数据和操作隐藏到对象里面，无法看到对象是什么实现的，对象只向外界暴露最简单的接口。封装通过private，default，protected和public来控制封装和访问。\n继承是子类复用父类的代码。使得子类具有父类的全部行为和特性，但也能修改父类的行为和特性或者拓展自己新的行为和特性。java的类是单继承，接口是多继承。\n多态使得不同的子类对同一个请求可是有不同的响应，并且调用者不需要知道其实现是哪个子类的版本。多态分为编译时多态（重载）和运行时多态（重写）。\n",createdAt:aI,updatedAt:aI,toc:[],body:aJ,excerpt:aJ,dir:aK,path:"\u002Fjava\u002F20180514\u002FExec的源码乱看与杂七杂八",extension:g,title:aH,url:"\u002Fblog-code\u002Fview\u002Fjava\u002F20180514\u002FExec的源码乱看与杂七杂八\u002F",createAt:new Date(1526256000000),updateAt:new Date(1526256000000),attributes:[{name:h,value:aL},{name:i,value:aL},{name:j,value:aK,url:"\u002Fblog-code\u002Fpage\u002Fjava\u002F20180514\u002F1\u002F"}]},{slug:aM,description:"JDBC是通过Class.forName(String)反射加载所需的驱动类。然后就可以通过jdk自带的DriverManager的静态方法获取一个数据库连接：Connection。通过这个Connection我们就可以对数据库进行增删查改了。要对数据库进行增删查改还是离不开sql。需要使用sql，调用Connection的方法创建一个Statement或者PreparedStatement对象。创建Statement就利用一句完整的sql就好了，但是不防止注入。而PreparedStatement的sql在参数上用问号代替，作为占位符。之后再填充这些占位符，其占位符是用下标指定，下标从1开始，是防止注入的。创建好PreparedStatement执行。在这里可以设置事务。如果是select，执行后返回一个ResultSet对象作为返回结果。可以通过这个结果获取列名，元组的数据等。如果是insert，delete或者update，会返回一个int，表示受此命令影响的行数。",createdAt:aN,updatedAt:aN,toc:[],body:aO,excerpt:aO,dir:aP,path:"\u002Fjava\u002F20180510\u002FJDBC复习",extension:g,title:aM,url:"\u002Fblog-code\u002Fview\u002Fjava\u002F20180510\u002FJDBC复习\u002F",createAt:new Date(1525910400000),updateAt:new Date(1525910400000),attributes:[{name:h,value:aQ},{name:i,value:aQ},{name:j,value:aP,url:"\u002Fblog-code\u002Fpage\u002Fjava\u002F20180510\u002F1\u002F"}]},{slug:aR,description:"简单明了入门Netty，还是看官方文档来的好：Netty.docs: User guide for 4.x。接下来是我看我这篇文档之后的加工，想看的深一点可以看Netty的那点事儿。最好是有些NIO的概念和基础。依照官方文档进行改进，下面代码是要实现一个时间服务器。功能为客户端连接到服务端时，服务端主动发送一个long时间戳给客户端，客户端收到这个时间后打印出来。并且客户端向服务端发送自己的long时间戳后关闭连接，服务器打印收到客户端的时间后也关闭连接。",createdAt:aS,updatedAt:aS,toc:[],body:aT,excerpt:aT,dir:a_,path:"\u002Fjava\u002F20180509\u002FNetty学习",extension:g,title:aR,url:"\u002Fblog-code\u002Fview\u002Fjava\u002F20180509\u002FNetty学习\u002F",createAt:new Date(1525824000000),updateAt:new Date(1525824000000),attributes:[{name:h,value:a$},{name:i,value:a$},{name:j,value:a_,url:"\u002Fblog-code\u002Fpage\u002Fjava\u002F20180509\u002F1\u002F"}]}]}],fetch:{},mutations:void 0}}("text","element",2,"\n","p","root",".md","createAt","updateAt","sort","a","wide","true",-1,"span","icon","icon-link","h1","code","孤儿进程与僵尸进程",3,"li","\u002Fblog-code\u002Fpage\u002F1\u002F",10,10000,"青春猪头-牧之原翔子-江之岛","Java并发","2020-06-17T00:00:00.000Z","偏向锁","获取轻量级锁","释放轻量级锁","重量级锁","锁消除","锁优化","锁升级与锁降级",{},"\u002Fjava\u002F20200617","2020-06-17","Java引用类型","java除了基本类型以外，其余的都是引用类型。\n而java的引用类型有四种：强引用，软引用，弱引用和虚引用。\n除了强引用外，其余的引用都是抽象类Reference的子类。","2020-05-18T00:00:00.000Z",{},"\u002Fjava\u002F20200518","2020-05-18","垃圾收集算法与垃圾收集器","","2020-05-15T00:00:00.000Z","标记-清除算法","标记-整理算法","复制算法","概念",{},"\u002Fjava\u002F20200515","2020-05-15","Java定时任务","2018-12-15T00:00:00.000Z",{},"\u002Fjava\u002F20181215","2018-12-15","Java多线程","2018-12-09T00:00:00.000Z","线程的生命周期","创建线程的方式","如何关闭线程","死锁","线程池作用","线程池核心参数","创建线程池的方式","配置线程池","其他方法",{},"进程","\u002Fjava\u002F20181209","2018-12-09","java线程与进程通讯","2018-05-18T00:00:00.000Z",{},"线程与进程之间的关系","\u002Fjava\u002F20180518","2018-05-18","java注解","2018-05-16T00:00:00.000Z",{},"注解是什么","元注解","\u002Fjava\u002F20180516","2018-05-16","Exec的源码乱看与杂七杂八","2018-05-14T00:00:00.000Z",{},"\u002Fjava\u002F20180514","2018-05-14","JDBC复习","2018-05-10T00:00:00.000Z",{},"\u002Fjava\u002F20180510","2018-05-10","Netty学习","2018-05-09T00:00:00.000Z",{},"nofollow","noopener","noreferrer","_blank","Netty.docs: User guide for 4.x","Netty的那点事儿","\u002Fjava\u002F20180509","2018-05-09")));