__NUXT_JSONP__("/page/7", (function(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,_,$,aa,ab,ac,ad,ae,af,ag,ah,ai,aj,ak,al,am,an,ao,ap,aq,ar,as,at,au,av,aw,ax){x.type=d;x.children=[{type:c,tag:k,props:{},children:[{type:a,value:"编辑距离可以用来判断两个字符串的相似性。量测方式是把一个字符串转变为另外一个字符串所需的操作次数。操作类型只有三种：增加，删除和替换。这样子，字符串的相似性则可以用"},{type:c,tag:j,props:{},children:[{type:a,value:"1-编辑距离\u002FMAX(字符串1长度,字符串2长度)"}]},{type:a,value:"来度量。"}]}];C.type=d;C.children=[];H.type=d;H.children=[{type:c,tag:k,props:{},children:[{type:a,value:G}]}];K.type=d;K.children=[];O.type=d;O.children=[];ab.type=d;ab.children=[];ag.type=d;ag.children=[];al.type=d;al.children=[];aq.type=d;aq.children=[{type:c,tag:k,props:{},children:[{type:a,value:"之前一直只会使用"},{type:c,tag:j,props:{},children:[{type:a,value:"@RunWith(SpringRunner.class)"}]},{type:a,value:"和"},{type:c,tag:j,props:{},children:[{type:a,value:"@SpringBootTest"}]},{type:a,value:"注解来加载整个项目来注入依赖，就只会用个"},{type:c,tag:j,props:{},children:[{type:a,value:"assertEquals"}]},{type:a,value:"方法来进行测试（虽然现在也是）。但问题还是有的，且不论加载整个项目，把无关的依赖都加载进行，浪费时间。如果我要测试添加用户的接口，第一，一测试就把数据写进数据库了呀，即便是测试数据库，不要紧，那我测试第二遍，由于账户名相同，就写不进去数据库了，不能接受地报了错，其实啥问题都没有，如果要再测试就得改账户名，动了代码。也就是说这样的测试代码是连调用两次都不行的垃圾，这样子不是很奇怪吗。"}]},{type:a,value:q},{type:c,tag:k,props:{},children:[{type:a,value:"而Mockito能解决这些问题。先说说情景，我要对"},{type:c,tag:j,props:{},children:[{type:a,value:"UserService"}]},{type:a,value:"类测试添加账号和获取账号的方法，UserService调用了"},{type:c,tag:j,props:{},children:[{type:a,value:"UserDao"}]},{type:a,value:"的方法，为了避免我调用UserService的时候调用到真的，连接到数据库的UserDao，我需要给UserService替换一个UserDao的实现，而这个新的UserDao的实现的方法的返回我希望我能简单直观的控制，这样就叫做对UserService类mock了UserDao。"}]},{type:a,value:q},{type:c,tag:k,props:{},children:[{type:a,value:"在spring boot里使用很简单，下面是个简单例子，"},{type:c,tag:j,props:{},children:[{type:a,value:"UserPo"}]},{type:a,value:"类就是个普通的bean，放着账号密码，就不贴代码了。"}]}];av.type=d;av.children=[{type:c,tag:k,props:{},children:[{type:a,value:"让spring boot支持CORS非常简单，不用做任何配置，只需要在controller里使用"},{type:c,tag:j,props:{},children:[{type:a,value:"@CrossOrigin"}]},{type:a,value:"注解即可。"}]},{type:a,value:q},{type:c,tag:k,props:{},children:[{type:a,value:"@CrossOrigin注解可以使用在类或者方法上，其参数主要有origins和maxAge，用来指定允许跨域的域默认是*，和OPTIONS响应的有效时间，默认是1800。当类和方法都使用@CrossOrigin注解时，会自动合并两个注解的参数。"}]}];return {data:[{siteConfig:{siteName:"无名の窝",siteHost:"https:\u002F\u002Fcellargalaxy.github.io",basePath:"\u002Fblog-code\u002F",navs:[{text:"文章",url:r},{text:"归档",url:"\u002Fblog-code\u002Farchive\u002F0\u002F"},{text:"画画",url:"\u002Fblog-code\u002Fhtml\u002Fhua.html"},{text:"开源",url:"\u002Fblog-code\u002Fhttps:\u002Fgithub.com\u002Fcellargalaxy\u002Fblog-vue"}],pageSize:s,urlReplace:{"^/file/blog/code":"https:\u002F\u002Foracleamd1.dynv6.net\u002Ffile\u002Ffile\u002Fblog\u002Fcode"},backgroundImage:{duration:t,fade:1000,images:[{url:"https:\u002F\u002Fi.loli.net\u002F2020\u002F01\u002F25\u002FcofTzDQXitjeVZ6.jpg",description:u,type:i},{url:"https:\u002F\u002Fi.loli.net\u002F2020\u002F01\u002F25\u002FsfaRJ2lVeM3NDbE.jpg",description:u,type:i},{url:"https:\u002F\u002Fi.loli.net\u002F2020\u002F01\u002F26\u002FKybiTdftam5Su7x.jpg",description:"青春猪头-双葉理央",type:i},{url:"https:\u002F\u002Fi.loli.net\u002F2020\u002F09\u002F08\u002FxdX73nfs24qgOYk.jpg",description:"京吹-明日香,久美子",type:i},{url:"https:\u002F\u002Fi.loli.net\u002F2020\u002F02\u002F14\u002FMAiruNcEFW2HYtg.jpg",description:"终将成为你-七海灯子,小糸侑",type:i},{url:"https:\u002F\u002Fi.loli.net\u002F2020\u002F02\u002F05\u002FEojdAxTDJsFpbPw.jpg",description:"玉子市场-北白川玉子",type:i},{url:"https:\u002F\u002Fi.loli.net\u002F2020\u002F01\u002F31\u002FAXxwJDRS9fmN2uU.jpg",description:"fate_hf-弓道馆",type:i},{url:"https:\u002F\u002Fi.loli.net\u002F2020\u002F02\u002F01\u002FaHhVObpJus6dnM4.jpg",description:"fate_hf-樱花树",type:i}]}},homeConfig:{brandInterval:t,brands:[{imageUrl:"https:\u002F\u002Fi.loli.net\u002F2020\u002F01\u002F21\u002FmMEAnwY5XPC2pFb.jpg",title:"日常",texts:["我们所度过的每个平凡的日常，也许就是连续不断发生的奇迹。","日々、私たちが過ごしている日常は、実は奇跡の連続なのかもしれない。"]},{imageUrl:"https:\u002F\u002Fi.loli.net\u002F2020\u002F04\u002F19\u002FH1MmXb9xPcYEhT2.jpg",title:"昨日之歌",texts:["时间梭梭箭如飞，人道漫漫步蹒跚","人間そんな変わるもんじゃないのに、月日ばっかどんどん過ぎて"]}],navs:[{text:"Github",url:"https:\u002F\u002Fgithub.com\u002Fcellargalaxy\u002F"}]},pageFootConfig:{lines:[[{text:"Copyright © 2017-? ."},{text:"备案？不存在的"},{text:"Powered by Nuxt.js & Github"}]]},buildTime:new Date(1676821011452),rootPath:r,crumbs:[],pageSize:s,total:118,currentPage:7,files:[{slug:v,description:"编辑距离可以用来判断两个字符串的相似性。量测方式是把一个字符串转变为另外一个字符串所需的操作次数。操作类型只有三种：增加，删除和替换。这样子，字符串的相似性则可以用1-编辑距离\u002FMAX(字符串1长度,字符串2长度)来度量。",createdAt:w,updatedAt:w,toc:[],body:x,excerpt:x,dir:y,path:"\u002F算法\u002F20181114\u002F编辑距离",extension:e,title:v,url:"\u002Fblog-code\u002Fview\u002F算法\u002F20181114\u002F编辑距离\u002F",createAt:new Date(1542153600000),updateAt:new Date(1542153600000),attributes:[{name:f,value:z},{name:g,value:z},{name:h,value:y,url:"\u002Fblog-code\u002Fpage\u002F算法\u002F20181114\u002F1\u002F"}]},{slug:A,description:l,createdAt:B,updatedAt:B,toc:[],body:C,excerpt:C,dir:D,path:"\u002F算法\u002F20181108\u002Fword2vec学习小记",extension:e,title:A,url:"\u002Fblog-code\u002Fview\u002F算法\u002F20181108\u002Fword2vec学习小记\u002F",createAt:new Date(1541635200000),updateAt:new Date(1541635200000),attributes:[{name:f,value:E},{name:g,value:E},{name:h,value:D,url:"\u002Fblog-code\u002Fpage\u002F算法\u002F20181108\u002F1\u002F"}]},{slug:F,description:G,createdAt:m,updatedAt:m,toc:[],body:H,excerpt:H,dir:p,path:"\u002F框架\u002F20181024\u002FQuartz集群原理及源码分析",extension:e,title:F,url:"\u002Fblog-code\u002Fview\u002F框架\u002F20181024\u002FQuartz集群原理及源码分析\u002F",createAt:new Date(1540339200000),updateAt:new Date(1540339200000),attributes:[{name:f,value:n},{name:g,value:n},{name:h,value:p,url:I}]},{slug:J,description:l,createdAt:m,updatedAt:m,toc:[{id:"job与jobdetail",depth:b,text:"Job与JobDetail"},{id:"trigger",depth:b,text:"Trigger"},{id:"scheduler",depth:b,text:"Scheduler"}],body:K,excerpt:K,dir:p,path:"\u002F框架\u002F20181024\u002FQuartz框架的使用",extension:e,title:J,url:"\u002Fblog-code\u002Fview\u002F框架\u002F20181024\u002FQuartz框架的使用\u002F",createAt:new Date(1540339200000),updateAt:new Date(1540339200000),attributes:[{name:f,value:n},{name:g,value:n},{name:h,value:p,url:I}]},{slug:L,description:l,createdAt:m,updatedAt:m,toc:[{id:M,depth:b,text:M},{id:N,depth:b,text:N}],body:O,excerpt:O,dir:P,path:"\u002F中间件\u002F20181024\u002FMysql的锁与引擎",extension:e,title:L,url:"\u002Fblog-code\u002Fview\u002F中间件\u002F20181024\u002FMysql的锁与引擎\u002F",createAt:new Date(1540339200000),updateAt:new Date(1540339200000),attributes:[{name:f,value:n},{name:g,value:n},{name:h,value:P,url:"\u002Fblog-code\u002Fpage\u002F中间件\u002F20181024\u002F1\u002F"}]},{slug:Q,description:l,createdAt:R,updatedAt:R,toc:[{id:S,depth:b,text:S},{id:T,depth:b,text:T},{id:U,depth:b,text:U},{id:V,depth:b,text:V},{id:W,depth:b,text:W},{id:X,depth:b,text:X},{id:Y,depth:b,text:Y},{id:"arp",depth:b,text:"ARP"},{id:"icmp",depth:b,text:"ICMP"},{id:"udp",depth:b,text:"UDP"},{id:"tcp",depth:b,text:"TCP"},{id:Z,depth:o,text:Z},{id:"连续arq协议滑动窗口协议",depth:o,text:"连续ARQ协议\u002F滑动窗口协议"},{id:_,depth:o,text:_},{id:$,depth:o,text:$},{id:aa,depth:o,text:aa},{id:"tcp的三次握手和四次分手",depth:o,text:"TCP的三次握手和四次分手"}],body:ab,excerpt:ab,dir:ac,path:"\u002F协议\u002F20180916\u002F计算机网络复习笔记",extension:e,title:Q,url:"\u002Fblog-code\u002Fview\u002F协议\u002F20180916\u002F计算机网络复习笔记\u002F",createAt:new Date(1537056000000),updateAt:new Date(1537056000000),attributes:[{name:f,value:ad},{name:g,value:ad},{name:h,value:ac,url:"\u002Fblog-code\u002Fpage\u002F协议\u002F20180916\u002F1\u002F"}]},{slug:ae,description:l,createdAt:af,updatedAt:af,toc:[],body:ag,excerpt:ag,dir:ah,path:"\u002F框架\u002F20180831\u002Fjwt总结与jjwt的使用",extension:e,title:ae,url:"\u002Fblog-code\u002Fview\u002F框架\u002F20180831\u002Fjwt总结与jjwt的使用\u002F",createAt:new Date(1535673600000),updateAt:new Date(1535673600000),attributes:[{name:f,value:ai},{name:g,value:ai},{name:h,value:ah,url:"\u002Fblog-code\u002Fpage\u002F框架\u002F20180831\u002F1\u002F"}]},{slug:aj,description:l,createdAt:ak,updatedAt:ak,toc:[],body:al,excerpt:al,dir:am,path:"\u002F其他\u002F20180820\u002F做题笔记",extension:e,title:aj,url:"\u002Fblog-code\u002Fview\u002F其他\u002F20180820\u002F做题笔记\u002F",createAt:new Date(1534723200000),updateAt:new Date(1534723200000),attributes:[{name:f,value:an},{name:g,value:an},{name:h,value:am,url:"\u002Fblog-code\u002Fpage\u002F其他\u002F20180820\u002F1\u002F"}]},{slug:ao,description:"之前一直只会使用@RunWith(SpringRunner.class)和@SpringBootTest注解来加载整个项目来注入依赖，就只会用个assertEquals方法来进行测试（虽然现在也是）。但问题还是有的，且不论加载整个项目，把无关的依赖都加载进行，浪费时间。如果我要测试添加用户的接口，第一，一测试就把数据写进数据库了呀，即便是测试数据库，不要紧，那我测试第二遍，由于账户名相同，就写不进去数据库了，不能接受地报了错，其实啥问题都没有，如果要再测试就得改账户名，动了代码。也就是说这样的测试代码是连调用两次都不行的垃圾，这样子不是很奇怪吗。\n而Mockito能解决这些问题。先说说情景，我要对UserService类测试添加账号和获取账号的方法，UserService调用了UserDao的方法，为了避免我调用UserService的时候调用到真的，连接到数据库的UserDao，我需要给UserService替换一个UserDao的实现，而这个新的UserDao的实现的方法的返回我希望我能简单直观的控制，这样就叫做对UserService类mock了UserDao。\n在spring boot里使用很简单，下面是个简单例子，UserPo类就是个普通的bean，放着账号密码，就不贴代码了。",createdAt:ap,updatedAt:ap,toc:[],body:aq,excerpt:aq,dir:ar,path:"\u002F框架\u002F20180809\u002FSpring Boot使用Mockito做单元测试",extension:e,title:ao,url:"\u002Fblog-code\u002Fview\u002F框架\u002F20180809\u002FSpring Boot使用Mockito做单元测试\u002F",createAt:new Date(1533772800000),updateAt:new Date(1533772800000),attributes:[{name:f,value:as},{name:g,value:as},{name:h,value:ar,url:"\u002Fblog-code\u002Fpage\u002F框架\u002F20180809\u002F1\u002F"}]},{slug:at,description:"让spring boot支持CORS非常简单，不用做任何配置，只需要在controller里使用@CrossOrigin注解即可。\n@CrossOrigin注解可以使用在类或者方法上，其参数主要有origins和maxAge，用来指定允许跨域的域默认是*，和OPTIONS响应的有效时间，默认是1800。当类和方法都使用@CrossOrigin注解时，会自动合并两个注解的参数。",createdAt:au,updatedAt:au,toc:[],body:av,excerpt:av,dir:aw,path:"\u002F框架\u002F20180802\u002Fspring boot与Nginx支持CORS",extension:e,title:at,url:"\u002Fblog-code\u002Fview\u002F框架\u002F20180802\u002Fspring boot与Nginx支持CORS\u002F",createAt:new Date(1533168000000),updateAt:new Date(1533168000000),attributes:[{name:f,value:ax},{name:g,value:ax},{name:h,value:aw,url:"\u002Fblog-code\u002Fpage\u002F框架\u002F20180802\u002F1\u002F"}]}]}],fetch:{},mutations:void 0}}("text",2,"element","root",".md","createAt","updateAt","sort","wide","code","p","","2018-10-24T00:00:00.000Z","2018-10-24",3,"\u002F框架\u002F20181024","\n","\u002Fblog-code\u002Fpage\u002F1\u002F",10,10000,"青春猪头-牧之原翔子-江之岛","编辑距离","2018-11-14T00:00:00.000Z",{},"\u002F算法\u002F20181114","2018-11-14","word2vec学习小记","2018-11-08T00:00:00.000Z",{},"\u002F算法\u002F20181108","2018-11-08","Quartz集群原理及源码分析","我们需要Quartz框架执行任务，就需要告诉Quartz所需的JobDetail和Trigger。在单机里，Quartz会把JobDetail和Trigger保存在内存里，如果重启，JobDetail和Trigger的数据都会全部丢失（虽然会在代码里重新添加）。显然，需要集群执行，把JobDetail和Trigger保存在内存里是没有办法在各个节点之间进行同步的，而Quartz利用数据库的锁来进行实现。",{},"\u002Fblog-code\u002Fpage\u002F框架\u002F20181024\u002F1\u002F","Quartz框架的使用",{},"Mysql的锁与引擎","共享锁","独占锁",{},"\u002F中间件\u002F20181024","计算机网络复习笔记","2018-09-16T00:00:00.000Z","网络层次","网际协议ip","虚拟互联网络","ip地址分类","划分子网","ip数据报","ip层转发分组流程","等待停止协议","超时重传","流量控制","拥塞控制",{},"\u002F协议\u002F20180916","2018-09-16","jwt总结与jjwt的使用","2018-08-31T00:00:00.000Z",{},"\u002F框架\u002F20180831","2018-08-31","做题笔记","2018-08-20T00:00:00.000Z",{},"\u002F其他\u002F20180820","2018-08-20","Spring Boot使用Mockito做单元测试","2018-08-09T00:00:00.000Z",{},"\u002F框架\u002F20180809","2018-08-09","spring boot与Nginx支持CORS","2018-08-02T00:00:00.000Z",{},"\u002F框架\u002F20180802","2018-08-02")));