__NUXT_JSONP__("/page/6", (function(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,_,$,aa,ab,ac,ad,ae,af,ag,ah,ai,aj,ak,al,am,an,ao,ap,aq,ar,as,at,au,av,aw,ax,ay,az,aA,aB,aC,aD,aE){u.type=e;u.children=[];A.type=e;A.children=[{type:b,tag:m,props:{},children:[{type:a,value:y}]}];F.type=e;F.children=[];K.type=e;K.children=[];P.type=e;P.children=[];U.type=e;U.children=[{type:b,tag:m,props:{},children:[{type:a,value:"最近终于终于啃完翟永超的《Spring Cloud微服务实战》。看完之后，对于这些牛逼的东西，我只能说我终于知道Spring Cloud是想干嘛了（叹气。jpg）。对此总结一下。"}]},{type:a,value:d},{type:b,tag:m,props:{},children:[{type:a,value:"实施Spring Cloud，即想通过把原本单独的大系统，拆分为多个的微服务，以达到系统解耦的目的。但为了依旧提供完整的服务，各个微服务仍然存在着业务依赖。而这些业务依赖则通过rpc等方式进行调用。因此微服务里存在着两个根本角色：服务提供者和服务消费者。当然，对于某一个微服务而言，他自己可以既是服务提供者也是服务消费者，因为他即为其他微服务提供服务，也使用其他微服务的服务。然而这么做问题会出现一大堆，Spring Cloud就是为了解决这些问题而开发或者封装其他工具诞生的。这里先罗列几个这些问题："}]},{type:a,value:d},{type:b,tag:"ol",props:{},children:[{type:a,value:d},{type:b,tag:l,props:{},children:[{type:a,value:"作为服务消费者，怎么知道服务提供者在哪"}]},{type:a,value:d},{type:b,tag:l,props:{},children:[{type:a,value:"作为服务消费者，怎样调用服务提供者的服务"}]},{type:a,value:d},{type:b,tag:l,props:{},children:[{type:a,value:"作为服务消费者，万一服务提供者挂了该怎么办。不可能晾着其他请求一直等这位服务提供者恢复吧！？"}]},{type:a,value:d},{type:b,tag:l,props:{},children:[{type:a,value:"拆分后，微服务数量众多，又各自为政。接口自行变更，管理混乱，怎么办？"}]},{type:a,value:d},{type:b,tag:l,props:{},children:[{type:a,value:"拆分后，微服务数量众多，又各自为政。微服务之间怎样互通消息？"}]},{type:a,value:d},{type:b,tag:l,props:{},children:[{type:a,value:"拆分后，微服务数量众多，又各自为政。如果要修改配置，岂不是要一改就要改好几十甚至上百台机？"}]},{type:a,value:d}]}];Z.type=e;Z.children=[];al.type=e;al.children=[{type:b,tag:"h1",props:{id:am},children:[{type:b,tag:an,props:{ariaHidden:ao,href:"#%E8%BF%9B%E7%A8%8B",tabIndex:ap},children:[{type:b,tag:aq,props:{className:[ar,as]},children:[]}]},{type:a,value:am}]},{type:a,value:d},{type:b,tag:"h2",props:{id:n},children:[{type:b,tag:an,props:{ariaHidden:ao,href:"#%E5%AD%A4%E5%84%BF%E8%BF%9B%E7%A8%8B%E4%B8%8E%E5%83%B5%E5%B0%B8%E8%BF%9B%E7%A8%8B",tabIndex:ap},children:[{type:b,tag:aq,props:{className:[ar,as]},children:[]}]},{type:a,value:n}]},{type:a,value:d},{type:b,tag:m,props:{},children:[{type:a,value:"子进程是由父进程创建的，linux能确保子进程结束后，父进程能通过调用wait()或者waitpid()系统调用获取到子进程的信息。\n其实现方式是，当子进程结束后，虽然系统会是否子进程的大部分资源，如打开的文件，内存等，但是还是会保留少量资源，如pid，直到父进程调用获取子进程的信息才会释放。\n因此，如果子进程还没结束，父进程就结束了，那这些子进程则是孤儿进程，会被init进程（pid=1）收养，以调用释放孤儿进程的资源。\n但是如果子进程结束了，但他的父进程既不结束也不调用释放资源，那么这些子进程则是僵尸进程，会一直占用pid，直到系统无pid可用。"}]}];ax.type=e;ax.children=[{type:b,tag:m,props:{},children:[{type:a,value:"编辑距离可以用来判断两个字符串的相似性。量测方式是把一个字符串转变为另外一个字符串所需的操作次数。操作类型只有三种：增加，删除和替换。这样子，字符串的相似性则可以用"},{type:b,tag:"code",props:{},children:[{type:a,value:"1-编辑距离\u002FMAX(字符串1长度,字符串2长度)"}]},{type:a,value:"来度量。"}]}];aC.type=e;aC.children=[];return {data:[{siteConfig:{siteName:"无名の窝",siteHost:"https:\u002F\u002Fcellargalaxy.github.io",basePath:"\u002Fblog-code\u002F",navs:[{text:"文章",url:o},{text:"归档",url:"\u002Fblog-code\u002Farchive\u002F0\u002F"},{text:"画画",url:"\u002Fblog-code\u002Fhtml\u002Fhua.html"},{text:"开源",url:"\u002Fblog-code\u002Fhttps:\u002Fgithub.com\u002Fcellargalaxy\u002Fblog-vue"}],pageSize:p,urlReplace:{"^/file/blog/code":"https:\u002F\u002Foracleamd1.dynv6.net\u002Ffile\u002Ffile\u002Fblog\u002Fcode"},backgroundImage:{duration:q,fade:1000,images:[{url:"https:\u002F\u002Fi.loli.net\u002F2020\u002F01\u002F25\u002FcofTzDQXitjeVZ6.jpg",description:r,type:j},{url:"https:\u002F\u002Fi.loli.net\u002F2020\u002F01\u002F25\u002FsfaRJ2lVeM3NDbE.jpg",description:r,type:j},{url:"https:\u002F\u002Fi.loli.net\u002F2020\u002F01\u002F26\u002FKybiTdftam5Su7x.jpg",description:"青春猪头-双葉理央",type:j},{url:"https:\u002F\u002Fi.loli.net\u002F2020\u002F09\u002F08\u002FxdX73nfs24qgOYk.jpg",description:"京吹-明日香,久美子",type:j},{url:"https:\u002F\u002Fi.loli.net\u002F2020\u002F02\u002F14\u002FMAiruNcEFW2HYtg.jpg",description:"终将成为你-七海灯子,小糸侑",type:j},{url:"https:\u002F\u002Fi.loli.net\u002F2020\u002F02\u002F05\u002FEojdAxTDJsFpbPw.jpg",description:"玉子市场-北白川玉子",type:j},{url:"https:\u002F\u002Fi.loli.net\u002F2020\u002F01\u002F31\u002FAXxwJDRS9fmN2uU.jpg",description:"fate_hf-弓道馆",type:j},{url:"https:\u002F\u002Fi.loli.net\u002F2020\u002F02\u002F01\u002FaHhVObpJus6dnM4.jpg",description:"fate_hf-樱花树",type:j}]}},homeConfig:{brandInterval:q,brands:[{imageUrl:"https:\u002F\u002Fi.loli.net\u002F2020\u002F01\u002F21\u002FmMEAnwY5XPC2pFb.jpg",title:"日常",texts:["我们所度过的每个平凡的日常，也许就是连续不断发生的奇迹。","日々、私たちが過ごしている日常は、実は奇跡の連続なのかもしれない。"]},{imageUrl:"https:\u002F\u002Fi.loli.net\u002F2020\u002F04\u002F19\u002FH1MmXb9xPcYEhT2.jpg",title:"昨日之歌",texts:["时间梭梭箭如飞，人道漫漫步蹒跚","人間そんな変わるもんじゃないのに、月日ばっかどんどん過ぎて"]}],navs:[{text:"Github",url:"https:\u002F\u002Fgithub.com\u002Fcellargalaxy\u002F"}]},pageFootConfig:{lines:[[{text:"Copyright © 2017-? ."},{text:"备案？不存在的"},{text:"Powered by Nuxt.js & Github"}]]},buildTime:new Date(1659878812358),rootPath:o,crumbs:[],pageSize:p,total:116,currentPage:6,files:[{slug:s,description:k,createdAt:t,updatedAt:t,toc:[],body:u,excerpt:u,dir:v,path:"\u002F框架\u002F20190828\u002F创建自定义starter包",extension:f,title:s,url:"\u002Fblog-code\u002Fview\u002F框架\u002F20190828\u002F创建自定义starter包\u002F",createAt:new Date(1566950400000),updateAt:new Date(1566950400000),attributes:[{name:g,value:w},{name:h,value:w},{name:i,value:v,url:"\u002Fblog-code\u002Fpage\u002F框架\u002F20190828\u002F1\u002F"}]},{slug:x,description:y,createdAt:z,updatedAt:z,toc:[],body:A,excerpt:A,dir:B,path:"\u002F折腾\u002F20190823\u002F通过ssh远程Windows的linux环境",extension:f,title:x,url:"\u002Fblog-code\u002Fview\u002F折腾\u002F20190823\u002F通过ssh远程Windows的linux环境\u002F",createAt:new Date(1566518400000),updateAt:new Date(1566518400000),attributes:[{name:g,value:C},{name:h,value:C},{name:i,value:B,url:"\u002Fblog-code\u002Fpage\u002F折腾\u002F20190823\u002F1\u002F"}]},{slug:D,description:k,createdAt:E,updatedAt:E,toc:[],body:F,excerpt:F,dir:G,path:"\u002F框架\u002F20190215\u002FSpring Boot自动配置",extension:f,title:D,url:"\u002Fblog-code\u002Fview\u002F框架\u002F20190215\u002FSpring Boot自动配置\u002F",createAt:new Date(1550188800000),updateAt:new Date(1550188800000),attributes:[{name:g,value:H},{name:h,value:H},{name:i,value:G,url:"\u002Fblog-code\u002Fpage\u002F框架\u002F20190215\u002F1\u002F"}]},{slug:I,description:k,createdAt:J,updatedAt:J,toc:[],body:K,excerpt:K,dir:L,path:"\u002F折腾\u002F20190201\u002F小米8国际版刷机记",extension:f,title:I,url:"\u002Fblog-code\u002Fview\u002F折腾\u002F20190201\u002F小米8国际版刷机记\u002F",createAt:new Date(1548979200000),updateAt:new Date(1548979200000),attributes:[{name:g,value:M},{name:h,value:M},{name:i,value:L,url:"\u002Fblog-code\u002Fpage\u002F折腾\u002F20190201\u002F1\u002F"}]},{slug:N,description:k,createdAt:O,updatedAt:O,toc:[{id:"mysql的乐观锁",depth:c,text:"Mysql的乐观锁"},{id:"mysql的悲观锁",depth:c,text:"Mysql的悲观锁"}],body:P,excerpt:P,dir:Q,path:"\u002F中间件\u002F20181222\u002FMysql，Redis与Zookeeper实现分布式锁",extension:f,title:N,url:"\u002Fblog-code\u002Fview\u002F中间件\u002F20181222\u002FMysql，Redis与Zookeeper实现分布式锁\u002F",createAt:new Date(1545436800000),updateAt:new Date(1545436800000),attributes:[{name:g,value:R},{name:h,value:R},{name:i,value:Q,url:"\u002Fblog-code\u002Fpage\u002F中间件\u002F20181222\u002F1\u002F"}]},{slug:S,description:"最近终于终于啃完翟永超的《Spring Cloud微服务实战》。看完之后，对于这些牛逼的东西，我只能说我终于知道Spring Cloud是想干嘛了（叹气。jpg）。对此总结一下。\n实施Spring Cloud，即想通过把原本单独的大系统，拆分为多个的微服务，以达到系统解耦的目的。但为了依旧提供完整的服务，各个微服务仍然存在着业务依赖。而这些业务依赖则通过rpc等方式进行调用。因此微服务里存在着两个根本角色：服务提供者和服务消费者。当然，对于某一个微服务而言，他自己可以既是服务提供者也是服务消费者，因为他即为其他微服务提供服务，也使用其他微服务的服务。然而这么做问题会出现一大堆，Spring Cloud就是为了解决这些问题而开发或者封装其他工具诞生的。这里先罗列几个这些问题：\n\n作为服务消费者，怎么知道服务提供者在哪\n作为服务消费者，怎样调用服务提供者的服务\n作为服务消费者，万一服务提供者挂了该怎么办。不可能晾着其他请求一直等这位服务提供者恢复吧！？\n拆分后，微服务数量众多，又各自为政。接口自行变更，管理混乱，怎么办？\n拆分后，微服务数量众多，又各自为政。微服务之间怎样互通消息？\n拆分后，微服务数量众多，又各自为政。如果要修改配置，岂不是要一改就要改好几十甚至上百台机？\n",createdAt:T,updatedAt:T,toc:[],body:U,excerpt:U,dir:V,path:"\u002F框架\u002F20181216\u002FSpring Cloud",extension:f,title:S,url:"\u002Fblog-code\u002Fview\u002F框架\u002F20181216\u002FSpring Cloud\u002F",createAt:new Date(1544918400000),updateAt:new Date(1544918400000),attributes:[{name:g,value:W},{name:h,value:W},{name:i,value:V,url:"\u002Fblog-code\u002Fpage\u002F框架\u002F20181216\u002F1\u002F"}]},{slug:X,description:k,createdAt:Y,updatedAt:Y,toc:[{id:"timer的使用",depth:c,text:"Timer的使用"},{id:"timer的源码",depth:c,text:"Timer的源码"},{id:"taskqueue",depth:c,text:"TaskQueue"},{id:"timerthread的源码",depth:c,text:"TimerThread的源码"},{id:"scheduledexecutorservice的使用",depth:c,text:"ScheduledExecutorService的使用"},{id:"scheduledexecutorservice的源码",depth:c,text:"ScheduledExecutorService的源码"}],body:Z,excerpt:Z,dir:_,path:"\u002Fjava\u002F20181215\u002FJava定时任务",extension:f,title:X,url:"\u002Fblog-code\u002Fview\u002Fjava\u002F20181215\u002FJava定时任务\u002F",createAt:new Date(1544832000000),updateAt:new Date(1544832000000),attributes:[{name:g,value:$},{name:h,value:$},{name:i,value:_,url:"\u002Fblog-code\u002Fpage\u002Fjava\u002F20181215\u002F1\u002F"}]},{slug:aa,description:"进程\n孤儿进程与僵尸进程\n子进程是由父进程创建的，linux能确保子进程结束后，父进程能通过调用wait()或者waitpid()系统调用获取到子进程的信息。\n其实现方式是，当子进程结束后，虽然系统会是否子进程的大部分资源，如打开的文件，内存等，但是还是会保留少量资源，如pid，直到父进程调用获取子进程的信息才会释放。\n因此，如果子进程还没结束，父进程就结束了，那这些子进程则是孤儿进程，会被init进程（pid=1）收养，以调用释放孤儿进程的资源。\n但是如果子进程结束了，但他的父进程既不结束也不调用释放资源，那么这些子进程则是僵尸进程，会一直占用pid，直到系统无pid可用。",createdAt:ab,updatedAt:ab,toc:[{id:n,depth:c,text:n},{id:"什么是线程安全如何实现线程安全",depth:c,text:"什么是线程安全，如何实现线程安全"},{id:ac,depth:c,text:ac},{id:ad,depth:c,text:ad},{id:ae,depth:c,text:ae},{id:af,depth:c,text:af},{id:ag,depth:c,text:ag},{id:ah,depth:c,text:ah},{id:ai,depth:c,text:ai},{id:aj,depth:c,text:aj},{id:ak,depth:c,text:ak}],body:al,excerpt:al,dir:at,path:"\u002Fjava\u002F20181209\u002FJava多线程",extension:f,title:aa,url:"\u002Fblog-code\u002Fview\u002Fjava\u002F20181209\u002FJava多线程\u002F",createAt:new Date(1544313600000),updateAt:new Date(1544313600000),attributes:[{name:g,value:au},{name:h,value:au},{name:i,value:at,url:"\u002Fblog-code\u002Fpage\u002Fjava\u002F20181209\u002F1\u002F"}]},{slug:av,description:"编辑距离可以用来判断两个字符串的相似性。量测方式是把一个字符串转变为另外一个字符串所需的操作次数。操作类型只有三种：增加，删除和替换。这样子，字符串的相似性则可以用1-编辑距离\u002FMAX(字符串1长度,字符串2长度)来度量。",createdAt:aw,updatedAt:aw,toc:[],body:ax,excerpt:ax,dir:ay,path:"\u002F算法\u002F20181114\u002F编辑距离",extension:f,title:av,url:"\u002Fblog-code\u002Fview\u002F算法\u002F20181114\u002F编辑距离\u002F",createAt:new Date(1542153600000),updateAt:new Date(1542153600000),attributes:[{name:g,value:az},{name:h,value:az},{name:i,value:ay,url:"\u002Fblog-code\u002Fpage\u002F算法\u002F20181114\u002F1\u002F"}]},{slug:aA,description:k,createdAt:aB,updatedAt:aB,toc:[],body:aC,excerpt:aC,dir:aD,path:"\u002F算法\u002F20181108\u002Fword2vec学习小记",extension:f,title:aA,url:"\u002Fblog-code\u002Fview\u002F算法\u002F20181108\u002Fword2vec学习小记\u002F",createAt:new Date(1541635200000),updateAt:new Date(1541635200000),attributes:[{name:g,value:aE},{name:h,value:aE},{name:i,value:aD,url:"\u002Fblog-code\u002Fpage\u002F算法\u002F20181108\u002F1\u002F"}]}]}],fetch:{},mutations:void 0}}("text","element",2,"\n","root",".md","createAt","updateAt","sort","wide","","li","p","孤儿进程与僵尸进程","\u002Fblog-code\u002Fpage\u002F1\u002F",10,10000,"青春猪头-牧之原翔子-江之岛","创建自定义starter包","2019-08-28T00:00:00.000Z",{},"\u002F框架\u002F20190828","2019-08-28","通过ssh远程Windows的linux环境","最近垃圾电信的手机信号差到爆炸，满格的4G等于断网，一格的3G不掉线已经偷笑，所以是不可能通过桌面远程到公司电脑了。鉴于此，打算起了能不能通过ssh远程到windows里，随便模拟一把linux的bash shell环境，减轻网络负担。经过倒腾，目前的方案是windows10自带的openssh+linux子系统方案。","2019-08-23T00:00:00.000Z",{},"\u002F折腾\u002F20190823","2019-08-23","Spring Boot自动配置","2019-02-15T00:00:00.000Z",{},"\u002F框架\u002F20190215","2019-02-15","小米8国际版刷机记","2019-02-01T00:00:00.000Z",{},"\u002F折腾\u002F20190201","2019-02-01","Mysql，Redis与Zookeeper实现分布式锁","2018-12-22T00:00:00.000Z",{},"\u002F中间件\u002F20181222","2018-12-22","Spring Cloud","2018-12-16T00:00:00.000Z",{},"\u002F框架\u002F20181216","2018-12-16","Java定时任务","2018-12-15T00:00:00.000Z",{},"\u002Fjava\u002F20181215","2018-12-15","Java多线程","2018-12-09T00:00:00.000Z","线程的生命周期","创建线程的方式","如何关闭线程","死锁","线程池作用","线程池核心参数","创建线程池的方式","配置线程池","其他方法",{},"进程","a","true",-1,"span","icon","icon-link","\u002Fjava\u002F20181209","2018-12-09","编辑距离","2018-11-14T00:00:00.000Z",{},"\u002F算法\u002F20181114","2018-11-14","word2vec学习小记","2018-11-08T00:00:00.000Z",{},"\u002F算法\u002F20181108","2018-11-08")));