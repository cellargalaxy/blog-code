__NUXT_JSONP__("/page/6", (function(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,_,$,aa,ab,ac,ad,ae,af,ag,ah,ai,aj,ak,al,am,an,ao,ap,aq,ar,as,at,au,av,aw,ax,ay,az,aA,aB,aC){x.type=e;x.children=[];C.type=e;C.children=[];H.type=e;H.children=[];M.type=e;M.children=[{type:c,tag:m,props:{},children:[{type:a,value:"最近终于终于啃完翟永超的《Spring Cloud微服务实战》。看完之后，对于这些牛逼的东西，我只能说我终于知道Spring Cloud是想干嘛了（叹气。jpg）。对此总结一下。"}]},{type:a,value:d},{type:c,tag:m,props:{},children:[{type:a,value:"实施Spring Cloud，即想通过把原本单独的大系统，拆分为多个的微服务，以达到系统解耦的目的。但为了依旧提供完整的服务，各个微服务仍然存在着业务依赖。而这些业务依赖则通过rpc等方式进行调用。因此微服务里存在着两个根本角色：服务提供者和服务消费者。当然，对于某一个微服务而言，他自己可以既是服务提供者也是服务消费者，因为他即为其他微服务提供服务，也使用其他微服务的服务。然而这么做问题会出现一大堆，Spring Cloud就是为了解决这些问题而开发或者封装其他工具诞生的。这里先罗列几个这些问题："}]},{type:a,value:d},{type:c,tag:"ol",props:{},children:[{type:a,value:d},{type:c,tag:l,props:{},children:[{type:a,value:"作为服务消费者，怎么知道服务提供者在哪"}]},{type:a,value:d},{type:c,tag:l,props:{},children:[{type:a,value:"作为服务消费者，怎样调用服务提供者的服务"}]},{type:a,value:d},{type:c,tag:l,props:{},children:[{type:a,value:"作为服务消费者，万一服务提供者挂了该怎么办。不可能晾着其他请求一直等这位服务提供者恢复吧！？"}]},{type:a,value:d},{type:c,tag:l,props:{},children:[{type:a,value:"拆分后，微服务数量众多，又各自为政。接口自行变更，管理混乱，怎么办？"}]},{type:a,value:d},{type:c,tag:l,props:{},children:[{type:a,value:"拆分后，微服务数量众多，又各自为政。微服务之间怎样互通消息？"}]},{type:a,value:d},{type:c,tag:l,props:{},children:[{type:a,value:"拆分后，微服务数量众多，又各自为政。如果要修改配置，岂不是要一改就要改好几十甚至上百台机？"}]},{type:a,value:d}]}];R.type=e;R.children=[];ad.type=e;ad.children=[{type:c,tag:"h1",props:{id:ae},children:[{type:c,tag:af,props:{ariaHidden:ag,href:"#%E8%BF%9B%E7%A8%8B",tabIndex:ah},children:[{type:c,tag:ai,props:{className:[aj,ak]},children:[]}]},{type:a,value:ae}]},{type:a,value:d},{type:c,tag:"h2",props:{id:n},children:[{type:c,tag:af,props:{ariaHidden:ag,href:"#%E5%AD%A4%E5%84%BF%E8%BF%9B%E7%A8%8B%E4%B8%8E%E5%83%B5%E5%B0%B8%E8%BF%9B%E7%A8%8B",tabIndex:ah},children:[{type:c,tag:ai,props:{className:[aj,ak]},children:[]}]},{type:a,value:n}]},{type:a,value:d},{type:c,tag:m,props:{},children:[{type:a,value:"子进程是由父进程创建的，linux能确保子进程结束后，父进程能通过调用wait()或者waitpid()系统调用获取到子进程的信息。\n其实现方式是，当子进程结束后，虽然系统会是否子进程的大部分资源，如打开的文件，内存等，但是还是会保留少量资源，如pid，直到父进程调用获取子进程的信息才会释放。\n因此，如果子进程还没结束，父进程就结束了，那这些子进程则是孤儿进程，会被init进程（pid=1）收养，以调用释放孤儿进程的资源。\n但是如果子进程结束了，但他的父进程既不结束也不调用释放资源，那么这些子进程则是僵尸进程，会一直占用pid，直到系统无pid可用。"}]}];ap.type=e;ap.children=[{type:c,tag:m,props:{},children:[{type:a,value:"编辑距离可以用来判断两个字符串的相似性。量测方式是把一个字符串转变为另外一个字符串所需的操作次数。操作类型只有三种：增加，删除和替换。这样子，字符串的相似性则可以用"},{type:c,tag:"code",props:{},children:[{type:a,value:"1-编辑距离\u002FMAX(字符串1长度,字符串2长度)"}]},{type:a,value:"来度量。"}]}];au.type=e;au.children=[];az.type=e;az.children=[{type:c,tag:m,props:{},children:[{type:a,value:ay}]}];aC.type=e;aC.children=[];return {data:[{siteConfig:{siteName:"无名の窝",siteHost:"https:\u002F\u002Fcellargalaxy.github.io",basePath:"\u002Fblog-code\u002F",navs:[{text:"文章",url:r},{text:"归档",url:"\u002Fblog-code\u002Farchive\u002F0\u002F"},{text:"画画",url:"\u002Fblog-code\u002Fhtml\u002Fhua.html"},{text:"开源",url:"\u002Fblog-code\u002Fhttps:\u002Fgithub.com\u002Fcellargalaxy\u002Fblog-vue"}],pageSize:s,urlReplace:{"^/file/blog/code":"https:\u002F\u002Foracleamd1.dynv6.net\u002Ffile\u002Ffile\u002Fblog\u002Fcode"},backgroundImage:{duration:t,fade:1000,images:[{url:"https:\u002F\u002Fi.loli.net\u002F2020\u002F01\u002F25\u002FcofTzDQXitjeVZ6.jpg",description:u,type:j},{url:"https:\u002F\u002Fi.loli.net\u002F2020\u002F01\u002F25\u002FsfaRJ2lVeM3NDbE.jpg",description:u,type:j},{url:"https:\u002F\u002Fi.loli.net\u002F2020\u002F01\u002F26\u002FKybiTdftam5Su7x.jpg",description:"青春猪头-双葉理央",type:j},{url:"https:\u002F\u002Fi.loli.net\u002F2020\u002F09\u002F08\u002FxdX73nfs24qgOYk.jpg",description:"京吹-明日香,久美子",type:j},{url:"https:\u002F\u002Fi.loli.net\u002F2020\u002F02\u002F14\u002FMAiruNcEFW2HYtg.jpg",description:"终将成为你-七海灯子,小糸侑",type:j},{url:"https:\u002F\u002Fi.loli.net\u002F2020\u002F02\u002F05\u002FEojdAxTDJsFpbPw.jpg",description:"玉子市场-北白川玉子",type:j},{url:"https:\u002F\u002Fi.loli.net\u002F2020\u002F01\u002F31\u002FAXxwJDRS9fmN2uU.jpg",description:"fate_hf-弓道馆",type:j},{url:"https:\u002F\u002Fi.loli.net\u002F2020\u002F02\u002F01\u002FaHhVObpJus6dnM4.jpg",description:"fate_hf-樱花树",type:j}]}},homeConfig:{brandInterval:t,brands:[{imageUrl:"https:\u002F\u002Fi.loli.net\u002F2020\u002F01\u002F21\u002FmMEAnwY5XPC2pFb.jpg",title:"日常",texts:["我们所度过的每个平凡的日常，也许就是连续不断发生的奇迹。","日々、私たちが過ごしている日常は、実は奇跡の連続なのかもしれない。"]},{imageUrl:"https:\u002F\u002Fi.loli.net\u002F2020\u002F04\u002F19\u002FH1MmXb9xPcYEhT2.jpg",title:"昨日之歌",texts:["时间梭梭箭如飞，人道漫漫步蹒跚","人間そんな変わるもんじゃないのに、月日ばっかどんどん過ぎて"]}],navs:[{text:"Github",url:"https:\u002F\u002Fgithub.com\u002Fcellargalaxy\u002F"}]},pageFootConfig:{lines:[[{text:"Copyright © 2017-? ."},{text:"备案？不存在的"},{text:"Powered by Nuxt.js & Github"}]]},buildTime:new Date(1655695703465),rootPath:r,crumbs:[],pageSize:s,total:114,currentPage:6,files:[{slug:v,description:k,createdAt:w,updatedAt:w,toc:[],body:x,excerpt:x,dir:y,path:"\u002F框架\u002F20190215\u002FSpring Boot自动配置",extension:f,title:v,url:"\u002Fblog-code\u002Fview\u002F框架\u002F20190215\u002FSpring Boot自动配置\u002F",createAt:new Date(1550188800000),updateAt:new Date(1550188800000),attributes:[{name:g,value:z},{name:h,value:z},{name:i,value:y,url:"\u002Fblog-code\u002Fpage\u002F框架\u002F20190215\u002F1\u002F"}]},{slug:A,description:k,createdAt:B,updatedAt:B,toc:[],body:C,excerpt:C,dir:D,path:"\u002F折腾\u002F20190201\u002F小米8国际版刷机记",extension:f,title:A,url:"\u002Fblog-code\u002Fview\u002F折腾\u002F20190201\u002F小米8国际版刷机记\u002F",createAt:new Date(1548979200000),updateAt:new Date(1548979200000),attributes:[{name:g,value:E},{name:h,value:E},{name:i,value:D,url:"\u002Fblog-code\u002Fpage\u002F折腾\u002F20190201\u002F1\u002F"}]},{slug:F,description:k,createdAt:G,updatedAt:G,toc:[{id:"mysql的乐观锁",depth:b,text:"Mysql的乐观锁"},{id:"mysql的悲观锁",depth:b,text:"Mysql的悲观锁"}],body:H,excerpt:H,dir:I,path:"\u002F中间件\u002F20181222\u002FMysql，Redis与Zookeeper实现分布式锁",extension:f,title:F,url:"\u002Fblog-code\u002Fview\u002F中间件\u002F20181222\u002FMysql，Redis与Zookeeper实现分布式锁\u002F",createAt:new Date(1545436800000),updateAt:new Date(1545436800000),attributes:[{name:g,value:J},{name:h,value:J},{name:i,value:I,url:"\u002Fblog-code\u002Fpage\u002F中间件\u002F20181222\u002F1\u002F"}]},{slug:K,description:"最近终于终于啃完翟永超的《Spring Cloud微服务实战》。看完之后，对于这些牛逼的东西，我只能说我终于知道Spring Cloud是想干嘛了（叹气。jpg）。对此总结一下。\n实施Spring Cloud，即想通过把原本单独的大系统，拆分为多个的微服务，以达到系统解耦的目的。但为了依旧提供完整的服务，各个微服务仍然存在着业务依赖。而这些业务依赖则通过rpc等方式进行调用。因此微服务里存在着两个根本角色：服务提供者和服务消费者。当然，对于某一个微服务而言，他自己可以既是服务提供者也是服务消费者，因为他即为其他微服务提供服务，也使用其他微服务的服务。然而这么做问题会出现一大堆，Spring Cloud就是为了解决这些问题而开发或者封装其他工具诞生的。这里先罗列几个这些问题：\n\n作为服务消费者，怎么知道服务提供者在哪\n作为服务消费者，怎样调用服务提供者的服务\n作为服务消费者，万一服务提供者挂了该怎么办。不可能晾着其他请求一直等这位服务提供者恢复吧！？\n拆分后，微服务数量众多，又各自为政。接口自行变更，管理混乱，怎么办？\n拆分后，微服务数量众多，又各自为政。微服务之间怎样互通消息？\n拆分后，微服务数量众多，又各自为政。如果要修改配置，岂不是要一改就要改好几十甚至上百台机？\n",createdAt:L,updatedAt:L,toc:[],body:M,excerpt:M,dir:N,path:"\u002F框架\u002F20181216\u002FSpring Cloud",extension:f,title:K,url:"\u002Fblog-code\u002Fview\u002F框架\u002F20181216\u002FSpring Cloud\u002F",createAt:new Date(1544918400000),updateAt:new Date(1544918400000),attributes:[{name:g,value:O},{name:h,value:O},{name:i,value:N,url:"\u002Fblog-code\u002Fpage\u002F框架\u002F20181216\u002F1\u002F"}]},{slug:P,description:k,createdAt:Q,updatedAt:Q,toc:[{id:"timer的使用",depth:b,text:"Timer的使用"},{id:"timer的源码",depth:b,text:"Timer的源码"},{id:"taskqueue",depth:b,text:"TaskQueue"},{id:"timerthread的源码",depth:b,text:"TimerThread的源码"},{id:"scheduledexecutorservice的使用",depth:b,text:"ScheduledExecutorService的使用"},{id:"scheduledexecutorservice的源码",depth:b,text:"ScheduledExecutorService的源码"}],body:R,excerpt:R,dir:S,path:"\u002Fjava\u002F20181215\u002FJava定时任务",extension:f,title:P,url:"\u002Fblog-code\u002Fview\u002Fjava\u002F20181215\u002FJava定时任务\u002F",createAt:new Date(1544832000000),updateAt:new Date(1544832000000),attributes:[{name:g,value:T},{name:h,value:T},{name:i,value:S,url:"\u002Fblog-code\u002Fpage\u002Fjava\u002F20181215\u002F1\u002F"}]},{slug:U,description:"进程\n孤儿进程与僵尸进程\n子进程是由父进程创建的，linux能确保子进程结束后，父进程能通过调用wait()或者waitpid()系统调用获取到子进程的信息。\n其实现方式是，当子进程结束后，虽然系统会是否子进程的大部分资源，如打开的文件，内存等，但是还是会保留少量资源，如pid，直到父进程调用获取子进程的信息才会释放。\n因此，如果子进程还没结束，父进程就结束了，那这些子进程则是孤儿进程，会被init进程（pid=1）收养，以调用释放孤儿进程的资源。\n但是如果子进程结束了，但他的父进程既不结束也不调用释放资源，那么这些子进程则是僵尸进程，会一直占用pid，直到系统无pid可用。",createdAt:V,updatedAt:V,toc:[{id:n,depth:b,text:n},{id:"什么是线程安全如何实现线程安全",depth:b,text:"什么是线程安全，如何实现线程安全"},{id:W,depth:b,text:W},{id:X,depth:b,text:X},{id:Y,depth:b,text:Y},{id:Z,depth:b,text:Z},{id:_,depth:b,text:_},{id:$,depth:b,text:$},{id:aa,depth:b,text:aa},{id:ab,depth:b,text:ab},{id:ac,depth:b,text:ac}],body:ad,excerpt:ad,dir:al,path:"\u002Fjava\u002F20181209\u002FJava多线程",extension:f,title:U,url:"\u002Fblog-code\u002Fview\u002Fjava\u002F20181209\u002FJava多线程\u002F",createAt:new Date(1544313600000),updateAt:new Date(1544313600000),attributes:[{name:g,value:am},{name:h,value:am},{name:i,value:al,url:"\u002Fblog-code\u002Fpage\u002Fjava\u002F20181209\u002F1\u002F"}]},{slug:an,description:"编辑距离可以用来判断两个字符串的相似性。量测方式是把一个字符串转变为另外一个字符串所需的操作次数。操作类型只有三种：增加，删除和替换。这样子，字符串的相似性则可以用1-编辑距离\u002FMAX(字符串1长度,字符串2长度)来度量。",createdAt:ao,updatedAt:ao,toc:[],body:ap,excerpt:ap,dir:aq,path:"\u002F算法\u002F20181114\u002F编辑距离",extension:f,title:an,url:"\u002Fblog-code\u002Fview\u002F算法\u002F20181114\u002F编辑距离\u002F",createAt:new Date(1542153600000),updateAt:new Date(1542153600000),attributes:[{name:g,value:ar},{name:h,value:ar},{name:i,value:aq,url:"\u002Fblog-code\u002Fpage\u002F算法\u002F20181114\u002F1\u002F"}]},{slug:as,description:k,createdAt:at,updatedAt:at,toc:[],body:au,excerpt:au,dir:av,path:"\u002F算法\u002F20181108\u002Fword2vec学习小记",extension:f,title:as,url:"\u002Fblog-code\u002Fview\u002F算法\u002F20181108\u002Fword2vec学习小记\u002F",createAt:new Date(1541635200000),updateAt:new Date(1541635200000),attributes:[{name:g,value:aw},{name:h,value:aw},{name:i,value:av,url:"\u002Fblog-code\u002Fpage\u002F算法\u002F20181108\u002F1\u002F"}]},{slug:ax,description:ay,createdAt:o,updatedAt:o,toc:[],body:az,excerpt:az,dir:p,path:"\u002F框架\u002F20181024\u002FQuartz集群原理及源码分析",extension:f,title:ax,url:"\u002Fblog-code\u002Fview\u002F框架\u002F20181024\u002FQuartz集群原理及源码分析\u002F",createAt:new Date(1540339200000),updateAt:new Date(1540339200000),attributes:[{name:g,value:q},{name:h,value:q},{name:i,value:p,url:aA}]},{slug:aB,description:k,createdAt:o,updatedAt:o,toc:[{id:"job与jobdetail",depth:b,text:"Job与JobDetail"},{id:"trigger",depth:b,text:"Trigger"},{id:"scheduler",depth:b,text:"Scheduler"}],body:aC,excerpt:aC,dir:p,path:"\u002F框架\u002F20181024\u002FQuartz框架的使用",extension:f,title:aB,url:"\u002Fblog-code\u002Fview\u002F框架\u002F20181024\u002FQuartz框架的使用\u002F",createAt:new Date(1540339200000),updateAt:new Date(1540339200000),attributes:[{name:g,value:q},{name:h,value:q},{name:i,value:p,url:aA}]}]}],fetch:{},mutations:void 0}}("text",2,"element","\n","root",".md","createAt","updateAt","sort","wide","","li","p","孤儿进程与僵尸进程","2018-10-24T00:00:00.000Z","\u002F框架\u002F20181024","2018-10-24","\u002Fblog-code\u002Fpage\u002F1\u002F",10,10000,"青春猪头-牧之原翔子-江之岛","Spring Boot自动配置","2019-02-15T00:00:00.000Z",{},"\u002F框架\u002F20190215","2019-02-15","小米8国际版刷机记","2019-02-01T00:00:00.000Z",{},"\u002F折腾\u002F20190201","2019-02-01","Mysql，Redis与Zookeeper实现分布式锁","2018-12-22T00:00:00.000Z",{},"\u002F中间件\u002F20181222","2018-12-22","Spring Cloud","2018-12-16T00:00:00.000Z",{},"\u002F框架\u002F20181216","2018-12-16","Java定时任务","2018-12-15T00:00:00.000Z",{},"\u002Fjava\u002F20181215","2018-12-15","Java多线程","2018-12-09T00:00:00.000Z","线程的生命周期","创建线程的方式","如何关闭线程","死锁","线程池作用","线程池核心参数","创建线程池的方式","配置线程池","其他方法",{},"进程","a","true",-1,"span","icon","icon-link","\u002Fjava\u002F20181209","2018-12-09","编辑距离","2018-11-14T00:00:00.000Z",{},"\u002F算法\u002F20181114","2018-11-14","word2vec学习小记","2018-11-08T00:00:00.000Z",{},"\u002F算法\u002F20181108","2018-11-08","Quartz集群原理及源码分析","我们需要Quartz框架执行任务，就需要告诉Quartz所需的JobDetail和Trigger。在单机里，Quartz会把JobDetail和Trigger保存在内存里，如果重启，JobDetail和Trigger的数据都会全部丢失（虽然会在代码里重新添加）。显然，需要集群执行，把JobDetail和Trigger保存在内存里是没有办法在各个节点之间进行同步的，而Quartz利用数据库的锁来进行实现。",{},"\u002Fblog-code\u002Fpage\u002F框架\u002F20181024\u002F1\u002F","Quartz框架的使用",{})));